// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TransitGatewayVpcAttachmentSpec defines the desired state of TransitGatewayVpcAttachment.
//
// Describes a VPC attachment.
type TransitGatewayVPCAttachmentSpec struct {

	// The VPC attachment options.
	Options *CreateTransitGatewayVPCAttachmentRequestOptions `json:"options,omitempty"`
	// The IDs of one or more subnets. You can specify only one subnet per Availability
	// Zone. You must specify at least one subnet, but we recommend that you specify
	// two subnets for better availability. The transit gateway uses one IP address
	// from each specified subnet.
	SubnetIDs  []*string                                  `json:"subnetIDs,omitempty"`
	SubnetRefs []*ackv1alpha1.AWSResourceReferenceWrapper `json:"subnetRefs,omitempty"`
	// The tags. The value parameter is required, but if you don't want the tag
	// to have a value, specify the parameter with no value, and we set the value
	// to an empty string.
	Tags []*Tag `json:"tags,omitempty"`
	// The ID of the transit gateway.
	TransitGatewayID  *string                                  `json:"transitGatewayID,omitempty"`
	TransitGatewayRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"transitGatewayRef,omitempty"`
	// The ID of the VPC.
	VPCID  *string                                  `json:"vpcID,omitempty"`
	VPCRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"vpcRef,omitempty"`
}

// TransitGatewayVPCAttachmentStatus defines the observed state of TransitGatewayVPCAttachment
type TransitGatewayVPCAttachmentStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The creation time.
	// +kubebuilder:validation:Optional
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// The ID of the attachment.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty"`
	// The state of the VPC attachment. Note that the initiating state has been
	// deprecated.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty"`
	// The ID of the Amazon Web Services account that owns the VPC.
	// +kubebuilder:validation:Optional
	VPCOwnerID *string `json:"vpcOwnerID,omitempty"`
}

// TransitGatewayVPCAttachment is the Schema for the TransitGatewayVPCAttachments API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="ID",type=string,priority=0,JSONPath=`.status.id`
type TransitGatewayVPCAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransitGatewayVPCAttachmentSpec   `json:"spec,omitempty"`
	Status            TransitGatewayVPCAttachmentStatus `json:"status,omitempty"`
}

// TransitGatewayVPCAttachmentList contains a list of TransitGatewayVPCAttachment
// +kubebuilder:object:root=true
type TransitGatewayVPCAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransitGatewayVPCAttachment `json:"items"`
}

func init() {
	SchemeBuilder.Register(&TransitGatewayVPCAttachment{}, &TransitGatewayVPCAttachmentList{})
}
