// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CapacityReservationSpec defines the desired state of CapacityReservation.
//
// Describes a Capacity Reservation.
type CapacityReservationSpec struct {

	// Reserved for future use.
	AdditionalInfo *string `json:"additionalInfo,omitempty"`
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`
	// The ID of the Availability Zone in which to create the Capacity Reservation.
	AvailabilityZoneID *string `json:"availabilityZoneID,omitempty"`
	// Unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request. For more information, see Ensure Idempotency (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html).
	ClientToken *string `json:"clientToken,omitempty"`
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun *bool `json:"dryRun,omitempty"`
	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	// This optimization provides dedicated throughput to Amazon EBS and an optimized
	// configuration stack to provide optimal I/O performance. This optimization
	// isn't available with all instance types. Additional usage charges apply when
	// using an EBS- optimized instance.
	EBSOptimized *bool `json:"ebsOptimized,omitempty"`
	// The date and time at which the Capacity Reservation expires. When a Capacity
	// Reservation expires, the reserved capacity is released and you can no longer
	// launch instances into it. The Capacity Reservation's state changes to expired
	// when it reaches its end date and time.
	//
	// You must provide an EndDate value if EndDateType is limited. Omit EndDate
	// if EndDateType is unlimited.
	//
	// If the EndDateType is limited, the Capacity Reservation is cancelled within
	// an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55,
	// the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55
	// on 5/31/2019.
	EndDate *metav1.Time `json:"endDate,omitempty"`
	// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation
	// can have one of the following end types:
	//
	//   - unlimited - The Capacity Reservation remains active until you explicitly
	//     cancel it. Do not provide an EndDate if the EndDateType is unlimited.
	//
	//   - limited - The Capacity Reservation expires automatically at a specified
	//     date and time. You must provide an EndDate value if the EndDateType value
	//     is limited.
	EndDateType *string `json:"endDateType,omitempty"`
	// Deprecated.
	EphemeralStorage *bool `json:"ephemeralStorage,omitempty"`
	// The number of instances for which to reserve capacity.
	//
	// Valid range: 1 - 1000
	// +kubebuilder:validation:Required
	InstanceCount *int64 `json:"instanceCount"`
	// Indicates the type of instance launches that the Capacity Reservation accepts.
	// The options include:
	//
	//   - open - The Capacity Reservation automatically matches all instances
	//     that have matching attributes (instance type, platform, and Availability
	//     Zone). Instances that have matching attributes run in the Capacity Reservation
	//     automatically without specifying any additional parameters.
	//
	//   - targeted - The Capacity Reservation only accepts instances that have
	//     matching attributes (instance type, platform, and Availability Zone),
	//     and explicitly target the Capacity Reservation. This ensures that only
	//     permitted instances can use the reserved capacity.
	//
	// Default: open
	InstanceMatchCriteria *string `json:"instanceMatchCriteria,omitempty"`
	// The type of operating system for which to reserve capacity.
	// +kubebuilder:validation:Required
	InstancePlatform *string `json:"instancePlatform"`
	// The instance type for which to reserve capacity. For more information, see
	// Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
	// in the Amazon EC2 User Guide.
	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType"`
	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity
	// Reservation.
	OutpostARN *string `json:"outpostARN,omitempty"`
	// The Amazon Resource Name (ARN) of the cluster placement group in which to
	// create the Capacity Reservation. For more information, see Capacity Reservations
	// for cluster placement groups (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html)
	// in the Amazon EC2 User Guide.
	PlacementGroupARN *string `json:"placementGroupARN,omitempty"`
	// The tags. The value parameter is required, but if you don't want the tag
	// to have a value, specify the parameter with no value, and we set the value
	// to an empty string.
	Tags []*Tag `json:"tags,omitempty"`
	// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation
	// can have one of the following tenancy settings:
	//
	//   - default - The Capacity Reservation is created on hardware that is shared
	//     with other Amazon Web Services accounts.
	//
	//   - dedicated - The Capacity Reservation is created on single-tenant hardware
	//     that is dedicated to a single Amazon Web Services account.
	Tenancy *string `json:"tenancy,omitempty"`
}

// CapacityReservationStatus defines the observed state of CapacityReservation
type CapacityReservationStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The remaining capacity. Indicates the number of instances that can be launched
	// in the Capacity Reservation.
	// +kubebuilder:validation:Optional
	AvailableInstanceCount *int64 `json:"availableInstanceCount,omitempty"`
	// The ID of the Capacity Reservation Fleet to which the Capacity Reservation
	// belongs. Only valid for Capacity Reservations that were created by a Capacity
	// Reservation Fleet.
	// +kubebuilder:validation:Optional
	CapacityReservationFleetID *string `json:"capacityReservationFleetID,omitempty"`
	// The ID of the Capacity Reservation.
	// +kubebuilder:validation:Optional
	CapacityReservationID *string `json:"capacityReservationID,omitempty"`
	// The date and time at which the Capacity Reservation was created.
	// +kubebuilder:validation:Optional
	CreateDate *metav1.Time `json:"createDate,omitempty"`
	// The ID of the Amazon Web Services account that owns the Capacity Reservation.
	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerID,omitempty"`
	// The date and time at which the Capacity Reservation was started.
	// +kubebuilder:validation:Optional
	StartDate *metav1.Time `json:"startDate,omitempty"`
	// The current state of the Capacity Reservation. A Capacity Reservation can
	// be in one of the following states:
	//
	//    * active - The Capacity Reservation is active and the capacity is available
	//    for your use.
	//
	//    * expired - The Capacity Reservation expired automatically at the date
	//    and time specified in your request. The reserved capacity is no longer
	//    available for your use.
	//
	//    * cancelled - The Capacity Reservation was cancelled. The reserved capacity
	//    is no longer available for your use.
	//
	//    * pending - The Capacity Reservation request was successful but the capacity
	//    provisioning is still pending.
	//
	//    * failed - The Capacity Reservation request has failed. A request might
	//    fail due to invalid request parameters, capacity constraints, or instance
	//    limit constraints. Failed requests are retained for 60 minutes.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty"`
	// The total number of instances for which the Capacity Reservation reserves
	// capacity.
	// +kubebuilder:validation:Optional
	TotalInstanceCount *int64 `json:"totalInstanceCount,omitempty"`
}

// CapacityReservation is the Schema for the CapacityReservations API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="ID",type=string,priority=0,JSONPath=`.status.capacityReservationID`
// +kubebuilder:printcolumn:name="START_DATE",type=date,priority=0,JSONPath=`.status.startDate`
// +kubebuilder:printcolumn:name="STATE",type=string,priority=0,JSONPath=`.status.state`
type CapacityReservation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CapacityReservationSpec   `json:"spec,omitempty"`
	Status            CapacityReservationStatus `json:"status,omitempty"`
}

// CapacityReservationList contains a list of CapacityReservation
// +kubebuilder:object:root=true
type CapacityReservationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CapacityReservation `json:"items"`
}

func init() {
	SchemeBuilder.Register(&CapacityReservation{}, &CapacityReservationList{})
}
