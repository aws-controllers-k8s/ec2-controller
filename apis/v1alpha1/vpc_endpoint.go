// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VpcEndpointSpec defines the desired state of VpcEndpoint.
//
// Describes a VPC endpoint.
type VPCEndpointSpec struct {

	// The DNS options for the endpoint.
	DNSOptions *DNSOptionsSpecification `json:"dnsOptions,omitempty"`
	// The IP address type for the endpoint.
	IPAddressType *string `json:"ipAddressType,omitempty"`
	// (Interface and gateway endpoints) A policy to attach to the endpoint that
	// controls access to the service. The policy must be in valid JSON format.
	// If this parameter is not specified, we attach a default policy that allows
	// full access to the service.
	PolicyDocument *string `json:"policyDocument,omitempty"`
	// (Interface endpoint) Indicates whether to associate a private hosted zone
	// with the specified VPC. The private hosted zone contains a record set for
	// the default public DNS name for the service for the Region (for example,
	// kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses
	// of the endpoint network interfaces in the VPC. This enables you to make requests
	// to the default public DNS name for the service instead of the public DNS
	// names that are automatically generated by the VPC endpoint service.
	//
	// To use a private hosted zone, you must set the following VPC attributes to
	// true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to
	// set the VPC attributes.
	//
	// Default: true
	PrivateDNSEnabled *bool `json:"privateDNSEnabled,omitempty"`
	// (Gateway endpoint) One or more route table IDs.
	RouteTableIDs  []*string                                  `json:"routeTableIDs,omitempty"`
	RouteTableRefs []*ackv1alpha1.AWSResourceReferenceWrapper `json:"routeTableRefs,omitempty"`
	// (Interface endpoint) The ID of one or more security groups to associate with
	// the endpoint network interface.
	SecurityGroupIDs  []*string                                  `json:"securityGroupIDs,omitempty"`
	SecurityGroupRefs []*ackv1alpha1.AWSResourceReferenceWrapper `json:"securityGroupRefs,omitempty"`
	// The service name. To get a list of available services, use the DescribeVpcEndpointServices
	// request, or get the name from the service provider.
	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName"`
	// (Interface and Gateway Load Balancer endpoints) The ID of one or more subnets
	// in which to create an endpoint network interface. For a Gateway Load Balancer
	// endpoint, you can specify one subnet only.
	SubnetIDs  []*string                                  `json:"subnetIDs,omitempty"`
	SubnetRefs []*ackv1alpha1.AWSResourceReferenceWrapper `json:"subnetRefs,omitempty"`
	// The tags. The value parameter is required, but if you don't want the tag
	// to have a value, specify the parameter with no value, and we set the value
	// to an empty string.
	Tags []*Tag `json:"tags,omitempty"`
	// The type of endpoint.
	//
	// Default: Gateway
	VPCEndpointType *string `json:"vpcEndpointType,omitempty"`
	// The ID of the VPC in which the endpoint will be used.
	VPCID  *string                                  `json:"vpcID,omitempty"`
	VPCRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"vpcRef,omitempty"`
}

// VPCEndpointStatus defines the observed state of VPCEndpoint
type VPCEndpointStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The date and time that the endpoint was created.
	// +kubebuilder:validation:Optional
	CreationTimestamp *metav1.Time `json:"creationTimestamp,omitempty"`
	// (Interface endpoint) The DNS entries for the endpoint.
	// +kubebuilder:validation:Optional
	DNSEntries []*DNSEntry `json:"dnsEntries,omitempty"`
	// (Interface endpoint) Information about the security groups that are associated
	// with the network interface.
	// +kubebuilder:validation:Optional
	Groups []*SecurityGroupIdentifier `json:"groups,omitempty"`
	// The last error that occurred for endpoint.
	// +kubebuilder:validation:Optional
	LastError *LastError `json:"lastError,omitempty"`
	// (Interface endpoint) One or more network interfaces for the endpoint.
	// +kubebuilder:validation:Optional
	NetworkInterfaceIDs []*string `json:"networkInterfaceIDs,omitempty"`
	// The ID of the Amazon Web Services account that owns the endpoint.
	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerID,omitempty"`
	// Indicates whether the endpoint is being managed by its service.
	// +kubebuilder:validation:Optional
	RequesterManaged *bool `json:"requesterManaged,omitempty"`
	// The state of the endpoint.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty"`
	// The ID of the endpoint.
	// +kubebuilder:validation:Optional
	VPCEndpointID *string `json:"vpcEndpointID,omitempty"`
}

// VPCEndpoint is the Schema for the VPCEndpoints API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="ID",type=string,priority=0,JSONPath=`.status.vpcEndpointID`
// +kubebuilder:printcolumn:name="state",type=string,priority=0,JSONPath=`.status.state`
type VPCEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCEndpointSpec   `json:"spec,omitempty"`
	Status            VPCEndpointStatus `json:"status,omitempty"`
}

// VPCEndpointList contains a list of VPCEndpoint
// +kubebuilder:object:root=true
type VPCEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCEndpoint `json:"items"`
}

func init() {
	SchemeBuilder.Register(&VPCEndpoint{}, &VPCEndpointList{})
}
