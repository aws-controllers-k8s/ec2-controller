// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SubnetSpec defines the desired state of Subnet.
//
// Describes a subnet.
type SubnetSpec struct {
	// The Availability Zone or Local Zone for the subnet.
	//
	// Default: Amazon Web Services selects one for you. If you create more than
	// one subnet in your VPC, we do not necessarily select a different zone for
	// each subnet.
	//
	// To create a subnet in a Local Zone, set this value to the Local Zone ID,
	// for example us-west-2-lax-1a. For information about the Regions that support
	// Local Zones, see Available Regions (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions)
	// in the Amazon Elastic Compute Cloud User Guide.
	//
	// To create a subnet in an Outpost, set this value to the Availability Zone
	// for the Outpost and specify the Outpost ARN.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`
	// The AZ ID or the Local Zone ID of the subnet.
	AvailabilityZoneID *string `json:"availabilityZoneID,omitempty"`
	// The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24.
	// We modify the specified CIDR block to its canonical form; for example, if
	// you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
	// +kubebuilder:validation:Required
	CIDRBlock *string `json:"cidrBlock"`
	// The IPv6 network range for the subnet, in CIDR notation. The subnet size
	// must use a /64 prefix length.
	IPv6CIDRBlock *string `json:"ipv6CIDRBlock,omitempty"`
	// The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost
	// ARN, you must also specify the Availability Zone of the Outpost subnet.
	OutpostARN *string `json:"outpostARN,omitempty"`
	// The tags to assign to the subnet.
	TagSpecifications []*TagSpecification `json:"tagSpecifications,omitempty"`
	// The ID of the VPC.
	VPCID  *string                                  `json:"vpcID,omitempty"`
	VPCRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"vpcRef,omitempty"`
}

// SubnetStatus defines the observed state of Subnet
type SubnetStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// Indicates whether a network interface created in this subnet (including a
	// network interface created by RunInstances) receives an IPv6 address.
	// +kubebuilder:validation:Optional
	AssignIPv6AddressOnCreation *bool `json:"assignIPv6AddressOnCreation,omitempty"`
	// The number of unused private IPv4 addresses in the subnet. The IPv4 addresses
	// for any stopped instances are considered unavailable.
	// +kubebuilder:validation:Optional
	AvailableIPAddressCount *int64 `json:"availableIPAddressCount,omitempty"`
	// The customer-owned IPv4 address pool associated with the subnet.
	// +kubebuilder:validation:Optional
	CustomerOwnedIPv4Pool *string `json:"customerOwnedIPv4Pool,omitempty"`
	// Indicates whether this is the default subnet for the Availability Zone.
	// +kubebuilder:validation:Optional
	DefaultForAZ *bool `json:"defaultForAZ,omitempty"`
	// Information about the IPv6 CIDR blocks associated with the subnet.
	// +kubebuilder:validation:Optional
	IPv6CIDRBlockAssociationSet []*SubnetIPv6CIDRBlockAssociation `json:"ipv6CIDRBlockAssociationSet,omitempty"`
	// Indicates whether a network interface created in this subnet (including a
	// network interface created by RunInstances) receives a customer-owned IPv4
	// address.
	// +kubebuilder:validation:Optional
	MapCustomerOwnedIPOnLaunch *bool `json:"mapCustomerOwnedIPOnLaunch,omitempty"`
	// Indicates whether instances launched in this subnet receive a public IPv4
	// address.
	// +kubebuilder:validation:Optional
	MapPublicIPOnLaunch *bool `json:"mapPublicIPOnLaunch,omitempty"`
	// The ID of the Amazon Web Services account that owns the subnet.
	// +kubebuilder:validation:Optional
	OwnerID *string `json:"ownerID,omitempty"`
	// The current state of the subnet.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty"`
	// The ID of the subnet.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetID,omitempty"`
	// Any tags assigned to the subnet.
	// +kubebuilder:validation:Optional
	Tags []*Tag `json:"tags,omitempty"`
}

// Subnet is the Schema for the Subnets API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Subnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubnetSpec   `json:"spec,omitempty"`
	Status            SubnetStatus `json:"status,omitempty"`
}

// SubnetList contains a list of Subnet
// +kubebuilder:object:root=true
type SubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Subnet `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Subnet{}, &SubnetList{})
}
