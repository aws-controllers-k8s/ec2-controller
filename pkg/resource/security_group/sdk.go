// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package security_group

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.SecurityGroup{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeSecurityGroupsOutput
	resp, err = rm.sdkapi.DescribeSecurityGroupsWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeSecurityGroups", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.SecurityGroups {
		if elem.Description != nil {
			ko.Spec.Description = elem.Description
		} else {
			ko.Spec.Description = nil
		}
		if elem.Tags != nil {
			f6 := []*svcapitypes.Tag{}
			for _, f6iter := range elem.Tags {
				f6elem := &svcapitypes.Tag{}
				if f6iter.Key != nil {
					f6elem.Key = f6iter.Key
				}
				if f6iter.Value != nil {
					f6elem.Value = f6iter.Value
				}
				f6 = append(f6, f6elem)
			}
			ko.Spec.Tags = f6
		} else {
			ko.Spec.Tags = nil
		}
		if elem.VpcId != nil {
			ko.Spec.VPCID = elem.VpcId
		} else {
			ko.Spec.VPCID = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	if found {

		// Needed because SecurityGroups Name are held in GroupName property of the AWS resource
		ko.Spec.Name = resp.SecurityGroups[0].GroupName

		rm.addRulesToSpec(ko, resp.SecurityGroups[0])

		// A ReadOne call for SecurityGroup Rules (NOT SecurityGroups)
		// is made to refresh Status.Rules
		if rules, err := rm.getRules(ctx, &resource{ko}); err != nil {
			return nil, err
		} else {
			ko.Status.Rules = rules
		}
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return r.ko.Status.ID == nil

}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeSecurityGroupsInput, error) {
	res := &svcsdk.DescribeSecurityGroupsInput{}

	if r.ko.Status.ID != nil {
		f2 := []*string{}
		f2 = append(f2, r.ko.Status.ID)
		res.SetGroupIds(f2)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	updateTagSpecificationsInCreateRequest(desired, input)

	var resp *svcsdk.CreateSecurityGroupOutput
	_ = resp
	resp, err = rm.sdkapi.CreateSecurityGroupWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateSecurityGroup", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.GroupId != nil {
		ko.Status.ID = resp.GroupId
	} else {
		ko.Status.ID = nil
	}
	if resp.Tags != nil {
		f1 := []*svcapitypes.Tag{}
		for _, f1iter := range resp.Tags {
			f1elem := &svcapitypes.Tag{}
			if f1iter.Key != nil {
				f1elem.Key = f1iter.Key
			}
			if f1iter.Value != nil {
				f1elem.Value = f1iter.Value
			}
			f1 = append(f1, f1elem)
		}
		ko.Spec.Tags = f1
	} else {
		ko.Spec.Tags = nil
	}

	rm.setStatusDefaults(ko)

	if rm.requiredFieldsMissingForSGRule(&resource{ko}) {
		return nil, ackerr.NotFound
	}

	// Delete the default egress rule
	if err = rm.deleteDefaultSecurityGroupRule(ctx, &resource{ko}); err != nil {
		return &resource{ko}, err
	}

	if err = rm.syncSGRules(ctx, &resource{ko}, nil); err != nil {
		return &resource{ko}, err
	}

	// A ReadOne call for SecurityGroup Rules (NOT SecurityGroups)
	// is made to refresh Status.Rules with the recently-updated
	// data from the above `sync` call
	if rules, err := rm.getRules(ctx, &resource{ko}); err != nil {
		return &resource{ko}, err
	} else {
		ko.Status.Rules = rules
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateSecurityGroupInput, error) {
	res := &svcsdk.CreateSecurityGroupInput{}

	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.Name != nil {
		res.SetGroupName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.VPCID != nil {
		res.SetVpcId(*r.ko.Spec.VPCID)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return rm.customUpdateSecurityGroup(ctx, desired, latest, delta)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteSecurityGroupOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteSecurityGroupWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteSecurityGroup", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteSecurityGroupInput, error) {
	res := &svcsdk.DeleteSecurityGroupInput{}

	if r.ko.Status.ID != nil {
		res.SetGroupId(*r.ko.Status.ID)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.SecurityGroup,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}

func compareIPPermission(
	a *svcapitypes.IPPermission,
	b *svcapitypes.IPPermission,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if ackcompare.HasNilDifference(a.FromPort, b.FromPort) {
		delta.Add("IPPermission.FromPort", a.FromPort, b.FromPort)
	} else if a.FromPort != nil && b.FromPort != nil {
		if *a.FromPort != *b.FromPort {
			delta.Add("IPPermission.FromPort", a.FromPort, b.FromPort)
		}
	}
	if ackcompare.HasNilDifference(a.IPProtocol, b.IPProtocol) {
		delta.Add("IPPermission.IPProtocol", a.IPProtocol, b.IPProtocol)
	} else if a.IPProtocol != nil && b.IPProtocol != nil {
		if *a.IPProtocol != *b.IPProtocol {
			delta.Add("IPPermission.IPProtocol", a.IPProtocol, b.IPProtocol)
		}
	}
	if len(a.IPRanges) != len(b.IPRanges) {
		delta.Add("IPPermission.IPRanges", a.IPRanges, b.IPRanges)
	} else if len(a.IPRanges) > 0 {
		if !reflect.DeepEqual(a.IPRanges, b.IPRanges) {
			delta.Add("IPPermission.IPRanges", a.IPRanges, b.IPRanges)
		}
	}
	if len(a.IPv6Ranges) != len(b.IPv6Ranges) {
		delta.Add("IPPermission.IPv6Ranges", a.IPv6Ranges, b.IPv6Ranges)
	} else if len(a.IPv6Ranges) > 0 {
		if !reflect.DeepEqual(a.IPv6Ranges, b.IPv6Ranges) {
			delta.Add("IPPermission.IPv6Ranges", a.IPv6Ranges, b.IPv6Ranges)
		}
	}
	if len(a.PrefixListIDs) != len(b.PrefixListIDs) {
		delta.Add("IPPermission.PrefixListIDs", a.PrefixListIDs, b.PrefixListIDs)
	} else if len(a.PrefixListIDs) > 0 {
		if !reflect.DeepEqual(a.PrefixListIDs, b.PrefixListIDs) {
			delta.Add("IPPermission.PrefixListIDs", a.PrefixListIDs, b.PrefixListIDs)
		}
	}
	if ackcompare.HasNilDifference(a.ToPort, b.ToPort) {
		delta.Add("IPPermission.ToPort", a.ToPort, b.ToPort)
	} else if a.ToPort != nil && b.ToPort != nil {
		if *a.ToPort != *b.ToPort {
			delta.Add("IPPermission.ToPort", a.ToPort, b.ToPort)
		}
	}
	if len(a.UserIDGroupPairs) != len(b.UserIDGroupPairs) {
		delta.Add("IPPermission.UserIDGroupPairs", a.UserIDGroupPairs, b.UserIDGroupPairs)
	} else if len(a.UserIDGroupPairs) > 0 {
		if !reflect.DeepEqual(a.UserIDGroupPairs, b.UserIDGroupPairs) {
			delta.Add("IPPermission.UserIDGroupPairs", a.UserIDGroupPairs, b.UserIDGroupPairs)
		}
	}

	return delta
}

func (rm *resourceManager) newIPPermission(
	c svcapitypes.IPPermission,
) *svcsdk.IpPermission {
	res := &svcsdk.IpPermission{}

	if c.FromPort != nil {
		res.SetFromPort(*c.FromPort)
	}
	if c.IPProtocol != nil {
		res.SetIpProtocol(*c.IPProtocol)
	}
	if c.IPRanges != nil {
		resf2 := []*svcsdk.IpRange{}
		for _, resf2iter := range c.IPRanges {
			resf2elem := &svcsdk.IpRange{}
			if resf2iter.CIDRIP != nil {
				resf2elem.SetCidrIp(*resf2iter.CIDRIP)
			}
			if resf2iter.Description != nil {
				resf2elem.SetDescription(*resf2iter.Description)
			}
			resf2 = append(resf2, resf2elem)
		}
		res.SetIpRanges(resf2)
	}
	if c.IPv6Ranges != nil {
		resf3 := []*svcsdk.Ipv6Range{}
		for _, resf3iter := range c.IPv6Ranges {
			resf3elem := &svcsdk.Ipv6Range{}
			if resf3iter.CIDRIPv6 != nil {
				resf3elem.SetCidrIpv6(*resf3iter.CIDRIPv6)
			}
			if resf3iter.Description != nil {
				resf3elem.SetDescription(*resf3iter.Description)
			}
			resf3 = append(resf3, resf3elem)
		}
		res.SetIpv6Ranges(resf3)
	}
	if c.PrefixListIDs != nil {
		resf4 := []*svcsdk.PrefixListId{}
		for _, resf4iter := range c.PrefixListIDs {
			resf4elem := &svcsdk.PrefixListId{}
			if resf4iter.Description != nil {
				resf4elem.SetDescription(*resf4iter.Description)
			}
			if resf4iter.PrefixListID != nil {
				resf4elem.SetPrefixListId(*resf4iter.PrefixListID)
			}
			resf4 = append(resf4, resf4elem)
		}
		res.SetPrefixListIds(resf4)
	}
	if c.ToPort != nil {
		res.SetToPort(*c.ToPort)
	}
	if c.UserIDGroupPairs != nil {
		resf6 := []*svcsdk.UserIdGroupPair{}
		for _, resf6iter := range c.UserIDGroupPairs {
			resf6elem := &svcsdk.UserIdGroupPair{}
			if resf6iter.Description != nil {
				resf6elem.SetDescription(*resf6iter.Description)
			}
			if resf6iter.GroupID != nil {
				resf6elem.SetGroupId(*resf6iter.GroupID)
			}
			if resf6iter.GroupName != nil {
				resf6elem.SetGroupName(*resf6iter.GroupName)
			}
			if resf6iter.PeeringStatus != nil {
				resf6elem.SetPeeringStatus(*resf6iter.PeeringStatus)
			}
			if resf6iter.UserID != nil {
				resf6elem.SetUserId(*resf6iter.UserID)
			}
			if resf6iter.VPCID != nil {
				resf6elem.SetVpcId(*resf6iter.VPCID)
			}
			if resf6iter.VPCPeeringConnectionID != nil {
				resf6elem.SetVpcPeeringConnectionId(*resf6iter.VPCPeeringConnectionID)
			}
			resf6 = append(resf6, resf6elem)
		}
		res.SetUserIdGroupPairs(resf6)
	}

	return res
}

func (rm *resourceManager) newTag(
	c svcapitypes.Tag,
) *svcsdk.Tag {
	res := &svcsdk.Tag{}
	if c.Key != nil {
		res.SetKey(*c.Key)
	}
	if c.Value != nil {
		res.SetValue(*c.Value)
	}

	return res
}

// setSecurityGroupRule sets a resource SecurityGroupRule type
// given the SDK type.
func (rm *resourceManager) setResourceSecurityGroupRule(
	resp *svcsdk.SecurityGroupRule,
) *svcapitypes.SecurityGroupRule {
	res := &svcapitypes.SecurityGroupRule{}

	if resp.CidrIpv4 != nil {
		res.CIDRIPv4 = resp.CidrIpv4
	}
	if resp.CidrIpv6 != nil {
		res.CIDRIPv6 = resp.CidrIpv6
	}
	if resp.Description != nil {
		res.Description = resp.Description
	}
	if resp.FromPort != nil {
		res.FromPort = resp.FromPort
	}
	if resp.IpProtocol != nil {
		res.IPProtocol = resp.IpProtocol
	}
	if resp.IsEgress != nil {
		res.IsEgress = resp.IsEgress
	}
	if resp.PrefixListId != nil {
		res.PrefixListID = resp.PrefixListId
	}
	if resp.SecurityGroupRuleId != nil {
		res.SecurityGroupRuleID = resp.SecurityGroupRuleId
	}
	if resp.Tags != nil {
		resf8 := []*svcapitypes.Tag{}
		for _, resf8iter := range resp.Tags {
			resf8elem := &svcapitypes.Tag{}
			if resf8iter.Key != nil {
				resf8elem.Key = resf8iter.Key
			}
			if resf8iter.Value != nil {
				resf8elem.Value = resf8iter.Value
			}
			resf8 = append(resf8, resf8elem)
		}
		res.Tags = resf8
	}
	if resp.ToPort != nil {
		res.ToPort = resp.ToPort
	}

	return res
}

// setIPPermission sets a resource IPPermission type
// given the SDK type.
func (rm *resourceManager) setResourceIPPermission(
	resp *svcsdk.IpPermission,
) *svcapitypes.IPPermission {
	res := &svcapitypes.IPPermission{}

	if resp.FromPort != nil {
		res.FromPort = resp.FromPort
	}
	if resp.IpProtocol != nil {
		res.IPProtocol = resp.IpProtocol
	}
	if resp.IpRanges != nil {
		resf2 := []*svcapitypes.IPRange{}
		for _, resf2iter := range resp.IpRanges {
			resf2elem := &svcapitypes.IPRange{}
			if resf2iter.CidrIp != nil {
				resf2elem.CIDRIP = resf2iter.CidrIp
			}
			if resf2iter.Description != nil {
				resf2elem.Description = resf2iter.Description
			}
			resf2 = append(resf2, resf2elem)
		}
		res.IPRanges = resf2
	}
	if resp.Ipv6Ranges != nil {
		resf3 := []*svcapitypes.IPv6Range{}
		for _, resf3iter := range resp.Ipv6Ranges {
			resf3elem := &svcapitypes.IPv6Range{}
			if resf3iter.CidrIpv6 != nil {
				resf3elem.CIDRIPv6 = resf3iter.CidrIpv6
			}
			if resf3iter.Description != nil {
				resf3elem.Description = resf3iter.Description
			}
			resf3 = append(resf3, resf3elem)
		}
		res.IPv6Ranges = resf3
	}
	if resp.PrefixListIds != nil {
		resf4 := []*svcapitypes.PrefixListID{}
		for _, resf4iter := range resp.PrefixListIds {
			resf4elem := &svcapitypes.PrefixListID{}
			if resf4iter.Description != nil {
				resf4elem.Description = resf4iter.Description
			}
			if resf4iter.PrefixListId != nil {
				resf4elem.PrefixListID = resf4iter.PrefixListId
			}
			resf4 = append(resf4, resf4elem)
		}
		res.PrefixListIDs = resf4
	}
	if resp.ToPort != nil {
		res.ToPort = resp.ToPort
	}
	if resp.UserIdGroupPairs != nil {
		resf6 := []*svcapitypes.UserIDGroupPair{}
		for _, resf6iter := range resp.UserIdGroupPairs {
			resf6elem := &svcapitypes.UserIDGroupPair{}
			if resf6iter.Description != nil {
				resf6elem.Description = resf6iter.Description
			}
			if resf6iter.GroupId != nil {
				resf6elem.GroupID = resf6iter.GroupId
			}
			if resf6iter.GroupName != nil {
				resf6elem.GroupName = resf6iter.GroupName
			}
			if resf6iter.PeeringStatus != nil {
				resf6elem.PeeringStatus = resf6iter.PeeringStatus
			}
			if resf6iter.UserId != nil {
				resf6elem.UserID = resf6iter.UserId
			}
			if resf6iter.VpcId != nil {
				resf6elem.VPCID = resf6iter.VpcId
			}
			if resf6iter.VpcPeeringConnectionId != nil {
				resf6elem.VPCPeeringConnectionID = resf6iter.VpcPeeringConnectionId
			}
			resf6 = append(resf6, resf6elem)
		}
		res.UserIDGroupPairs = resf6
	}

	return res
}
