// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package transit_gateway_vpc_attachment

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.Options, b.ko.Spec.Options) {
		delta.Add("Spec.Options", a.ko.Spec.Options, b.ko.Spec.Options)
	} else if a.ko.Spec.Options != nil && b.ko.Spec.Options != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.Options.ApplianceModeSupport, b.ko.Spec.Options.ApplianceModeSupport) {
			delta.Add("Spec.Options.ApplianceModeSupport", a.ko.Spec.Options.ApplianceModeSupport, b.ko.Spec.Options.ApplianceModeSupport)
		} else if a.ko.Spec.Options.ApplianceModeSupport != nil && b.ko.Spec.Options.ApplianceModeSupport != nil {
			if *a.ko.Spec.Options.ApplianceModeSupport != *b.ko.Spec.Options.ApplianceModeSupport {
				delta.Add("Spec.Options.ApplianceModeSupport", a.ko.Spec.Options.ApplianceModeSupport, b.ko.Spec.Options.ApplianceModeSupport)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Options.DNSSupport, b.ko.Spec.Options.DNSSupport) {
			delta.Add("Spec.Options.DNSSupport", a.ko.Spec.Options.DNSSupport, b.ko.Spec.Options.DNSSupport)
		} else if a.ko.Spec.Options.DNSSupport != nil && b.ko.Spec.Options.DNSSupport != nil {
			if *a.ko.Spec.Options.DNSSupport != *b.ko.Spec.Options.DNSSupport {
				delta.Add("Spec.Options.DNSSupport", a.ko.Spec.Options.DNSSupport, b.ko.Spec.Options.DNSSupport)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Options.IPv6Support, b.ko.Spec.Options.IPv6Support) {
			delta.Add("Spec.Options.IPv6Support", a.ko.Spec.Options.IPv6Support, b.ko.Spec.Options.IPv6Support)
		} else if a.ko.Spec.Options.IPv6Support != nil && b.ko.Spec.Options.IPv6Support != nil {
			if *a.ko.Spec.Options.IPv6Support != *b.ko.Spec.Options.IPv6Support {
				delta.Add("Spec.Options.IPv6Support", a.ko.Spec.Options.IPv6Support, b.ko.Spec.Options.IPv6Support)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Options.SecurityGroupReferencingSupport, b.ko.Spec.Options.SecurityGroupReferencingSupport) {
			delta.Add("Spec.Options.SecurityGroupReferencingSupport", a.ko.Spec.Options.SecurityGroupReferencingSupport, b.ko.Spec.Options.SecurityGroupReferencingSupport)
		} else if a.ko.Spec.Options.SecurityGroupReferencingSupport != nil && b.ko.Spec.Options.SecurityGroupReferencingSupport != nil {
			if *a.ko.Spec.Options.SecurityGroupReferencingSupport != *b.ko.Spec.Options.SecurityGroupReferencingSupport {
				delta.Add("Spec.Options.SecurityGroupReferencingSupport", a.ko.Spec.Options.SecurityGroupReferencingSupport, b.ko.Spec.Options.SecurityGroupReferencingSupport)
			}
		}
	}
	if len(a.ko.Spec.SubnetIDs) != len(b.ko.Spec.SubnetIDs) {
		delta.Add("Spec.SubnetIDs", a.ko.Spec.SubnetIDs, b.ko.Spec.SubnetIDs)
	} else if len(a.ko.Spec.SubnetIDs) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.SubnetIDs, b.ko.Spec.SubnetIDs) {
			delta.Add("Spec.SubnetIDs", a.ko.Spec.SubnetIDs, b.ko.Spec.SubnetIDs)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.SubnetRefs, b.ko.Spec.SubnetRefs) {
		delta.Add("Spec.SubnetRefs", a.ko.Spec.SubnetRefs, b.ko.Spec.SubnetRefs)
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TransitGatewayID, b.ko.Spec.TransitGatewayID) {
		delta.Add("Spec.TransitGatewayID", a.ko.Spec.TransitGatewayID, b.ko.Spec.TransitGatewayID)
	} else if a.ko.Spec.TransitGatewayID != nil && b.ko.Spec.TransitGatewayID != nil {
		if *a.ko.Spec.TransitGatewayID != *b.ko.Spec.TransitGatewayID {
			delta.Add("Spec.TransitGatewayID", a.ko.Spec.TransitGatewayID, b.ko.Spec.TransitGatewayID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.TransitGatewayRef, b.ko.Spec.TransitGatewayRef) {
		delta.Add("Spec.TransitGatewayRef", a.ko.Spec.TransitGatewayRef, b.ko.Spec.TransitGatewayRef)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.VPCID, b.ko.Spec.VPCID) {
		delta.Add("Spec.VPCID", a.ko.Spec.VPCID, b.ko.Spec.VPCID)
	} else if a.ko.Spec.VPCID != nil && b.ko.Spec.VPCID != nil {
		if *a.ko.Spec.VPCID != *b.ko.Spec.VPCID {
			delta.Add("Spec.VPCID", a.ko.Spec.VPCID, b.ko.Spec.VPCID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.VPCRef, b.ko.Spec.VPCRef) {
		delta.Add("Spec.VPCRef", a.ko.Spec.VPCRef, b.ko.Spec.VPCRef)
	}

	return delta
}
