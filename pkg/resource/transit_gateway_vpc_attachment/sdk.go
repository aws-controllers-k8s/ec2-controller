// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package transit_gateway_vpc_attachment

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/ec2"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.TransitGatewayVPCAttachment{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeTransitGatewayVpcAttachmentsOutput
	resp, err = rm.sdkapi.DescribeTransitGatewayVpcAttachments(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeTransitGatewayVpcAttachments", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.TransitGatewayVpcAttachments {
		if elem.CreationTime != nil {
			ko.Status.CreationTime = &metav1.Time{*elem.CreationTime}
		} else {
			ko.Status.CreationTime = nil
		}
		if elem.Options != nil {
			f1 := &svcapitypes.CreateTransitGatewayVPCAttachmentRequestOptions{}
			if elem.Options.ApplianceModeSupport != "" {
				f1.ApplianceModeSupport = aws.String(string(elem.Options.ApplianceModeSupport))
			}
			if elem.Options.DnsSupport != "" {
				f1.DNSSupport = aws.String(string(elem.Options.DnsSupport))
			}
			if elem.Options.Ipv6Support != "" {
				f1.IPv6Support = aws.String(string(elem.Options.Ipv6Support))
			}
			if elem.Options.SecurityGroupReferencingSupport != "" {
				f1.SecurityGroupReferencingSupport = aws.String(string(elem.Options.SecurityGroupReferencingSupport))
			}
			ko.Spec.Options = f1
		} else {
			ko.Spec.Options = nil
		}
		if elem.State != "" {
			ko.Status.State = aws.String(string(elem.State))
		} else {
			ko.Status.State = nil
		}
		if elem.SubnetIds != nil {
			ko.Spec.SubnetIDs = aws.StringSlice(elem.SubnetIds)
		} else {
			ko.Spec.SubnetIDs = nil
		}
		if elem.Tags != nil {
			f4 := []*svcapitypes.Tag{}
			for _, f4iter := range elem.Tags {
				f4elem := &svcapitypes.Tag{}
				if f4iter.Key != nil {
					f4elem.Key = f4iter.Key
				}
				if f4iter.Value != nil {
					f4elem.Value = f4iter.Value
				}
				f4 = append(f4, f4elem)
			}
			ko.Spec.Tags = f4
		} else {
			ko.Spec.Tags = nil
		}
		if elem.TransitGatewayAttachmentId != nil {
			ko.Status.ID = elem.TransitGatewayAttachmentId
		} else {
			ko.Status.ID = nil
		}
		if elem.TransitGatewayId != nil {
			ko.Spec.TransitGatewayID = elem.TransitGatewayId
		} else {
			ko.Spec.TransitGatewayID = nil
		}
		if elem.VpcId != nil {
			ko.Spec.VPCID = elem.VpcId
		} else {
			ko.Spec.VPCID = nil
		}
		if elem.VpcOwnerId != nil {
			ko.Status.VPCOwnerID = elem.VpcOwnerId
		} else {
			ko.Status.VPCOwnerID = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return rm.checkForMissingRequiredFields(r)
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeTransitGatewayVpcAttachmentsInput, error) {
	res := &svcsdk.DescribeTransitGatewayVpcAttachmentsInput{}

	if r.ko.Status.ID != nil {
		f4 := []string{}
		f4 = append(f4, *r.ko.Status.ID)
		res.TransitGatewayAttachmentIds = f4
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	updateTagSpecificationsInCreateRequest(desired, input)

	var resp *svcsdk.CreateTransitGatewayVpcAttachmentOutput
	_ = resp
	resp, err = rm.sdkapi.CreateTransitGatewayVpcAttachment(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateTransitGatewayVpcAttachment", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.TransitGatewayVpcAttachment.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.TransitGatewayVpcAttachment.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.TransitGatewayVpcAttachment.Options != nil {
		f1 := &svcapitypes.CreateTransitGatewayVPCAttachmentRequestOptions{}
		if resp.TransitGatewayVpcAttachment.Options.ApplianceModeSupport != "" {
			f1.ApplianceModeSupport = aws.String(string(resp.TransitGatewayVpcAttachment.Options.ApplianceModeSupport))
		}
		if resp.TransitGatewayVpcAttachment.Options.DnsSupport != "" {
			f1.DNSSupport = aws.String(string(resp.TransitGatewayVpcAttachment.Options.DnsSupport))
		}
		if resp.TransitGatewayVpcAttachment.Options.Ipv6Support != "" {
			f1.IPv6Support = aws.String(string(resp.TransitGatewayVpcAttachment.Options.Ipv6Support))
		}
		if resp.TransitGatewayVpcAttachment.Options.SecurityGroupReferencingSupport != "" {
			f1.SecurityGroupReferencingSupport = aws.String(string(resp.TransitGatewayVpcAttachment.Options.SecurityGroupReferencingSupport))
		}
		ko.Spec.Options = f1
	} else {
		ko.Spec.Options = nil
	}
	if resp.TransitGatewayVpcAttachment.State != "" {
		ko.Status.State = aws.String(string(resp.TransitGatewayVpcAttachment.State))
	} else {
		ko.Status.State = nil
	}
	if resp.TransitGatewayVpcAttachment.SubnetIds != nil {
		ko.Spec.SubnetIDs = aws.StringSlice(resp.TransitGatewayVpcAttachment.SubnetIds)
	} else {
		ko.Spec.SubnetIDs = nil
	}
	if resp.TransitGatewayVpcAttachment.Tags != nil {
		f4 := []*svcapitypes.Tag{}
		for _, f4iter := range resp.TransitGatewayVpcAttachment.Tags {
			f4elem := &svcapitypes.Tag{}
			if f4iter.Key != nil {
				f4elem.Key = f4iter.Key
			}
			if f4iter.Value != nil {
				f4elem.Value = f4iter.Value
			}
			f4 = append(f4, f4elem)
		}
		ko.Spec.Tags = f4
	} else {
		ko.Spec.Tags = nil
	}
	if resp.TransitGatewayVpcAttachment.TransitGatewayAttachmentId != nil {
		ko.Status.ID = resp.TransitGatewayVpcAttachment.TransitGatewayAttachmentId
	} else {
		ko.Status.ID = nil
	}
	if resp.TransitGatewayVpcAttachment.TransitGatewayId != nil {
		ko.Spec.TransitGatewayID = resp.TransitGatewayVpcAttachment.TransitGatewayId
	} else {
		ko.Spec.TransitGatewayID = nil
	}
	if resp.TransitGatewayVpcAttachment.VpcId != nil {
		ko.Spec.VPCID = resp.TransitGatewayVpcAttachment.VpcId
	} else {
		ko.Spec.VPCID = nil
	}
	if resp.TransitGatewayVpcAttachment.VpcOwnerId != nil {
		ko.Status.VPCOwnerID = resp.TransitGatewayVpcAttachment.VpcOwnerId
	} else {
		ko.Status.VPCOwnerID = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateTransitGatewayVpcAttachmentInput, error) {
	res := &svcsdk.CreateTransitGatewayVpcAttachmentInput{}

	if r.ko.Spec.Options != nil {
		f0 := &svcsdktypes.CreateTransitGatewayVpcAttachmentRequestOptions{}
		if r.ko.Spec.Options.ApplianceModeSupport != nil {
			f0.ApplianceModeSupport = svcsdktypes.ApplianceModeSupportValue(*r.ko.Spec.Options.ApplianceModeSupport)
		}
		if r.ko.Spec.Options.DNSSupport != nil {
			f0.DnsSupport = svcsdktypes.DnsSupportValue(*r.ko.Spec.Options.DNSSupport)
		}
		if r.ko.Spec.Options.IPv6Support != nil {
			f0.Ipv6Support = svcsdktypes.Ipv6SupportValue(*r.ko.Spec.Options.IPv6Support)
		}
		if r.ko.Spec.Options.SecurityGroupReferencingSupport != nil {
			f0.SecurityGroupReferencingSupport = svcsdktypes.SecurityGroupReferencingSupportValue(*r.ko.Spec.Options.SecurityGroupReferencingSupport)
		}
		res.Options = f0
	}
	if r.ko.Spec.SubnetIDs != nil {
		res.SubnetIds = aws.ToStringSlice(r.ko.Spec.SubnetIDs)
	}
	if r.ko.Spec.TransitGatewayID != nil {
		res.TransitGatewayId = r.ko.Spec.TransitGatewayID
	}
	if r.ko.Spec.VPCID != nil {
		res.VpcId = r.ko.Spec.VPCID
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()

	if delta.DifferentAt("Spec.Tags") {
		if err := syncTags(
			ctx, rm.sdkapi, rm.metrics, *latest.ko.Status.ID,
			desired.ko.Spec.Tags, latest.ko.Spec.Tags,
		); err != nil {
			return nil, err
		}
	}

	// Only continue if something other than Tags has changed in the Spec
	if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}

	if *latest.ko.Status.State != string(svcsdktypes.TransitGatewayAttachmentStateAvailable) {
		return desired, requeueWaitUntilCanModify(desired)
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	input.AddSubnetIds, input.RemoveSubnetIds = compareSubnetIDs(
		desired.ko.Spec.SubnetIDs,
		latest.ko.Spec.SubnetIDs,
	)

	var resp *svcsdk.ModifyTransitGatewayVpcAttachmentOutput
	_ = resp
	resp, err = rm.sdkapi.ModifyTransitGatewayVpcAttachment(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyTransitGatewayVpcAttachment", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.TransitGatewayVpcAttachment.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.TransitGatewayVpcAttachment.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.TransitGatewayVpcAttachment.Options != nil {
		f1 := &svcapitypes.CreateTransitGatewayVPCAttachmentRequestOptions{}
		if resp.TransitGatewayVpcAttachment.Options.ApplianceModeSupport != "" {
			f1.ApplianceModeSupport = aws.String(string(resp.TransitGatewayVpcAttachment.Options.ApplianceModeSupport))
		}
		if resp.TransitGatewayVpcAttachment.Options.DnsSupport != "" {
			f1.DNSSupport = aws.String(string(resp.TransitGatewayVpcAttachment.Options.DnsSupport))
		}
		if resp.TransitGatewayVpcAttachment.Options.Ipv6Support != "" {
			f1.IPv6Support = aws.String(string(resp.TransitGatewayVpcAttachment.Options.Ipv6Support))
		}
		if resp.TransitGatewayVpcAttachment.Options.SecurityGroupReferencingSupport != "" {
			f1.SecurityGroupReferencingSupport = aws.String(string(resp.TransitGatewayVpcAttachment.Options.SecurityGroupReferencingSupport))
		}
		ko.Spec.Options = f1
	} else {
		ko.Spec.Options = nil
	}
	if resp.TransitGatewayVpcAttachment.State != "" {
		ko.Status.State = aws.String(string(resp.TransitGatewayVpcAttachment.State))
	} else {
		ko.Status.State = nil
	}
	if resp.TransitGatewayVpcAttachment.SubnetIds != nil {
		ko.Spec.SubnetIDs = aws.StringSlice(resp.TransitGatewayVpcAttachment.SubnetIds)
	} else {
		ko.Spec.SubnetIDs = nil
	}
	if resp.TransitGatewayVpcAttachment.Tags != nil {
		f4 := []*svcapitypes.Tag{}
		for _, f4iter := range resp.TransitGatewayVpcAttachment.Tags {
			f4elem := &svcapitypes.Tag{}
			if f4iter.Key != nil {
				f4elem.Key = f4iter.Key
			}
			if f4iter.Value != nil {
				f4elem.Value = f4iter.Value
			}
			f4 = append(f4, f4elem)
		}
		ko.Spec.Tags = f4
	} else {
		ko.Spec.Tags = nil
	}
	if resp.TransitGatewayVpcAttachment.TransitGatewayAttachmentId != nil {
		ko.Status.ID = resp.TransitGatewayVpcAttachment.TransitGatewayAttachmentId
	} else {
		ko.Status.ID = nil
	}
	if resp.TransitGatewayVpcAttachment.TransitGatewayId != nil {
		ko.Spec.TransitGatewayID = resp.TransitGatewayVpcAttachment.TransitGatewayId
	} else {
		ko.Spec.TransitGatewayID = nil
	}
	if resp.TransitGatewayVpcAttachment.VpcId != nil {
		ko.Spec.VPCID = resp.TransitGatewayVpcAttachment.VpcId
	} else {
		ko.Spec.VPCID = nil
	}
	if resp.TransitGatewayVpcAttachment.VpcOwnerId != nil {
		ko.Status.VPCOwnerID = resp.TransitGatewayVpcAttachment.VpcOwnerId
	} else {
		ko.Status.VPCOwnerID = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.ModifyTransitGatewayVpcAttachmentInput, error) {
	res := &svcsdk.ModifyTransitGatewayVpcAttachmentInput{}

	if r.ko.Spec.Options != nil {
		f2 := &svcsdktypes.ModifyTransitGatewayVpcAttachmentRequestOptions{}
		if r.ko.Spec.Options.ApplianceModeSupport != nil {
			f2.ApplianceModeSupport = svcsdktypes.ApplianceModeSupportValue(*r.ko.Spec.Options.ApplianceModeSupport)
		}
		if r.ko.Spec.Options.DNSSupport != nil {
			f2.DnsSupport = svcsdktypes.DnsSupportValue(*r.ko.Spec.Options.DNSSupport)
		}
		if r.ko.Spec.Options.IPv6Support != nil {
			f2.Ipv6Support = svcsdktypes.Ipv6SupportValue(*r.ko.Spec.Options.IPv6Support)
		}
		if r.ko.Spec.Options.SecurityGroupReferencingSupport != nil {
			f2.SecurityGroupReferencingSupport = svcsdktypes.SecurityGroupReferencingSupportValue(*r.ko.Spec.Options.SecurityGroupReferencingSupport)
		}
		res.Options = f2
	}
	if r.ko.Status.ID != nil {
		res.TransitGatewayAttachmentId = r.ko.Status.ID
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteTransitGatewayVpcAttachmentOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteTransitGatewayVpcAttachment(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteTransitGatewayVpcAttachment", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteTransitGatewayVpcAttachmentInput, error) {
	res := &svcsdk.DeleteTransitGatewayVpcAttachmentInput{}

	if r.ko.Status.ID != nil {
		res.TransitGatewayAttachmentId = r.ko.Status.ID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.TransitGatewayVPCAttachment,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
