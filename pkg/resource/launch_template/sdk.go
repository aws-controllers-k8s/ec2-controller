// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package launch_template

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/ec2"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.LaunchTemplate{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeLaunchTemplatesOutput
	resp, err = rm.sdkapi.DescribeLaunchTemplates(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeLaunchTemplates", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "InvalidLaunchTemplateName.NotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.LaunchTemplates {
		if elem.CreateTime != nil {
			ko.Status.CreateTime = &metav1.Time{*elem.CreateTime}
		} else {
			ko.Status.CreateTime = nil
		}
		if elem.CreatedBy != nil {
			ko.Status.CreatedBy = elem.CreatedBy
		} else {
			ko.Status.CreatedBy = nil
		}
		if elem.DefaultVersionNumber != nil {
			ko.Spec.DefaultVersion = elem.DefaultVersionNumber
		} else {
			ko.Spec.DefaultVersion = nil
		}
		if elem.LatestVersionNumber != nil {
			ko.Status.LatestVersion = elem.LatestVersionNumber
		} else {
			ko.Status.LatestVersion = nil
		}
		if elem.Operator != nil {
			f6 := &svcapitypes.OperatorResponse{}
			if elem.Operator.Managed != nil {
				f6.Managed = elem.Operator.Managed
			}
			if elem.Operator.Principal != nil {
				f6.Principal = elem.Operator.Principal
			}
			ko.Status.Operator = f6
		} else {
			ko.Status.Operator = nil
		}
		if elem.Tags != nil {
			f7 := []*svcapitypes.Tag{}
			for _, f7iter := range elem.Tags {
				f7elem := &svcapitypes.Tag{}
				if f7iter.Key != nil {
					f7elem.Key = f7iter.Key
				}
				if f7iter.Value != nil {
					f7elem.Value = f7iter.Value
				}
				f7 = append(f7, f7elem)
			}
			ko.Spec.Tags = f7
		} else {
			ko.Spec.Tags = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	err = rm.setLatestLaunchTemplateAttributes(ctx, r, ko)
	if err != nil {
		return &resource{ko}, nil
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return rm.checkForMissingRequiredFields(r)
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeLaunchTemplatesInput, error) {
	res := &svcsdk.DescribeLaunchTemplatesInput{}

	if r.ko.Status.ID != nil {
		f2 := []string{}
		f2 = append(f2, *r.ko.Status.ID)
		res.LaunchTemplateIds = f2
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	updateTagSpecificationsInCreateRequest(desired, input)

	var resp *svcsdk.CreateLaunchTemplateOutput
	_ = resp
	resp, err = rm.sdkapi.CreateLaunchTemplate(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateLaunchTemplate", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.LaunchTemplate.CreateTime != nil {
		ko.Status.CreateTime = &metav1.Time{*resp.LaunchTemplate.CreateTime}
	} else {
		ko.Status.CreateTime = nil
	}
	if resp.LaunchTemplate.CreatedBy != nil {
		ko.Status.CreatedBy = resp.LaunchTemplate.CreatedBy
	} else {
		ko.Status.CreatedBy = nil
	}
	if resp.LaunchTemplate.DefaultVersionNumber != nil {
		ko.Spec.DefaultVersion = resp.LaunchTemplate.DefaultVersionNumber
	} else {
		ko.Spec.DefaultVersion = nil
	}
	if resp.LaunchTemplate.LatestVersionNumber != nil {
		ko.Status.LatestVersion = resp.LaunchTemplate.LatestVersionNumber
	} else {
		ko.Status.LatestVersion = nil
	}
	if resp.LaunchTemplate.LaunchTemplateId != nil {
		ko.Status.ID = resp.LaunchTemplate.LaunchTemplateId
	} else {
		ko.Status.ID = nil
	}
	if resp.LaunchTemplate.LaunchTemplateName != nil {
		ko.Spec.Name = resp.LaunchTemplate.LaunchTemplateName
	} else {
		ko.Spec.Name = nil
	}
	if resp.LaunchTemplate.Operator != nil {
		f6 := &svcapitypes.OperatorResponse{}
		if resp.LaunchTemplate.Operator.Managed != nil {
			f6.Managed = resp.LaunchTemplate.Operator.Managed
		}
		if resp.LaunchTemplate.Operator.Principal != nil {
			f6.Principal = resp.LaunchTemplate.Operator.Principal
		}
		ko.Status.Operator = f6
	} else {
		ko.Status.Operator = nil
	}
	if resp.LaunchTemplate.Tags != nil {
		f7 := []*svcapitypes.Tag{}
		for _, f7iter := range resp.LaunchTemplate.Tags {
			f7elem := &svcapitypes.Tag{}
			if f7iter.Key != nil {
				f7elem.Key = f7iter.Key
			}
			if f7iter.Value != nil {
				f7elem.Value = f7iter.Value
			}
			f7 = append(f7, f7elem)
		}
		ko.Spec.Tags = f7
	} else {
		ko.Spec.Tags = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateLaunchTemplateInput, error) {
	res := &svcsdk.CreateLaunchTemplateInput{}

	if r.ko.Spec.Data != nil {
		f0 := &svcsdktypes.RequestLaunchTemplateData{}
		if r.ko.Spec.Data.BlockDeviceMappings != nil {
			f0f0 := []svcsdktypes.LaunchTemplateBlockDeviceMappingRequest{}
			for _, f0f0iter := range r.ko.Spec.Data.BlockDeviceMappings {
				f0f0elem := &svcsdktypes.LaunchTemplateBlockDeviceMappingRequest{}
				if f0f0iter.DeviceName != nil {
					f0f0elem.DeviceName = f0f0iter.DeviceName
				}
				if f0f0iter.EBS != nil {
					f0f0elemf1 := &svcsdktypes.LaunchTemplateEbsBlockDeviceRequest{}
					if f0f0iter.EBS.DeleteOnTermination != nil {
						f0f0elemf1.DeleteOnTermination = f0f0iter.EBS.DeleteOnTermination
					}
					if f0f0iter.EBS.Encrypted != nil {
						f0f0elemf1.Encrypted = f0f0iter.EBS.Encrypted
					}
					if f0f0iter.EBS.IOPS != nil {
						iopsCopy0 := *f0f0iter.EBS.IOPS
						if iopsCopy0 > math.MaxInt32 || iopsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field Iops is of type int32")
						}
						iopsCopy := int32(iopsCopy0)
						f0f0elemf1.Iops = &iopsCopy
					}
					if f0f0iter.EBS.KMSKeyID != nil {
						f0f0elemf1.KmsKeyId = f0f0iter.EBS.KMSKeyID
					}
					if f0f0iter.EBS.SnapshotID != nil {
						f0f0elemf1.SnapshotId = f0f0iter.EBS.SnapshotID
					}
					if f0f0iter.EBS.Throughput != nil {
						throughputCopy0 := *f0f0iter.EBS.Throughput
						if throughputCopy0 > math.MaxInt32 || throughputCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field Throughput is of type int32")
						}
						throughputCopy := int32(throughputCopy0)
						f0f0elemf1.Throughput = &throughputCopy
					}
					if f0f0iter.EBS.VolumeSize != nil {
						volumeSizeCopy0 := *f0f0iter.EBS.VolumeSize
						if volumeSizeCopy0 > math.MaxInt32 || volumeSizeCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field VolumeSize is of type int32")
						}
						volumeSizeCopy := int32(volumeSizeCopy0)
						f0f0elemf1.VolumeSize = &volumeSizeCopy
					}
					if f0f0iter.EBS.VolumeType != nil {
						f0f0elemf1.VolumeType = svcsdktypes.VolumeType(*f0f0iter.EBS.VolumeType)
					}
					f0f0elem.Ebs = f0f0elemf1
				}
				if f0f0iter.NoDevice != nil {
					f0f0elem.NoDevice = f0f0iter.NoDevice
				}
				if f0f0iter.VirtualName != nil {
					f0f0elem.VirtualName = f0f0iter.VirtualName
				}
				f0f0 = append(f0f0, *f0f0elem)
			}
			f0.BlockDeviceMappings = f0f0
		}
		if r.ko.Spec.Data.CapacityReservationSpecification != nil {
			f0f1 := &svcsdktypes.LaunchTemplateCapacityReservationSpecificationRequest{}
			if r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationPreference != nil {
				f0f1.CapacityReservationPreference = svcsdktypes.CapacityReservationPreference(*r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationPreference)
			}
			if r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationTarget != nil {
				f0f1f1 := &svcsdktypes.CapacityReservationTarget{}
				if r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID != nil {
					f0f1f1.CapacityReservationId = r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID
				}
				if r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN != nil {
					f0f1f1.CapacityReservationResourceGroupArn = r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN
				}
				f0f1.CapacityReservationTarget = f0f1f1
			}
			f0.CapacityReservationSpecification = f0f1
		}
		if r.ko.Spec.Data.CPUOptions != nil {
			f0f2 := &svcsdktypes.LaunchTemplateCpuOptionsRequest{}
			if r.ko.Spec.Data.CPUOptions.AmdSevSnp != nil {
				f0f2.AmdSevSnp = svcsdktypes.AmdSevSnpSpecification(*r.ko.Spec.Data.CPUOptions.AmdSevSnp)
			}
			if r.ko.Spec.Data.CPUOptions.CoreCount != nil {
				coreCountCopy0 := *r.ko.Spec.Data.CPUOptions.CoreCount
				if coreCountCopy0 > math.MaxInt32 || coreCountCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field CoreCount is of type int32")
				}
				coreCountCopy := int32(coreCountCopy0)
				f0f2.CoreCount = &coreCountCopy
			}
			if r.ko.Spec.Data.CPUOptions.ThreadsPerCore != nil {
				threadsPerCoreCopy0 := *r.ko.Spec.Data.CPUOptions.ThreadsPerCore
				if threadsPerCoreCopy0 > math.MaxInt32 || threadsPerCoreCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ThreadsPerCore is of type int32")
				}
				threadsPerCoreCopy := int32(threadsPerCoreCopy0)
				f0f2.ThreadsPerCore = &threadsPerCoreCopy
			}
			f0.CpuOptions = f0f2
		}
		if r.ko.Spec.Data.CreditSpecification != nil {
			f0f3 := &svcsdktypes.CreditSpecificationRequest{}
			if r.ko.Spec.Data.CreditSpecification.CPUCredits != nil {
				f0f3.CpuCredits = r.ko.Spec.Data.CreditSpecification.CPUCredits
			}
			f0.CreditSpecification = f0f3
		}
		if r.ko.Spec.Data.DisableAPIStop != nil {
			f0.DisableApiStop = r.ko.Spec.Data.DisableAPIStop
		}
		if r.ko.Spec.Data.DisableAPITermination != nil {
			f0.DisableApiTermination = r.ko.Spec.Data.DisableAPITermination
		}
		if r.ko.Spec.Data.EBSOptimized != nil {
			f0.EbsOptimized = r.ko.Spec.Data.EBSOptimized
		}
		if r.ko.Spec.Data.ElasticGPUSpecifications != nil {
			f0f7 := []svcsdktypes.ElasticGpuSpecification{}
			for _, f0f7iter := range r.ko.Spec.Data.ElasticGPUSpecifications {
				f0f7elem := &svcsdktypes.ElasticGpuSpecification{}
				if f0f7iter.Type != nil {
					f0f7elem.Type = f0f7iter.Type
				}
				f0f7 = append(f0f7, *f0f7elem)
			}
			f0.ElasticGpuSpecifications = f0f7
		}
		if r.ko.Spec.Data.ElasticInferenceAccelerators != nil {
			f0f8 := []svcsdktypes.LaunchTemplateElasticInferenceAccelerator{}
			for _, f0f8iter := range r.ko.Spec.Data.ElasticInferenceAccelerators {
				f0f8elem := &svcsdktypes.LaunchTemplateElasticInferenceAccelerator{}
				if f0f8iter.Count != nil {
					countCopy0 := *f0f8iter.Count
					if countCopy0 > math.MaxInt32 || countCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Count is of type int32")
					}
					countCopy := int32(countCopy0)
					f0f8elem.Count = &countCopy
				}
				if f0f8iter.Type != nil {
					f0f8elem.Type = f0f8iter.Type
				}
				f0f8 = append(f0f8, *f0f8elem)
			}
			f0.ElasticInferenceAccelerators = f0f8
		}
		if r.ko.Spec.Data.EnclaveOptions != nil {
			f0f9 := &svcsdktypes.LaunchTemplateEnclaveOptionsRequest{}
			if r.ko.Spec.Data.EnclaveOptions.Enabled != nil {
				f0f9.Enabled = r.ko.Spec.Data.EnclaveOptions.Enabled
			}
			f0.EnclaveOptions = f0f9
		}
		if r.ko.Spec.Data.HibernationOptions != nil {
			f0f10 := &svcsdktypes.LaunchTemplateHibernationOptionsRequest{}
			if r.ko.Spec.Data.HibernationOptions.Configured != nil {
				f0f10.Configured = r.ko.Spec.Data.HibernationOptions.Configured
			}
			f0.HibernationOptions = f0f10
		}
		if r.ko.Spec.Data.IAMInstanceProfile != nil {
			f0f11 := &svcsdktypes.LaunchTemplateIamInstanceProfileSpecificationRequest{}
			if r.ko.Spec.Data.IAMInstanceProfile.ARN != nil {
				f0f11.Arn = r.ko.Spec.Data.IAMInstanceProfile.ARN
			}
			if r.ko.Spec.Data.IAMInstanceProfile.Name != nil {
				f0f11.Name = r.ko.Spec.Data.IAMInstanceProfile.Name
			}
			f0.IamInstanceProfile = f0f11
		}
		if r.ko.Spec.Data.ImageID != nil {
			f0.ImageId = r.ko.Spec.Data.ImageID
		}
		if r.ko.Spec.Data.InstanceInitiatedShutdownBehavior != nil {
			f0.InstanceInitiatedShutdownBehavior = svcsdktypes.ShutdownBehavior(*r.ko.Spec.Data.InstanceInitiatedShutdownBehavior)
		}
		if r.ko.Spec.Data.InstanceMarketOptions != nil {
			f0f14 := &svcsdktypes.LaunchTemplateInstanceMarketOptionsRequest{}
			if r.ko.Spec.Data.InstanceMarketOptions.MarketType != nil {
				f0f14.MarketType = svcsdktypes.MarketType(*r.ko.Spec.Data.InstanceMarketOptions.MarketType)
			}
			if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions != nil {
				f0f14f1 := &svcsdktypes.LaunchTemplateSpotMarketOptionsRequest{}
				if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
					blockDurationMinutesCopy0 := *r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.BlockDurationMinutes
					if blockDurationMinutesCopy0 > math.MaxInt32 || blockDurationMinutesCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field BlockDurationMinutes is of type int32")
					}
					blockDurationMinutesCopy := int32(blockDurationMinutesCopy0)
					f0f14f1.BlockDurationMinutes = &blockDurationMinutesCopy
				}
				if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != nil {
					f0f14f1.InstanceInterruptionBehavior = svcsdktypes.InstanceInterruptionBehavior(*r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior)
				}
				if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
					f0f14f1.MaxPrice = r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.MaxPrice
				}
				if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.SpotInstanceType != nil {
					f0f14f1.SpotInstanceType = svcsdktypes.SpotInstanceType(*r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.SpotInstanceType)
				}
				if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
					f0f14f1.ValidUntil = &r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.ValidUntil.Time
				}
				f0f14.SpotOptions = f0f14f1
			}
			f0.InstanceMarketOptions = f0f14
		}
		if r.ko.Spec.Data.InstanceRequirements != nil {
			f0f15 := &svcsdktypes.InstanceRequirementsRequest{}
			if r.ko.Spec.Data.InstanceRequirements.AcceleratorCount != nil {
				f0f15f0 := &svcsdktypes.AcceleratorCountRequest{}
				if r.ko.Spec.Data.InstanceRequirements.AcceleratorCount.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.AcceleratorCount.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f0f15f0.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.AcceleratorCount.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.AcceleratorCount.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f0f15f0.Min = &minCopy
				}
				f0f15.AcceleratorCount = f0f15f0
			}
			if r.ko.Spec.Data.InstanceRequirements.AcceleratorManufacturers != nil {
				f0f15f1 := []svcsdktypes.AcceleratorManufacturer{}
				for _, f0f15f1iter := range r.ko.Spec.Data.InstanceRequirements.AcceleratorManufacturers {
					var f0f15f1elem string
					f0f15f1elem = string(*f0f15f1iter)
					f0f15f1 = append(f0f15f1, svcsdktypes.AcceleratorManufacturer(f0f15f1elem))
				}
				f0f15.AcceleratorManufacturers = f0f15f1
			}
			if r.ko.Spec.Data.InstanceRequirements.AcceleratorNames != nil {
				f0f15f2 := []svcsdktypes.AcceleratorName{}
				for _, f0f15f2iter := range r.ko.Spec.Data.InstanceRequirements.AcceleratorNames {
					var f0f15f2elem string
					f0f15f2elem = string(*f0f15f2iter)
					f0f15f2 = append(f0f15f2, svcsdktypes.AcceleratorName(f0f15f2elem))
				}
				f0f15.AcceleratorNames = f0f15f2
			}
			if r.ko.Spec.Data.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
				f0f15f3 := &svcsdktypes.AcceleratorTotalMemoryMiBRequest{}
				if r.ko.Spec.Data.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.AcceleratorTotalMemoryMiB.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f0f15f3.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.AcceleratorTotalMemoryMiB.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f0f15f3.Min = &minCopy
				}
				f0f15.AcceleratorTotalMemoryMiB = f0f15f3
			}
			if r.ko.Spec.Data.InstanceRequirements.AcceleratorTypes != nil {
				f0f15f4 := []svcsdktypes.AcceleratorType{}
				for _, f0f15f4iter := range r.ko.Spec.Data.InstanceRequirements.AcceleratorTypes {
					var f0f15f4elem string
					f0f15f4elem = string(*f0f15f4iter)
					f0f15f4 = append(f0f15f4, svcsdktypes.AcceleratorType(f0f15f4elem))
				}
				f0f15.AcceleratorTypes = f0f15f4
			}
			if r.ko.Spec.Data.InstanceRequirements.AllowedInstanceTypes != nil {
				f0f15.AllowedInstanceTypes = aws.ToStringSlice(r.ko.Spec.Data.InstanceRequirements.AllowedInstanceTypes)
			}
			if r.ko.Spec.Data.InstanceRequirements.BareMetal != nil {
				f0f15.BareMetal = svcsdktypes.BareMetal(*r.ko.Spec.Data.InstanceRequirements.BareMetal)
			}
			if r.ko.Spec.Data.InstanceRequirements.BaselineEBSBandwidthMbps != nil {
				f0f15f7 := &svcsdktypes.BaselineEbsBandwidthMbpsRequest{}
				if r.ko.Spec.Data.InstanceRequirements.BaselineEBSBandwidthMbps.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.BaselineEBSBandwidthMbps.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f0f15f7.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.BaselineEBSBandwidthMbps.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.BaselineEBSBandwidthMbps.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f0f15f7.Min = &minCopy
				}
				f0f15.BaselineEbsBandwidthMbps = f0f15f7
			}
			if r.ko.Spec.Data.InstanceRequirements.BaselinePerformanceFactors != nil {
				f0f15f8 := &svcsdktypes.BaselinePerformanceFactorsRequest{}
				if r.ko.Spec.Data.InstanceRequirements.BaselinePerformanceFactors.CPU != nil {
					f0f15f8f0 := &svcsdktypes.CpuPerformanceFactorRequest{}
					if r.ko.Spec.Data.InstanceRequirements.BaselinePerformanceFactors.CPU.References != nil {
						f0f15f8f0f0 := []svcsdktypes.PerformanceFactorReferenceRequest{}
						for _, f0f15f8f0f0iter := range r.ko.Spec.Data.InstanceRequirements.BaselinePerformanceFactors.CPU.References {
							f0f15f8f0f0elem := &svcsdktypes.PerformanceFactorReferenceRequest{}
							if f0f15f8f0f0iter.InstanceFamily != nil {
								f0f15f8f0f0elem.InstanceFamily = f0f15f8f0f0iter.InstanceFamily
							}
							f0f15f8f0f0 = append(f0f15f8f0f0, *f0f15f8f0f0elem)
						}
						f0f15f8f0.References = f0f15f8f0f0
					}
					f0f15f8.Cpu = f0f15f8f0
				}
				f0f15.BaselinePerformanceFactors = f0f15f8
			}
			if r.ko.Spec.Data.InstanceRequirements.BurstablePerformance != nil {
				f0f15.BurstablePerformance = svcsdktypes.BurstablePerformance(*r.ko.Spec.Data.InstanceRequirements.BurstablePerformance)
			}
			if r.ko.Spec.Data.InstanceRequirements.CPUManufacturers != nil {
				f0f15f10 := []svcsdktypes.CpuManufacturer{}
				for _, f0f15f10iter := range r.ko.Spec.Data.InstanceRequirements.CPUManufacturers {
					var f0f15f10elem string
					f0f15f10elem = string(*f0f15f10iter)
					f0f15f10 = append(f0f15f10, svcsdktypes.CpuManufacturer(f0f15f10elem))
				}
				f0f15.CpuManufacturers = f0f15f10
			}
			if r.ko.Spec.Data.InstanceRequirements.ExcludedInstanceTypes != nil {
				f0f15.ExcludedInstanceTypes = aws.ToStringSlice(r.ko.Spec.Data.InstanceRequirements.ExcludedInstanceTypes)
			}
			if r.ko.Spec.Data.InstanceRequirements.InstanceGenerations != nil {
				f0f15f12 := []svcsdktypes.InstanceGeneration{}
				for _, f0f15f12iter := range r.ko.Spec.Data.InstanceRequirements.InstanceGenerations {
					var f0f15f12elem string
					f0f15f12elem = string(*f0f15f12iter)
					f0f15f12 = append(f0f15f12, svcsdktypes.InstanceGeneration(f0f15f12elem))
				}
				f0f15.InstanceGenerations = f0f15f12
			}
			if r.ko.Spec.Data.InstanceRequirements.LocalStorage != nil {
				f0f15.LocalStorage = svcsdktypes.LocalStorage(*r.ko.Spec.Data.InstanceRequirements.LocalStorage)
			}
			if r.ko.Spec.Data.InstanceRequirements.LocalStorageTypes != nil {
				f0f15f14 := []svcsdktypes.LocalStorageType{}
				for _, f0f15f14iter := range r.ko.Spec.Data.InstanceRequirements.LocalStorageTypes {
					var f0f15f14elem string
					f0f15f14elem = string(*f0f15f14iter)
					f0f15f14 = append(f0f15f14, svcsdktypes.LocalStorageType(f0f15f14elem))
				}
				f0f15.LocalStorageTypes = f0f15f14
			}
			if r.ko.Spec.Data.InstanceRequirements.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice != nil {
				maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy0 := *r.ko.Spec.Data.InstanceRequirements.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice
				if maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy0 > math.MaxInt32 || maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaxSpotPriceAsPercentageOfOptimalOnDemandPrice is of type int32")
				}
				maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy := int32(maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy0)
				f0f15.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice = &maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy
			}
			if r.ko.Spec.Data.InstanceRequirements.MemoryGiBPerVCPU != nil {
				f0f15f16 := &svcsdktypes.MemoryGiBPerVCpuRequest{}
				if r.ko.Spec.Data.InstanceRequirements.MemoryGiBPerVCPU.Max != nil {
					f0f15f16.Max = r.ko.Spec.Data.InstanceRequirements.MemoryGiBPerVCPU.Max
				}
				if r.ko.Spec.Data.InstanceRequirements.MemoryGiBPerVCPU.Min != nil {
					f0f15f16.Min = r.ko.Spec.Data.InstanceRequirements.MemoryGiBPerVCPU.Min
				}
				f0f15.MemoryGiBPerVCpu = f0f15f16
			}
			if r.ko.Spec.Data.InstanceRequirements.MemoryMiB != nil {
				f0f15f17 := &svcsdktypes.MemoryMiBRequest{}
				if r.ko.Spec.Data.InstanceRequirements.MemoryMiB.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.MemoryMiB.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f0f15f17.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.MemoryMiB.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.MemoryMiB.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f0f15f17.Min = &minCopy
				}
				f0f15.MemoryMiB = f0f15f17
			}
			if r.ko.Spec.Data.InstanceRequirements.NetworkBandwidthGbps != nil {
				f0f15f18 := &svcsdktypes.NetworkBandwidthGbpsRequest{}
				if r.ko.Spec.Data.InstanceRequirements.NetworkBandwidthGbps.Max != nil {
					f0f15f18.Max = r.ko.Spec.Data.InstanceRequirements.NetworkBandwidthGbps.Max
				}
				if r.ko.Spec.Data.InstanceRequirements.NetworkBandwidthGbps.Min != nil {
					f0f15f18.Min = r.ko.Spec.Data.InstanceRequirements.NetworkBandwidthGbps.Min
				}
				f0f15.NetworkBandwidthGbps = f0f15f18
			}
			if r.ko.Spec.Data.InstanceRequirements.NetworkInterfaceCount != nil {
				f0f15f19 := &svcsdktypes.NetworkInterfaceCountRequest{}
				if r.ko.Spec.Data.InstanceRequirements.NetworkInterfaceCount.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.NetworkInterfaceCount.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f0f15f19.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.NetworkInterfaceCount.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.NetworkInterfaceCount.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f0f15f19.Min = &minCopy
				}
				f0f15.NetworkInterfaceCount = f0f15f19
			}
			if r.ko.Spec.Data.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
				onDemandMaxPricePercentageOverLowestPriceCopy0 := *r.ko.Spec.Data.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice
				if onDemandMaxPricePercentageOverLowestPriceCopy0 > math.MaxInt32 || onDemandMaxPricePercentageOverLowestPriceCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field OnDemandMaxPricePercentageOverLowestPrice is of type int32")
				}
				onDemandMaxPricePercentageOverLowestPriceCopy := int32(onDemandMaxPricePercentageOverLowestPriceCopy0)
				f0f15.OnDemandMaxPricePercentageOverLowestPrice = &onDemandMaxPricePercentageOverLowestPriceCopy
			}
			if r.ko.Spec.Data.InstanceRequirements.RequireHibernateSupport != nil {
				f0f15.RequireHibernateSupport = r.ko.Spec.Data.InstanceRequirements.RequireHibernateSupport
			}
			if r.ko.Spec.Data.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
				spotMaxPricePercentageOverLowestPriceCopy0 := *r.ko.Spec.Data.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice
				if spotMaxPricePercentageOverLowestPriceCopy0 > math.MaxInt32 || spotMaxPricePercentageOverLowestPriceCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field SpotMaxPricePercentageOverLowestPrice is of type int32")
				}
				spotMaxPricePercentageOverLowestPriceCopy := int32(spotMaxPricePercentageOverLowestPriceCopy0)
				f0f15.SpotMaxPricePercentageOverLowestPrice = &spotMaxPricePercentageOverLowestPriceCopy
			}
			if r.ko.Spec.Data.InstanceRequirements.TotalLocalStorageGB != nil {
				f0f15f23 := &svcsdktypes.TotalLocalStorageGBRequest{}
				if r.ko.Spec.Data.InstanceRequirements.TotalLocalStorageGB.Max != nil {
					f0f15f23.Max = r.ko.Spec.Data.InstanceRequirements.TotalLocalStorageGB.Max
				}
				if r.ko.Spec.Data.InstanceRequirements.TotalLocalStorageGB.Min != nil {
					f0f15f23.Min = r.ko.Spec.Data.InstanceRequirements.TotalLocalStorageGB.Min
				}
				f0f15.TotalLocalStorageGB = f0f15f23
			}
			if r.ko.Spec.Data.InstanceRequirements.VCPUCount != nil {
				f0f15f24 := &svcsdktypes.VCpuCountRangeRequest{}
				if r.ko.Spec.Data.InstanceRequirements.VCPUCount.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.VCPUCount.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f0f15f24.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.VCPUCount.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.VCPUCount.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f0f15f24.Min = &minCopy
				}
				f0f15.VCpuCount = f0f15f24
			}
			f0.InstanceRequirements = f0f15
		}
		if r.ko.Spec.Data.InstanceType != nil {
			f0.InstanceType = svcsdktypes.InstanceType(*r.ko.Spec.Data.InstanceType)
		}
		if r.ko.Spec.Data.KernelID != nil {
			f0.KernelId = r.ko.Spec.Data.KernelID
		}
		if r.ko.Spec.Data.KeyName != nil {
			f0.KeyName = r.ko.Spec.Data.KeyName
		}
		if r.ko.Spec.Data.LicenseSpecifications != nil {
			f0f19 := []svcsdktypes.LaunchTemplateLicenseConfigurationRequest{}
			for _, f0f19iter := range r.ko.Spec.Data.LicenseSpecifications {
				f0f19elem := &svcsdktypes.LaunchTemplateLicenseConfigurationRequest{}
				if f0f19iter.LicenseConfigurationARN != nil {
					f0f19elem.LicenseConfigurationArn = f0f19iter.LicenseConfigurationARN
				}
				f0f19 = append(f0f19, *f0f19elem)
			}
			f0.LicenseSpecifications = f0f19
		}
		if r.ko.Spec.Data.MaintenanceOptions != nil {
			f0f20 := &svcsdktypes.LaunchTemplateInstanceMaintenanceOptionsRequest{}
			if r.ko.Spec.Data.MaintenanceOptions.AutoRecovery != nil {
				f0f20.AutoRecovery = svcsdktypes.LaunchTemplateAutoRecoveryState(*r.ko.Spec.Data.MaintenanceOptions.AutoRecovery)
			}
			f0.MaintenanceOptions = f0f20
		}
		if r.ko.Spec.Data.MetadataOptions != nil {
			f0f21 := &svcsdktypes.LaunchTemplateInstanceMetadataOptionsRequest{}
			if r.ko.Spec.Data.MetadataOptions.HTTPEndpoint != nil {
				f0f21.HttpEndpoint = svcsdktypes.LaunchTemplateInstanceMetadataEndpointState(*r.ko.Spec.Data.MetadataOptions.HTTPEndpoint)
			}
			if r.ko.Spec.Data.MetadataOptions.HTTPProtocolIPv6 != nil {
				f0f21.HttpProtocolIpv6 = svcsdktypes.LaunchTemplateInstanceMetadataProtocolIpv6(*r.ko.Spec.Data.MetadataOptions.HTTPProtocolIPv6)
			}
			if r.ko.Spec.Data.MetadataOptions.HTTPPutResponseHopLimit != nil {
				httpPutResponseHopLimitCopy0 := *r.ko.Spec.Data.MetadataOptions.HTTPPutResponseHopLimit
				if httpPutResponseHopLimitCopy0 > math.MaxInt32 || httpPutResponseHopLimitCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field HttpPutResponseHopLimit is of type int32")
				}
				httpPutResponseHopLimitCopy := int32(httpPutResponseHopLimitCopy0)
				f0f21.HttpPutResponseHopLimit = &httpPutResponseHopLimitCopy
			}
			if r.ko.Spec.Data.MetadataOptions.HTTPTokens != nil {
				f0f21.HttpTokens = svcsdktypes.LaunchTemplateHttpTokensState(*r.ko.Spec.Data.MetadataOptions.HTTPTokens)
			}
			if r.ko.Spec.Data.MetadataOptions.InstanceMetadataTags != nil {
				f0f21.InstanceMetadataTags = svcsdktypes.LaunchTemplateInstanceMetadataTagsState(*r.ko.Spec.Data.MetadataOptions.InstanceMetadataTags)
			}
			f0.MetadataOptions = f0f21
		}
		if r.ko.Spec.Data.Monitoring != nil {
			f0f22 := &svcsdktypes.LaunchTemplatesMonitoringRequest{}
			if r.ko.Spec.Data.Monitoring.Enabled != nil {
				f0f22.Enabled = r.ko.Spec.Data.Monitoring.Enabled
			}
			f0.Monitoring = f0f22
		}
		if r.ko.Spec.Data.NetworkInterfaces != nil {
			f0f23 := []svcsdktypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
			for _, f0f23iter := range r.ko.Spec.Data.NetworkInterfaces {
				f0f23elem := &svcsdktypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
				if f0f23iter.AssociateCarrierIPAddress != nil {
					f0f23elem.AssociateCarrierIpAddress = f0f23iter.AssociateCarrierIPAddress
				}
				if f0f23iter.AssociatePublicIPAddress != nil {
					f0f23elem.AssociatePublicIpAddress = f0f23iter.AssociatePublicIPAddress
				}
				if f0f23iter.DeleteOnTermination != nil {
					f0f23elem.DeleteOnTermination = f0f23iter.DeleteOnTermination
				}
				if f0f23iter.Description != nil {
					f0f23elem.Description = f0f23iter.Description
				}
				if f0f23iter.DeviceIndex != nil {
					deviceIndexCopy0 := *f0f23iter.DeviceIndex
					if deviceIndexCopy0 > math.MaxInt32 || deviceIndexCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field DeviceIndex is of type int32")
					}
					deviceIndexCopy := int32(deviceIndexCopy0)
					f0f23elem.DeviceIndex = &deviceIndexCopy
				}
				if f0f23iter.Groups != nil {
					f0f23elem.Groups = aws.ToStringSlice(f0f23iter.Groups)
				}
				if f0f23iter.InterfaceType != nil {
					f0f23elem.InterfaceType = f0f23iter.InterfaceType
				}
				if f0f23iter.IPv4PrefixCount != nil {
					ipv4PrefixCountCopy0 := *f0f23iter.IPv4PrefixCount
					if ipv4PrefixCountCopy0 > math.MaxInt32 || ipv4PrefixCountCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Ipv4PrefixCount is of type int32")
					}
					ipv4PrefixCountCopy := int32(ipv4PrefixCountCopy0)
					f0f23elem.Ipv4PrefixCount = &ipv4PrefixCountCopy
				}
				if f0f23iter.IPv4Prefixes != nil {
					f0f23elemf8 := []svcsdktypes.Ipv4PrefixSpecificationRequest{}
					for _, f0f23elemf8iter := range f0f23iter.IPv4Prefixes {
						f0f23elemf8elem := &svcsdktypes.Ipv4PrefixSpecificationRequest{}
						if f0f23elemf8iter.IPv4Prefix != nil {
							f0f23elemf8elem.Ipv4Prefix = f0f23elemf8iter.IPv4Prefix
						}
						f0f23elemf8 = append(f0f23elemf8, *f0f23elemf8elem)
					}
					f0f23elem.Ipv4Prefixes = f0f23elemf8
				}
				if f0f23iter.IPv6AddressCount != nil {
					ipv6AddressCountCopy0 := *f0f23iter.IPv6AddressCount
					if ipv6AddressCountCopy0 > math.MaxInt32 || ipv6AddressCountCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Ipv6AddressCount is of type int32")
					}
					ipv6AddressCountCopy := int32(ipv6AddressCountCopy0)
					f0f23elem.Ipv6AddressCount = &ipv6AddressCountCopy
				}
				if f0f23iter.IPv6Addresses != nil {
					f0f23elemf10 := []svcsdktypes.InstanceIpv6AddressRequest{}
					for _, f0f23elemf10iter := range f0f23iter.IPv6Addresses {
						f0f23elemf10elem := &svcsdktypes.InstanceIpv6AddressRequest{}
						if f0f23elemf10iter.IPv6Address != nil {
							f0f23elemf10elem.Ipv6Address = f0f23elemf10iter.IPv6Address
						}
						f0f23elemf10 = append(f0f23elemf10, *f0f23elemf10elem)
					}
					f0f23elem.Ipv6Addresses = f0f23elemf10
				}
				if f0f23iter.IPv6PrefixCount != nil {
					ipv6PrefixCountCopy0 := *f0f23iter.IPv6PrefixCount
					if ipv6PrefixCountCopy0 > math.MaxInt32 || ipv6PrefixCountCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Ipv6PrefixCount is of type int32")
					}
					ipv6PrefixCountCopy := int32(ipv6PrefixCountCopy0)
					f0f23elem.Ipv6PrefixCount = &ipv6PrefixCountCopy
				}
				if f0f23iter.IPv6Prefixes != nil {
					f0f23elemf12 := []svcsdktypes.Ipv6PrefixSpecificationRequest{}
					for _, f0f23elemf12iter := range f0f23iter.IPv6Prefixes {
						f0f23elemf12elem := &svcsdktypes.Ipv6PrefixSpecificationRequest{}
						if f0f23elemf12iter.IPv6Prefix != nil {
							f0f23elemf12elem.Ipv6Prefix = f0f23elemf12iter.IPv6Prefix
						}
						f0f23elemf12 = append(f0f23elemf12, *f0f23elemf12elem)
					}
					f0f23elem.Ipv6Prefixes = f0f23elemf12
				}
				if f0f23iter.NetworkCardIndex != nil {
					networkCardIndexCopy0 := *f0f23iter.NetworkCardIndex
					if networkCardIndexCopy0 > math.MaxInt32 || networkCardIndexCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field NetworkCardIndex is of type int32")
					}
					networkCardIndexCopy := int32(networkCardIndexCopy0)
					f0f23elem.NetworkCardIndex = &networkCardIndexCopy
				}
				if f0f23iter.NetworkInterfaceID != nil {
					f0f23elem.NetworkInterfaceId = f0f23iter.NetworkInterfaceID
				}
				if f0f23iter.PrimaryIPv6 != nil {
					f0f23elem.PrimaryIpv6 = f0f23iter.PrimaryIPv6
				}
				if f0f23iter.PrivateIPAddress != nil {
					f0f23elem.PrivateIpAddress = f0f23iter.PrivateIPAddress
				}
				if f0f23iter.PrivateIPAddresses != nil {
					f0f23elemf17 := []svcsdktypes.PrivateIpAddressSpecification{}
					for _, f0f23elemf17iter := range f0f23iter.PrivateIPAddresses {
						f0f23elemf17elem := &svcsdktypes.PrivateIpAddressSpecification{}
						if f0f23elemf17iter.Primary != nil {
							f0f23elemf17elem.Primary = f0f23elemf17iter.Primary
						}
						if f0f23elemf17iter.PrivateIPAddress != nil {
							f0f23elemf17elem.PrivateIpAddress = f0f23elemf17iter.PrivateIPAddress
						}
						f0f23elemf17 = append(f0f23elemf17, *f0f23elemf17elem)
					}
					f0f23elem.PrivateIpAddresses = f0f23elemf17
				}
				if f0f23iter.SecondaryPrivateIPAddressCount != nil {
					secondaryPrivateIPAddressCountCopy0 := *f0f23iter.SecondaryPrivateIPAddressCount
					if secondaryPrivateIPAddressCountCopy0 > math.MaxInt32 || secondaryPrivateIPAddressCountCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field SecondaryPrivateIpAddressCount is of type int32")
					}
					secondaryPrivateIPAddressCountCopy := int32(secondaryPrivateIPAddressCountCopy0)
					f0f23elem.SecondaryPrivateIpAddressCount = &secondaryPrivateIPAddressCountCopy
				}
				if f0f23iter.SubnetID != nil {
					f0f23elem.SubnetId = f0f23iter.SubnetID
				}
				f0f23 = append(f0f23, *f0f23elem)
			}
			f0.NetworkInterfaces = f0f23
		}
		if r.ko.Spec.Data.Placement != nil {
			f0f24 := &svcsdktypes.LaunchTemplatePlacementRequest{}
			if r.ko.Spec.Data.Placement.Affinity != nil {
				f0f24.Affinity = r.ko.Spec.Data.Placement.Affinity
			}
			if r.ko.Spec.Data.Placement.AvailabilityZone != nil {
				f0f24.AvailabilityZone = r.ko.Spec.Data.Placement.AvailabilityZone
			}
			if r.ko.Spec.Data.Placement.GroupID != nil {
				f0f24.GroupId = r.ko.Spec.Data.Placement.GroupID
			}
			if r.ko.Spec.Data.Placement.GroupName != nil {
				f0f24.GroupName = r.ko.Spec.Data.Placement.GroupName
			}
			if r.ko.Spec.Data.Placement.HostID != nil {
				f0f24.HostId = r.ko.Spec.Data.Placement.HostID
			}
			if r.ko.Spec.Data.Placement.HostResourceGroupARN != nil {
				f0f24.HostResourceGroupArn = r.ko.Spec.Data.Placement.HostResourceGroupARN
			}
			if r.ko.Spec.Data.Placement.PartitionNumber != nil {
				partitionNumberCopy0 := *r.ko.Spec.Data.Placement.PartitionNumber
				if partitionNumberCopy0 > math.MaxInt32 || partitionNumberCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field PartitionNumber is of type int32")
				}
				partitionNumberCopy := int32(partitionNumberCopy0)
				f0f24.PartitionNumber = &partitionNumberCopy
			}
			if r.ko.Spec.Data.Placement.SpreadDomain != nil {
				f0f24.SpreadDomain = r.ko.Spec.Data.Placement.SpreadDomain
			}
			if r.ko.Spec.Data.Placement.Tenancy != nil {
				f0f24.Tenancy = svcsdktypes.Tenancy(*r.ko.Spec.Data.Placement.Tenancy)
			}
			f0.Placement = f0f24
		}
		if r.ko.Spec.Data.PrivateDNSNameOptions != nil {
			f0f25 := &svcsdktypes.LaunchTemplatePrivateDnsNameOptionsRequest{}
			if r.ko.Spec.Data.PrivateDNSNameOptions.EnableResourceNameDNSAAAARecord != nil {
				f0f25.EnableResourceNameDnsAAAARecord = r.ko.Spec.Data.PrivateDNSNameOptions.EnableResourceNameDNSAAAARecord
			}
			if r.ko.Spec.Data.PrivateDNSNameOptions.EnableResourceNameDNSARecord != nil {
				f0f25.EnableResourceNameDnsARecord = r.ko.Spec.Data.PrivateDNSNameOptions.EnableResourceNameDNSARecord
			}
			if r.ko.Spec.Data.PrivateDNSNameOptions.HostnameType != nil {
				f0f25.HostnameType = svcsdktypes.HostnameType(*r.ko.Spec.Data.PrivateDNSNameOptions.HostnameType)
			}
			f0.PrivateDnsNameOptions = f0f25
		}
		if r.ko.Spec.Data.RAMDiskID != nil {
			f0.RamDiskId = r.ko.Spec.Data.RAMDiskID
		}
		if r.ko.Spec.Data.SecurityGroupIDs != nil {
			f0.SecurityGroupIds = aws.ToStringSlice(r.ko.Spec.Data.SecurityGroupIDs)
		}
		if r.ko.Spec.Data.SecurityGroups != nil {
			f0.SecurityGroups = aws.ToStringSlice(r.ko.Spec.Data.SecurityGroups)
		}
		if r.ko.Spec.Data.UserData != nil {
			f0.UserData = r.ko.Spec.Data.UserData
		}
		res.LaunchTemplateData = f0
	}
	if r.ko.Spec.Name != nil {
		res.LaunchTemplateName = r.ko.Spec.Name
	}
	if r.ko.Spec.VersionDescription != nil {
		res.VersionDescription = r.ko.Spec.VersionDescription
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		if err := syncTags(
			ctx, rm.sdkapi, rm.metrics, *latest.ko.Status.ID,
			desired.ko.Spec.Tags, latest.ko.Spec.Tags,
		); err != nil {
			return nil, err
		}
	}
	// We want to update the defaultVersion after we create the new
	// version if needed.
	// Wondering how this works? find out in https://go.dev/play/p/10QSDg2xbTB
	if delta.DifferentAt("Spec.DefaultVersion") {
		defer func() {
			err = rm.updateDefaultVersion(ctx, desired)
		}()
	}

	if !delta.DifferentExcept("Spec.Tags", "Spec.DefaultVersion") {
		return desired, nil
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateLaunchTemplateVersionOutput
	_ = resp
	resp, err = rm.sdkapi.CreateLaunchTemplateVersion(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "CreateLaunchTemplateVersion", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.LaunchTemplateVersion.CreateTime != nil {
		ko.Status.CreateTime = &metav1.Time{*resp.LaunchTemplateVersion.CreateTime}
	} else {
		ko.Status.CreateTime = nil
	}
	if resp.LaunchTemplateVersion.CreatedBy != nil {
		ko.Status.CreatedBy = resp.LaunchTemplateVersion.CreatedBy
	} else {
		ko.Status.CreatedBy = nil
	}
	if resp.LaunchTemplateVersion.LaunchTemplateData != nil {
		f2 := &svcapitypes.RequestLaunchTemplateData{}
		if resp.LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings != nil {
			f2f0 := []*svcapitypes.LaunchTemplateBlockDeviceMappingRequest{}
			for _, f2f0iter := range resp.LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings {
				f2f0elem := &svcapitypes.LaunchTemplateBlockDeviceMappingRequest{}
				if f2f0iter.DeviceName != nil {
					f2f0elem.DeviceName = f2f0iter.DeviceName
				}
				if f2f0iter.Ebs != nil {
					f2f0elemf1 := &svcapitypes.LaunchTemplateEBSBlockDeviceRequest{}
					if f2f0iter.Ebs.DeleteOnTermination != nil {
						f2f0elemf1.DeleteOnTermination = f2f0iter.Ebs.DeleteOnTermination
					}
					if f2f0iter.Ebs.Encrypted != nil {
						f2f0elemf1.Encrypted = f2f0iter.Ebs.Encrypted
					}
					if f2f0iter.Ebs.Iops != nil {
						iopsCopy := int64(*f2f0iter.Ebs.Iops)
						f2f0elemf1.IOPS = &iopsCopy
					}
					if f2f0iter.Ebs.KmsKeyId != nil {
						f2f0elemf1.KMSKeyID = f2f0iter.Ebs.KmsKeyId
					}
					if f2f0iter.Ebs.SnapshotId != nil {
						f2f0elemf1.SnapshotID = f2f0iter.Ebs.SnapshotId
					}
					if f2f0iter.Ebs.Throughput != nil {
						throughputCopy := int64(*f2f0iter.Ebs.Throughput)
						f2f0elemf1.Throughput = &throughputCopy
					}
					if f2f0iter.Ebs.VolumeSize != nil {
						volumeSizeCopy := int64(*f2f0iter.Ebs.VolumeSize)
						f2f0elemf1.VolumeSize = &volumeSizeCopy
					}
					if f2f0iter.Ebs.VolumeType != "" {
						f2f0elemf1.VolumeType = aws.String(string(f2f0iter.Ebs.VolumeType))
					}
					f2f0elem.EBS = f2f0elemf1
				}
				if f2f0iter.NoDevice != nil {
					f2f0elem.NoDevice = f2f0iter.NoDevice
				}
				if f2f0iter.VirtualName != nil {
					f2f0elem.VirtualName = f2f0iter.VirtualName
				}
				f2f0 = append(f2f0, f2f0elem)
			}
			f2.BlockDeviceMappings = f2f0
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification != nil {
			f2f1 := &svcapitypes.LaunchTemplateCapacityReservationSpecificationRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference != "" {
				f2f1.CapacityReservationPreference = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference))
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget != nil {
				f2f1f1 := &svcapitypes.CapacityReservationTarget{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId != nil {
					f2f1f1.CapacityReservationID = resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn != nil {
					f2f1f1.CapacityReservationResourceGroupARN = resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn
				}
				f2f1.CapacityReservationTarget = f2f1f1
			}
			f2.CapacityReservationSpecification = f2f1
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions != nil {
			f2f2 := &svcapitypes.LaunchTemplateCPUOptionsRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.AmdSevSnp != "" {
				f2f2.AmdSevSnp = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.AmdSevSnp))
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount != nil {
				coreCountCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount)
				f2f2.CoreCount = &coreCountCopy
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore != nil {
				threadsPerCoreCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore)
				f2f2.ThreadsPerCore = &threadsPerCoreCopy
			}
			f2.CPUOptions = f2f2
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification != nil {
			f2f3 := &svcapitypes.CreditSpecificationRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits != nil {
				f2f3.CPUCredits = resp.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits
			}
			f2.CreditSpecification = f2f3
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.DisableApiStop != nil {
			f2.DisableAPIStop = resp.LaunchTemplateVersion.LaunchTemplateData.DisableApiStop
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination != nil {
			f2.DisableAPITermination = resp.LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.EbsOptimized != nil {
			f2.EBSOptimized = resp.LaunchTemplateVersion.LaunchTemplateData.EbsOptimized
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications != nil {
			f2f7 := []*svcapitypes.ElasticGPUSpecification{}
			for _, f2f7iter := range resp.LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications {
				f2f7elem := &svcapitypes.ElasticGPUSpecification{}
				if f2f7iter.Type != nil {
					f2f7elem.Type = f2f7iter.Type
				}
				f2f7 = append(f2f7, f2f7elem)
			}
			f2.ElasticGPUSpecifications = f2f7
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators != nil {
			f2f8 := []*svcapitypes.LaunchTemplateElasticInferenceAccelerator{}
			for _, f2f8iter := range resp.LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators {
				f2f8elem := &svcapitypes.LaunchTemplateElasticInferenceAccelerator{}
				if f2f8iter.Count != nil {
					countCopy := int64(*f2f8iter.Count)
					f2f8elem.Count = &countCopy
				}
				if f2f8iter.Type != nil {
					f2f8elem.Type = f2f8iter.Type
				}
				f2f8 = append(f2f8, f2f8elem)
			}
			f2.ElasticInferenceAccelerators = f2f8
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions != nil {
			f2f9 := &svcapitypes.LaunchTemplateEnclaveOptionsRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled != nil {
				f2f9.Enabled = resp.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled
			}
			f2.EnclaveOptions = f2f9
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions != nil {
			f2f10 := &svcapitypes.LaunchTemplateHibernationOptionsRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured != nil {
				f2f10.Configured = resp.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured
			}
			f2.HibernationOptions = f2f10
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile != nil {
			f2f11 := &svcapitypes.LaunchTemplateIAMInstanceProfileSpecificationRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn != nil {
				f2f11.ARN = resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name != nil {
				f2f11.Name = resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name
			}
			f2.IAMInstanceProfile = f2f11
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.ImageId != nil {
			f2.ImageID = resp.LaunchTemplateVersion.LaunchTemplateData.ImageId
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior != "" {
			f2.InstanceInitiatedShutdownBehavior = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior))
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions != nil {
			f2f14 := &svcapitypes.LaunchTemplateInstanceMarketOptionsRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType != "" {
				f2f14.MarketType = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType))
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions != nil {
				f2f14f1 := &svcapitypes.LaunchTemplateSpotMarketOptionsRequest{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
					blockDurationMinutesCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes)
					f2f14f1.BlockDurationMinutes = &blockDurationMinutesCopy
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != "" {
					f2f14f1.InstanceInterruptionBehavior = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior))
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
					f2f14f1.MaxPrice = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType != "" {
					f2f14f1.SpotInstanceType = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType))
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
					f2f14f1.ValidUntil = &metav1.Time{*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil}
				}
				f2f14.SpotOptions = f2f14f1
			}
			f2.InstanceMarketOptions = f2f14
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements != nil {
			f2f15 := &svcapitypes.InstanceRequirementsRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount != nil {
				f2f15f0 := &svcapitypes.AcceleratorCountRequest{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max != nil {
					maxCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max)
					f2f15f0.Max = &maxCopy
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min != nil {
					minCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min)
					f2f15f0.Min = &minCopy
				}
				f2f15.AcceleratorCount = f2f15f0
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers != nil {
				f2f15f1 := []*string{}
				for _, f2f15f1iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers {
					var f2f15f1elem *string
					f2f15f1elem = aws.String(string(f2f15f1iter))
					f2f15f1 = append(f2f15f1, f2f15f1elem)
				}
				f2f15.AcceleratorManufacturers = f2f15f1
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorNames != nil {
				f2f15f2 := []*string{}
				for _, f2f15f2iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorNames {
					var f2f15f2elem *string
					f2f15f2elem = aws.String(string(f2f15f2iter))
					f2f15f2 = append(f2f15f2, f2f15f2elem)
				}
				f2f15.AcceleratorNames = f2f15f2
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
				f2f15f3 := &svcapitypes.AcceleratorTotalMemoryMiBRequest{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
					maxCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max)
					f2f15f3.Max = &maxCopy
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
					minCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min)
					f2f15f3.Min = &minCopy
				}
				f2f15.AcceleratorTotalMemoryMiB = f2f15f3
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTypes != nil {
				f2f15f4 := []*string{}
				for _, f2f15f4iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTypes {
					var f2f15f4elem *string
					f2f15f4elem = aws.String(string(f2f15f4iter))
					f2f15f4 = append(f2f15f4, f2f15f4elem)
				}
				f2f15.AcceleratorTypes = f2f15f4
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AllowedInstanceTypes != nil {
				f2f15.AllowedInstanceTypes = aws.StringSlice(resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AllowedInstanceTypes)
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BareMetal != "" {
				f2f15.BareMetal = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BareMetal))
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps != nil {
				f2f15f7 := &svcapitypes.BaselineEBSBandwidthMbpsRequest{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Max != nil {
					maxCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Max)
					f2f15f7.Max = &maxCopy
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Min != nil {
					minCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Min)
					f2f15f7.Min = &minCopy
				}
				f2f15.BaselineEBSBandwidthMbps = f2f15f7
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselinePerformanceFactors != nil {
				f2f15f8 := &svcapitypes.BaselinePerformanceFactorsRequest{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselinePerformanceFactors.Cpu != nil {
					f2f15f8f0 := &svcapitypes.CPUPerformanceFactorRequest{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselinePerformanceFactors.Cpu.References != nil {
						f2f15f8f0f0 := []*svcapitypes.PerformanceFactorReferenceRequest{}
						for _, f2f15f8f0f0iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselinePerformanceFactors.Cpu.References {
							f2f15f8f0f0elem := &svcapitypes.PerformanceFactorReferenceRequest{}
							if f2f15f8f0f0iter.InstanceFamily != nil {
								f2f15f8f0f0elem.InstanceFamily = f2f15f8f0f0iter.InstanceFamily
							}
							f2f15f8f0f0 = append(f2f15f8f0f0, f2f15f8f0f0elem)
						}
						f2f15f8f0.References = f2f15f8f0f0
					}
					f2f15f8.CPU = f2f15f8f0
				}
				f2f15.BaselinePerformanceFactors = f2f15f8
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BurstablePerformance != "" {
				f2f15.BurstablePerformance = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BurstablePerformance))
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.CpuManufacturers != nil {
				f2f15f10 := []*string{}
				for _, f2f15f10iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.CpuManufacturers {
					var f2f15f10elem *string
					f2f15f10elem = aws.String(string(f2f15f10iter))
					f2f15f10 = append(f2f15f10, f2f15f10elem)
				}
				f2f15.CPUManufacturers = f2f15f10
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes != nil {
				f2f15.ExcludedInstanceTypes = aws.StringSlice(resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes)
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.InstanceGenerations != nil {
				f2f15f12 := []*string{}
				for _, f2f15f12iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.InstanceGenerations {
					var f2f15f12elem *string
					f2f15f12elem = aws.String(string(f2f15f12iter))
					f2f15f12 = append(f2f15f12, f2f15f12elem)
				}
				f2f15.InstanceGenerations = f2f15f12
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorage != "" {
				f2f15.LocalStorage = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorage))
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorageTypes != nil {
				f2f15f14 := []*string{}
				for _, f2f15f14iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorageTypes {
					var f2f15f14elem *string
					f2f15f14elem = aws.String(string(f2f15f14iter))
					f2f15f14 = append(f2f15f14, f2f15f14elem)
				}
				f2f15.LocalStorageTypes = f2f15f14
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice != nil {
				maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice)
				f2f15.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice = &maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu != nil {
				f2f15f16 := &svcapitypes.MemoryGiBPerVCPURequest{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Max != nil {
					f2f15f16.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Max
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Min != nil {
					f2f15f16.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Min
				}
				f2f15.MemoryGiBPerVCPU = f2f15f16
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB != nil {
				f2f15f17 := &svcapitypes.MemoryMiBRequest{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max != nil {
					maxCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max)
					f2f15f17.Max = &maxCopy
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min != nil {
					minCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min)
					f2f15f17.Min = &minCopy
				}
				f2f15.MemoryMiB = f2f15f17
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkBandwidthGbps != nil {
				f2f15f18 := &svcapitypes.NetworkBandwidthGbpsRequest{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkBandwidthGbps.Max != nil {
					f2f15f18.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkBandwidthGbps.Max
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkBandwidthGbps.Min != nil {
					f2f15f18.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkBandwidthGbps.Min
				}
				f2f15.NetworkBandwidthGbps = f2f15f18
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount != nil {
				f2f15f19 := &svcapitypes.NetworkInterfaceCountRequest{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max != nil {
					maxCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max)
					f2f15f19.Max = &maxCopy
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min != nil {
					minCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min)
					f2f15f19.Min = &minCopy
				}
				f2f15.NetworkInterfaceCount = f2f15f19
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
				onDemandMaxPricePercentageOverLowestPriceCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice)
				f2f15.OnDemandMaxPricePercentageOverLowestPrice = &onDemandMaxPricePercentageOverLowestPriceCopy
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport != nil {
				f2f15.RequireHibernateSupport = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
				spotMaxPricePercentageOverLowestPriceCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice)
				f2f15.SpotMaxPricePercentageOverLowestPrice = &spotMaxPricePercentageOverLowestPriceCopy
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB != nil {
				f2f15f23 := &svcapitypes.TotalLocalStorageGBRequest{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max != nil {
					f2f15f23.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min != nil {
					f2f15f23.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min
				}
				f2f15.TotalLocalStorageGB = f2f15f23
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount != nil {
				f2f15f24 := &svcapitypes.VCPUCountRangeRequest{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Max != nil {
					maxCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Max)
					f2f15f24.Max = &maxCopy
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Min != nil {
					minCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Min)
					f2f15f24.Min = &minCopy
				}
				f2f15.VCPUCount = f2f15f24
			}
			f2.InstanceRequirements = f2f15
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceType != "" {
			f2.InstanceType = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.InstanceType))
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.KernelId != nil {
			f2.KernelID = resp.LaunchTemplateVersion.LaunchTemplateData.KernelId
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.KeyName != nil {
			f2.KeyName = resp.LaunchTemplateVersion.LaunchTemplateData.KeyName
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications != nil {
			f2f19 := []*svcapitypes.LaunchTemplateLicenseConfigurationRequest{}
			for _, f2f19iter := range resp.LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications {
				f2f19elem := &svcapitypes.LaunchTemplateLicenseConfigurationRequest{}
				if f2f19iter.LicenseConfigurationArn != nil {
					f2f19elem.LicenseConfigurationARN = f2f19iter.LicenseConfigurationArn
				}
				f2f19 = append(f2f19, f2f19elem)
			}
			f2.LicenseSpecifications = f2f19
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.MaintenanceOptions != nil {
			f2f20 := &svcapitypes.LaunchTemplateInstanceMaintenanceOptionsRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.MaintenanceOptions.AutoRecovery != "" {
				f2f20.AutoRecovery = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.MaintenanceOptions.AutoRecovery))
			}
			f2.MaintenanceOptions = f2f20
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions != nil {
			f2f21 := &svcapitypes.LaunchTemplateInstanceMetadataOptionsRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint != "" {
				f2f21.HTTPEndpoint = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint))
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpProtocolIpv6 != "" {
				f2f21.HTTPProtocolIPv6 = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpProtocolIpv6))
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit != nil {
				httpPutResponseHopLimitCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit)
				f2f21.HTTPPutResponseHopLimit = &httpPutResponseHopLimitCopy
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens != "" {
				f2f21.HTTPTokens = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens))
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.InstanceMetadataTags != "" {
				f2f21.InstanceMetadataTags = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.InstanceMetadataTags))
			}
			f2.MetadataOptions = f2f21
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.Monitoring != nil {
			f2f22 := &svcapitypes.LaunchTemplatesMonitoringRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled != nil {
				f2f22.Enabled = resp.LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled
			}
			f2.Monitoring = f2f22
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces != nil {
			f2f23 := []*svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
			for _, f2f23iter := range resp.LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces {
				f2f23elem := &svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
				if f2f23iter.AssociateCarrierIpAddress != nil {
					f2f23elem.AssociateCarrierIPAddress = f2f23iter.AssociateCarrierIpAddress
				}
				if f2f23iter.AssociatePublicIpAddress != nil {
					f2f23elem.AssociatePublicIPAddress = f2f23iter.AssociatePublicIpAddress
				}
				if f2f23iter.DeleteOnTermination != nil {
					f2f23elem.DeleteOnTermination = f2f23iter.DeleteOnTermination
				}
				if f2f23iter.Description != nil {
					f2f23elem.Description = f2f23iter.Description
				}
				if f2f23iter.DeviceIndex != nil {
					deviceIndexCopy := int64(*f2f23iter.DeviceIndex)
					f2f23elem.DeviceIndex = &deviceIndexCopy
				}
				if f2f23iter.Groups != nil {
					f2f23elem.Groups = aws.StringSlice(f2f23iter.Groups)
				}
				if f2f23iter.InterfaceType != nil {
					f2f23elem.InterfaceType = f2f23iter.InterfaceType
				}
				if f2f23iter.Ipv4PrefixCount != nil {
					ipv4PrefixCountCopy := int64(*f2f23iter.Ipv4PrefixCount)
					f2f23elem.IPv4PrefixCount = &ipv4PrefixCountCopy
				}
				if f2f23iter.Ipv4Prefixes != nil {
					f2f23elemf10 := []*svcapitypes.IPv4PrefixSpecificationRequest{}
					for _, f2f23elemf10iter := range f2f23iter.Ipv4Prefixes {
						f2f23elemf10elem := &svcapitypes.IPv4PrefixSpecificationRequest{}
						if f2f23elemf10iter.Ipv4Prefix != nil {
							f2f23elemf10elem.IPv4Prefix = f2f23elemf10iter.Ipv4Prefix
						}
						f2f23elemf10 = append(f2f23elemf10, f2f23elemf10elem)
					}
					f2f23elem.IPv4Prefixes = f2f23elemf10
				}
				if f2f23iter.Ipv6AddressCount != nil {
					ipv6AddressCountCopy := int64(*f2f23iter.Ipv6AddressCount)
					f2f23elem.IPv6AddressCount = &ipv6AddressCountCopy
				}
				if f2f23iter.Ipv6Addresses != nil {
					f2f23elemf12 := []*svcapitypes.InstanceIPv6AddressRequest{}
					for _, f2f23elemf12iter := range f2f23iter.Ipv6Addresses {
						f2f23elemf12elem := &svcapitypes.InstanceIPv6AddressRequest{}
						if f2f23elemf12iter.Ipv6Address != nil {
							f2f23elemf12elem.IPv6Address = f2f23elemf12iter.Ipv6Address
						}
						f2f23elemf12 = append(f2f23elemf12, f2f23elemf12elem)
					}
					f2f23elem.IPv6Addresses = f2f23elemf12
				}
				if f2f23iter.Ipv6PrefixCount != nil {
					ipv6PrefixCountCopy := int64(*f2f23iter.Ipv6PrefixCount)
					f2f23elem.IPv6PrefixCount = &ipv6PrefixCountCopy
				}
				if f2f23iter.Ipv6Prefixes != nil {
					f2f23elemf14 := []*svcapitypes.IPv6PrefixSpecificationRequest{}
					for _, f2f23elemf14iter := range f2f23iter.Ipv6Prefixes {
						f2f23elemf14elem := &svcapitypes.IPv6PrefixSpecificationRequest{}
						if f2f23elemf14iter.Ipv6Prefix != nil {
							f2f23elemf14elem.IPv6Prefix = f2f23elemf14iter.Ipv6Prefix
						}
						f2f23elemf14 = append(f2f23elemf14, f2f23elemf14elem)
					}
					f2f23elem.IPv6Prefixes = f2f23elemf14
				}
				if f2f23iter.NetworkCardIndex != nil {
					networkCardIndexCopy := int64(*f2f23iter.NetworkCardIndex)
					f2f23elem.NetworkCardIndex = &networkCardIndexCopy
				}
				if f2f23iter.NetworkInterfaceId != nil {
					f2f23elem.NetworkInterfaceID = f2f23iter.NetworkInterfaceId
				}
				if f2f23iter.PrimaryIpv6 != nil {
					f2f23elem.PrimaryIPv6 = f2f23iter.PrimaryIpv6
				}
				if f2f23iter.PrivateIpAddress != nil {
					f2f23elem.PrivateIPAddress = f2f23iter.PrivateIpAddress
				}
				if f2f23iter.PrivateIpAddresses != nil {
					f2f23elemf19 := []*svcapitypes.PrivateIPAddressSpecification{}
					for _, f2f23elemf19iter := range f2f23iter.PrivateIpAddresses {
						f2f23elemf19elem := &svcapitypes.PrivateIPAddressSpecification{}
						if f2f23elemf19iter.Primary != nil {
							f2f23elemf19elem.Primary = f2f23elemf19iter.Primary
						}
						if f2f23elemf19iter.PrivateIpAddress != nil {
							f2f23elemf19elem.PrivateIPAddress = f2f23elemf19iter.PrivateIpAddress
						}
						f2f23elemf19 = append(f2f23elemf19, f2f23elemf19elem)
					}
					f2f23elem.PrivateIPAddresses = f2f23elemf19
				}
				if f2f23iter.SecondaryPrivateIpAddressCount != nil {
					secondaryPrivateIPAddressCountCopy := int64(*f2f23iter.SecondaryPrivateIpAddressCount)
					f2f23elem.SecondaryPrivateIPAddressCount = &secondaryPrivateIPAddressCountCopy
				}
				if f2f23iter.SubnetId != nil {
					f2f23elem.SubnetID = f2f23iter.SubnetId
				}
				f2f23 = append(f2f23, f2f23elem)
			}
			f2.NetworkInterfaces = f2f23
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.Placement != nil {
			f2f25 := &svcapitypes.LaunchTemplatePlacementRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity != nil {
				f2f25.Affinity = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone != nil {
				f2f25.AvailabilityZone = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupId != nil {
				f2f25.GroupID = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupId
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName != nil {
				f2f25.GroupName = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostId != nil {
				f2f25.HostID = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostId
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn != nil {
				f2f25.HostResourceGroupARN = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber != nil {
				partitionNumberCopy := int64(*resp.LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber)
				f2f25.PartitionNumber = &partitionNumberCopy
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain != nil {
				f2f25.SpreadDomain = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy != "" {
				f2f25.Tenancy = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy))
			}
			f2.Placement = f2f25
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions != nil {
			f2f26 := &svcapitypes.LaunchTemplatePrivateDNSNameOptionsRequest{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.EnableResourceNameDnsAAAARecord != nil {
				f2f26.EnableResourceNameDNSAAAARecord = resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.EnableResourceNameDnsAAAARecord
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.EnableResourceNameDnsARecord != nil {
				f2f26.EnableResourceNameDNSARecord = resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.EnableResourceNameDnsARecord
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.HostnameType != "" {
				f2f26.HostnameType = aws.String(string(resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.HostnameType))
			}
			f2.PrivateDNSNameOptions = f2f26
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.RamDiskId != nil {
			f2.RAMDiskID = resp.LaunchTemplateVersion.LaunchTemplateData.RamDiskId
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds != nil {
			f2.SecurityGroupIDs = aws.StringSlice(resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds)
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroups != nil {
			f2.SecurityGroups = aws.StringSlice(resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroups)
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData.UserData != nil {
			f2.UserData = resp.LaunchTemplateVersion.LaunchTemplateData.UserData
		}
		ko.Spec.Data = f2
	} else {
		ko.Spec.Data = nil
	}
	if resp.LaunchTemplateVersion.LaunchTemplateId != nil {
		ko.Status.ID = resp.LaunchTemplateVersion.LaunchTemplateId
	} else {
		ko.Status.ID = nil
	}
	if resp.LaunchTemplateVersion.Operator != nil {
		f5 := &svcapitypes.OperatorResponse{}
		if resp.LaunchTemplateVersion.Operator.Managed != nil {
			f5.Managed = resp.LaunchTemplateVersion.Operator.Managed
		}
		if resp.LaunchTemplateVersion.Operator.Principal != nil {
			f5.Principal = resp.LaunchTemplateVersion.Operator.Principal
		}
		ko.Status.Operator = f5
	} else {
		ko.Status.Operator = nil
	}
	if resp.LaunchTemplateVersion.VersionDescription != nil {
		ko.Spec.VersionDescription = resp.LaunchTemplateVersion.VersionDescription
	} else {
		ko.Spec.VersionDescription = nil
	}
	if resp.LaunchTemplateVersion.VersionNumber != nil {
		ko.Status.LatestVersion = resp.LaunchTemplateVersion.VersionNumber
	} else {
		ko.Status.LatestVersion = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.CreateLaunchTemplateVersionInput, error) {
	res := &svcsdk.CreateLaunchTemplateVersionInput{}

	if r.ko.Spec.Data != nil {
		f2 := &svcsdktypes.RequestLaunchTemplateData{}
		if r.ko.Spec.Data.BlockDeviceMappings != nil {
			f2f0 := []svcsdktypes.LaunchTemplateBlockDeviceMappingRequest{}
			for _, f2f0iter := range r.ko.Spec.Data.BlockDeviceMappings {
				f2f0elem := &svcsdktypes.LaunchTemplateBlockDeviceMappingRequest{}
				if f2f0iter.DeviceName != nil {
					f2f0elem.DeviceName = f2f0iter.DeviceName
				}
				if f2f0iter.EBS != nil {
					f2f0elemf1 := &svcsdktypes.LaunchTemplateEbsBlockDeviceRequest{}
					if f2f0iter.EBS.DeleteOnTermination != nil {
						f2f0elemf1.DeleteOnTermination = f2f0iter.EBS.DeleteOnTermination
					}
					if f2f0iter.EBS.Encrypted != nil {
						f2f0elemf1.Encrypted = f2f0iter.EBS.Encrypted
					}
					if f2f0iter.EBS.IOPS != nil {
						iopsCopy0 := *f2f0iter.EBS.IOPS
						if iopsCopy0 > math.MaxInt32 || iopsCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field Iops is of type int32")
						}
						iopsCopy := int32(iopsCopy0)
						f2f0elemf1.Iops = &iopsCopy
					}
					if f2f0iter.EBS.KMSKeyID != nil {
						f2f0elemf1.KmsKeyId = f2f0iter.EBS.KMSKeyID
					}
					if f2f0iter.EBS.SnapshotID != nil {
						f2f0elemf1.SnapshotId = f2f0iter.EBS.SnapshotID
					}
					if f2f0iter.EBS.Throughput != nil {
						throughputCopy0 := *f2f0iter.EBS.Throughput
						if throughputCopy0 > math.MaxInt32 || throughputCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field Throughput is of type int32")
						}
						throughputCopy := int32(throughputCopy0)
						f2f0elemf1.Throughput = &throughputCopy
					}
					if f2f0iter.EBS.VolumeSize != nil {
						volumeSizeCopy0 := *f2f0iter.EBS.VolumeSize
						if volumeSizeCopy0 > math.MaxInt32 || volumeSizeCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field VolumeSize is of type int32")
						}
						volumeSizeCopy := int32(volumeSizeCopy0)
						f2f0elemf1.VolumeSize = &volumeSizeCopy
					}
					if f2f0iter.EBS.VolumeType != nil {
						f2f0elemf1.VolumeType = svcsdktypes.VolumeType(*f2f0iter.EBS.VolumeType)
					}
					f2f0elem.Ebs = f2f0elemf1
				}
				if f2f0iter.NoDevice != nil {
					f2f0elem.NoDevice = f2f0iter.NoDevice
				}
				if f2f0iter.VirtualName != nil {
					f2f0elem.VirtualName = f2f0iter.VirtualName
				}
				f2f0 = append(f2f0, *f2f0elem)
			}
			f2.BlockDeviceMappings = f2f0
		}
		if r.ko.Spec.Data.CapacityReservationSpecification != nil {
			f2f1 := &svcsdktypes.LaunchTemplateCapacityReservationSpecificationRequest{}
			if r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationPreference != nil {
				f2f1.CapacityReservationPreference = svcsdktypes.CapacityReservationPreference(*r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationPreference)
			}
			if r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationTarget != nil {
				f2f1f1 := &svcsdktypes.CapacityReservationTarget{}
				if r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID != nil {
					f2f1f1.CapacityReservationId = r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID
				}
				if r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN != nil {
					f2f1f1.CapacityReservationResourceGroupArn = r.ko.Spec.Data.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN
				}
				f2f1.CapacityReservationTarget = f2f1f1
			}
			f2.CapacityReservationSpecification = f2f1
		}
		if r.ko.Spec.Data.CPUOptions != nil {
			f2f2 := &svcsdktypes.LaunchTemplateCpuOptionsRequest{}
			if r.ko.Spec.Data.CPUOptions.AmdSevSnp != nil {
				f2f2.AmdSevSnp = svcsdktypes.AmdSevSnpSpecification(*r.ko.Spec.Data.CPUOptions.AmdSevSnp)
			}
			if r.ko.Spec.Data.CPUOptions.CoreCount != nil {
				coreCountCopy0 := *r.ko.Spec.Data.CPUOptions.CoreCount
				if coreCountCopy0 > math.MaxInt32 || coreCountCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field CoreCount is of type int32")
				}
				coreCountCopy := int32(coreCountCopy0)
				f2f2.CoreCount = &coreCountCopy
			}
			if r.ko.Spec.Data.CPUOptions.ThreadsPerCore != nil {
				threadsPerCoreCopy0 := *r.ko.Spec.Data.CPUOptions.ThreadsPerCore
				if threadsPerCoreCopy0 > math.MaxInt32 || threadsPerCoreCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ThreadsPerCore is of type int32")
				}
				threadsPerCoreCopy := int32(threadsPerCoreCopy0)
				f2f2.ThreadsPerCore = &threadsPerCoreCopy
			}
			f2.CpuOptions = f2f2
		}
		if r.ko.Spec.Data.CreditSpecification != nil {
			f2f3 := &svcsdktypes.CreditSpecificationRequest{}
			if r.ko.Spec.Data.CreditSpecification.CPUCredits != nil {
				f2f3.CpuCredits = r.ko.Spec.Data.CreditSpecification.CPUCredits
			}
			f2.CreditSpecification = f2f3
		}
		if r.ko.Spec.Data.DisableAPIStop != nil {
			f2.DisableApiStop = r.ko.Spec.Data.DisableAPIStop
		}
		if r.ko.Spec.Data.DisableAPITermination != nil {
			f2.DisableApiTermination = r.ko.Spec.Data.DisableAPITermination
		}
		if r.ko.Spec.Data.EBSOptimized != nil {
			f2.EbsOptimized = r.ko.Spec.Data.EBSOptimized
		}
		if r.ko.Spec.Data.ElasticGPUSpecifications != nil {
			f2f7 := []svcsdktypes.ElasticGpuSpecification{}
			for _, f2f7iter := range r.ko.Spec.Data.ElasticGPUSpecifications {
				f2f7elem := &svcsdktypes.ElasticGpuSpecification{}
				if f2f7iter.Type != nil {
					f2f7elem.Type = f2f7iter.Type
				}
				f2f7 = append(f2f7, *f2f7elem)
			}
			f2.ElasticGpuSpecifications = f2f7
		}
		if r.ko.Spec.Data.ElasticInferenceAccelerators != nil {
			f2f8 := []svcsdktypes.LaunchTemplateElasticInferenceAccelerator{}
			for _, f2f8iter := range r.ko.Spec.Data.ElasticInferenceAccelerators {
				f2f8elem := &svcsdktypes.LaunchTemplateElasticInferenceAccelerator{}
				if f2f8iter.Count != nil {
					countCopy0 := *f2f8iter.Count
					if countCopy0 > math.MaxInt32 || countCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Count is of type int32")
					}
					countCopy := int32(countCopy0)
					f2f8elem.Count = &countCopy
				}
				if f2f8iter.Type != nil {
					f2f8elem.Type = f2f8iter.Type
				}
				f2f8 = append(f2f8, *f2f8elem)
			}
			f2.ElasticInferenceAccelerators = f2f8
		}
		if r.ko.Spec.Data.EnclaveOptions != nil {
			f2f9 := &svcsdktypes.LaunchTemplateEnclaveOptionsRequest{}
			if r.ko.Spec.Data.EnclaveOptions.Enabled != nil {
				f2f9.Enabled = r.ko.Spec.Data.EnclaveOptions.Enabled
			}
			f2.EnclaveOptions = f2f9
		}
		if r.ko.Spec.Data.HibernationOptions != nil {
			f2f10 := &svcsdktypes.LaunchTemplateHibernationOptionsRequest{}
			if r.ko.Spec.Data.HibernationOptions.Configured != nil {
				f2f10.Configured = r.ko.Spec.Data.HibernationOptions.Configured
			}
			f2.HibernationOptions = f2f10
		}
		if r.ko.Spec.Data.IAMInstanceProfile != nil {
			f2f11 := &svcsdktypes.LaunchTemplateIamInstanceProfileSpecificationRequest{}
			if r.ko.Spec.Data.IAMInstanceProfile.ARN != nil {
				f2f11.Arn = r.ko.Spec.Data.IAMInstanceProfile.ARN
			}
			if r.ko.Spec.Data.IAMInstanceProfile.Name != nil {
				f2f11.Name = r.ko.Spec.Data.IAMInstanceProfile.Name
			}
			f2.IamInstanceProfile = f2f11
		}
		if r.ko.Spec.Data.ImageID != nil {
			f2.ImageId = r.ko.Spec.Data.ImageID
		}
		if r.ko.Spec.Data.InstanceInitiatedShutdownBehavior != nil {
			f2.InstanceInitiatedShutdownBehavior = svcsdktypes.ShutdownBehavior(*r.ko.Spec.Data.InstanceInitiatedShutdownBehavior)
		}
		if r.ko.Spec.Data.InstanceMarketOptions != nil {
			f2f14 := &svcsdktypes.LaunchTemplateInstanceMarketOptionsRequest{}
			if r.ko.Spec.Data.InstanceMarketOptions.MarketType != nil {
				f2f14.MarketType = svcsdktypes.MarketType(*r.ko.Spec.Data.InstanceMarketOptions.MarketType)
			}
			if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions != nil {
				f2f14f1 := &svcsdktypes.LaunchTemplateSpotMarketOptionsRequest{}
				if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
					blockDurationMinutesCopy0 := *r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.BlockDurationMinutes
					if blockDurationMinutesCopy0 > math.MaxInt32 || blockDurationMinutesCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field BlockDurationMinutes is of type int32")
					}
					blockDurationMinutesCopy := int32(blockDurationMinutesCopy0)
					f2f14f1.BlockDurationMinutes = &blockDurationMinutesCopy
				}
				if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != nil {
					f2f14f1.InstanceInterruptionBehavior = svcsdktypes.InstanceInterruptionBehavior(*r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior)
				}
				if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
					f2f14f1.MaxPrice = r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.MaxPrice
				}
				if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.SpotInstanceType != nil {
					f2f14f1.SpotInstanceType = svcsdktypes.SpotInstanceType(*r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.SpotInstanceType)
				}
				if r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
					f2f14f1.ValidUntil = &r.ko.Spec.Data.InstanceMarketOptions.SpotOptions.ValidUntil.Time
				}
				f2f14.SpotOptions = f2f14f1
			}
			f2.InstanceMarketOptions = f2f14
		}
		if r.ko.Spec.Data.InstanceRequirements != nil {
			f2f15 := &svcsdktypes.InstanceRequirementsRequest{}
			if r.ko.Spec.Data.InstanceRequirements.AcceleratorCount != nil {
				f2f15f0 := &svcsdktypes.AcceleratorCountRequest{}
				if r.ko.Spec.Data.InstanceRequirements.AcceleratorCount.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.AcceleratorCount.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f2f15f0.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.AcceleratorCount.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.AcceleratorCount.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f2f15f0.Min = &minCopy
				}
				f2f15.AcceleratorCount = f2f15f0
			}
			if r.ko.Spec.Data.InstanceRequirements.AcceleratorManufacturers != nil {
				f2f15f1 := []svcsdktypes.AcceleratorManufacturer{}
				for _, f2f15f1iter := range r.ko.Spec.Data.InstanceRequirements.AcceleratorManufacturers {
					var f2f15f1elem string
					f2f15f1elem = string(*f2f15f1iter)
					f2f15f1 = append(f2f15f1, svcsdktypes.AcceleratorManufacturer(f2f15f1elem))
				}
				f2f15.AcceleratorManufacturers = f2f15f1
			}
			if r.ko.Spec.Data.InstanceRequirements.AcceleratorNames != nil {
				f2f15f2 := []svcsdktypes.AcceleratorName{}
				for _, f2f15f2iter := range r.ko.Spec.Data.InstanceRequirements.AcceleratorNames {
					var f2f15f2elem string
					f2f15f2elem = string(*f2f15f2iter)
					f2f15f2 = append(f2f15f2, svcsdktypes.AcceleratorName(f2f15f2elem))
				}
				f2f15.AcceleratorNames = f2f15f2
			}
			if r.ko.Spec.Data.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
				f2f15f3 := &svcsdktypes.AcceleratorTotalMemoryMiBRequest{}
				if r.ko.Spec.Data.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.AcceleratorTotalMemoryMiB.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f2f15f3.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.AcceleratorTotalMemoryMiB.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f2f15f3.Min = &minCopy
				}
				f2f15.AcceleratorTotalMemoryMiB = f2f15f3
			}
			if r.ko.Spec.Data.InstanceRequirements.AcceleratorTypes != nil {
				f2f15f4 := []svcsdktypes.AcceleratorType{}
				for _, f2f15f4iter := range r.ko.Spec.Data.InstanceRequirements.AcceleratorTypes {
					var f2f15f4elem string
					f2f15f4elem = string(*f2f15f4iter)
					f2f15f4 = append(f2f15f4, svcsdktypes.AcceleratorType(f2f15f4elem))
				}
				f2f15.AcceleratorTypes = f2f15f4
			}
			if r.ko.Spec.Data.InstanceRequirements.AllowedInstanceTypes != nil {
				f2f15.AllowedInstanceTypes = aws.ToStringSlice(r.ko.Spec.Data.InstanceRequirements.AllowedInstanceTypes)
			}
			if r.ko.Spec.Data.InstanceRequirements.BareMetal != nil {
				f2f15.BareMetal = svcsdktypes.BareMetal(*r.ko.Spec.Data.InstanceRequirements.BareMetal)
			}
			if r.ko.Spec.Data.InstanceRequirements.BaselineEBSBandwidthMbps != nil {
				f2f15f7 := &svcsdktypes.BaselineEbsBandwidthMbpsRequest{}
				if r.ko.Spec.Data.InstanceRequirements.BaselineEBSBandwidthMbps.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.BaselineEBSBandwidthMbps.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f2f15f7.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.BaselineEBSBandwidthMbps.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.BaselineEBSBandwidthMbps.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f2f15f7.Min = &minCopy
				}
				f2f15.BaselineEbsBandwidthMbps = f2f15f7
			}
			if r.ko.Spec.Data.InstanceRequirements.BaselinePerformanceFactors != nil {
				f2f15f8 := &svcsdktypes.BaselinePerformanceFactorsRequest{}
				if r.ko.Spec.Data.InstanceRequirements.BaselinePerformanceFactors.CPU != nil {
					f2f15f8f0 := &svcsdktypes.CpuPerformanceFactorRequest{}
					if r.ko.Spec.Data.InstanceRequirements.BaselinePerformanceFactors.CPU.References != nil {
						f2f15f8f0f0 := []svcsdktypes.PerformanceFactorReferenceRequest{}
						for _, f2f15f8f0f0iter := range r.ko.Spec.Data.InstanceRequirements.BaselinePerformanceFactors.CPU.References {
							f2f15f8f0f0elem := &svcsdktypes.PerformanceFactorReferenceRequest{}
							if f2f15f8f0f0iter.InstanceFamily != nil {
								f2f15f8f0f0elem.InstanceFamily = f2f15f8f0f0iter.InstanceFamily
							}
							f2f15f8f0f0 = append(f2f15f8f0f0, *f2f15f8f0f0elem)
						}
						f2f15f8f0.References = f2f15f8f0f0
					}
					f2f15f8.Cpu = f2f15f8f0
				}
				f2f15.BaselinePerformanceFactors = f2f15f8
			}
			if r.ko.Spec.Data.InstanceRequirements.BurstablePerformance != nil {
				f2f15.BurstablePerformance = svcsdktypes.BurstablePerformance(*r.ko.Spec.Data.InstanceRequirements.BurstablePerformance)
			}
			if r.ko.Spec.Data.InstanceRequirements.CPUManufacturers != nil {
				f2f15f10 := []svcsdktypes.CpuManufacturer{}
				for _, f2f15f10iter := range r.ko.Spec.Data.InstanceRequirements.CPUManufacturers {
					var f2f15f10elem string
					f2f15f10elem = string(*f2f15f10iter)
					f2f15f10 = append(f2f15f10, svcsdktypes.CpuManufacturer(f2f15f10elem))
				}
				f2f15.CpuManufacturers = f2f15f10
			}
			if r.ko.Spec.Data.InstanceRequirements.ExcludedInstanceTypes != nil {
				f2f15.ExcludedInstanceTypes = aws.ToStringSlice(r.ko.Spec.Data.InstanceRequirements.ExcludedInstanceTypes)
			}
			if r.ko.Spec.Data.InstanceRequirements.InstanceGenerations != nil {
				f2f15f12 := []svcsdktypes.InstanceGeneration{}
				for _, f2f15f12iter := range r.ko.Spec.Data.InstanceRequirements.InstanceGenerations {
					var f2f15f12elem string
					f2f15f12elem = string(*f2f15f12iter)
					f2f15f12 = append(f2f15f12, svcsdktypes.InstanceGeneration(f2f15f12elem))
				}
				f2f15.InstanceGenerations = f2f15f12
			}
			if r.ko.Spec.Data.InstanceRequirements.LocalStorage != nil {
				f2f15.LocalStorage = svcsdktypes.LocalStorage(*r.ko.Spec.Data.InstanceRequirements.LocalStorage)
			}
			if r.ko.Spec.Data.InstanceRequirements.LocalStorageTypes != nil {
				f2f15f14 := []svcsdktypes.LocalStorageType{}
				for _, f2f15f14iter := range r.ko.Spec.Data.InstanceRequirements.LocalStorageTypes {
					var f2f15f14elem string
					f2f15f14elem = string(*f2f15f14iter)
					f2f15f14 = append(f2f15f14, svcsdktypes.LocalStorageType(f2f15f14elem))
				}
				f2f15.LocalStorageTypes = f2f15f14
			}
			if r.ko.Spec.Data.InstanceRequirements.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice != nil {
				maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy0 := *r.ko.Spec.Data.InstanceRequirements.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice
				if maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy0 > math.MaxInt32 || maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaxSpotPriceAsPercentageOfOptimalOnDemandPrice is of type int32")
				}
				maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy := int32(maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy0)
				f2f15.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice = &maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy
			}
			if r.ko.Spec.Data.InstanceRequirements.MemoryGiBPerVCPU != nil {
				f2f15f16 := &svcsdktypes.MemoryGiBPerVCpuRequest{}
				if r.ko.Spec.Data.InstanceRequirements.MemoryGiBPerVCPU.Max != nil {
					f2f15f16.Max = r.ko.Spec.Data.InstanceRequirements.MemoryGiBPerVCPU.Max
				}
				if r.ko.Spec.Data.InstanceRequirements.MemoryGiBPerVCPU.Min != nil {
					f2f15f16.Min = r.ko.Spec.Data.InstanceRequirements.MemoryGiBPerVCPU.Min
				}
				f2f15.MemoryGiBPerVCpu = f2f15f16
			}
			if r.ko.Spec.Data.InstanceRequirements.MemoryMiB != nil {
				f2f15f17 := &svcsdktypes.MemoryMiBRequest{}
				if r.ko.Spec.Data.InstanceRequirements.MemoryMiB.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.MemoryMiB.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f2f15f17.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.MemoryMiB.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.MemoryMiB.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f2f15f17.Min = &minCopy
				}
				f2f15.MemoryMiB = f2f15f17
			}
			if r.ko.Spec.Data.InstanceRequirements.NetworkBandwidthGbps != nil {
				f2f15f18 := &svcsdktypes.NetworkBandwidthGbpsRequest{}
				if r.ko.Spec.Data.InstanceRequirements.NetworkBandwidthGbps.Max != nil {
					f2f15f18.Max = r.ko.Spec.Data.InstanceRequirements.NetworkBandwidthGbps.Max
				}
				if r.ko.Spec.Data.InstanceRequirements.NetworkBandwidthGbps.Min != nil {
					f2f15f18.Min = r.ko.Spec.Data.InstanceRequirements.NetworkBandwidthGbps.Min
				}
				f2f15.NetworkBandwidthGbps = f2f15f18
			}
			if r.ko.Spec.Data.InstanceRequirements.NetworkInterfaceCount != nil {
				f2f15f19 := &svcsdktypes.NetworkInterfaceCountRequest{}
				if r.ko.Spec.Data.InstanceRequirements.NetworkInterfaceCount.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.NetworkInterfaceCount.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f2f15f19.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.NetworkInterfaceCount.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.NetworkInterfaceCount.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f2f15f19.Min = &minCopy
				}
				f2f15.NetworkInterfaceCount = f2f15f19
			}
			if r.ko.Spec.Data.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
				onDemandMaxPricePercentageOverLowestPriceCopy0 := *r.ko.Spec.Data.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice
				if onDemandMaxPricePercentageOverLowestPriceCopy0 > math.MaxInt32 || onDemandMaxPricePercentageOverLowestPriceCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field OnDemandMaxPricePercentageOverLowestPrice is of type int32")
				}
				onDemandMaxPricePercentageOverLowestPriceCopy := int32(onDemandMaxPricePercentageOverLowestPriceCopy0)
				f2f15.OnDemandMaxPricePercentageOverLowestPrice = &onDemandMaxPricePercentageOverLowestPriceCopy
			}
			if r.ko.Spec.Data.InstanceRequirements.RequireHibernateSupport != nil {
				f2f15.RequireHibernateSupport = r.ko.Spec.Data.InstanceRequirements.RequireHibernateSupport
			}
			if r.ko.Spec.Data.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
				spotMaxPricePercentageOverLowestPriceCopy0 := *r.ko.Spec.Data.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice
				if spotMaxPricePercentageOverLowestPriceCopy0 > math.MaxInt32 || spotMaxPricePercentageOverLowestPriceCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field SpotMaxPricePercentageOverLowestPrice is of type int32")
				}
				spotMaxPricePercentageOverLowestPriceCopy := int32(spotMaxPricePercentageOverLowestPriceCopy0)
				f2f15.SpotMaxPricePercentageOverLowestPrice = &spotMaxPricePercentageOverLowestPriceCopy
			}
			if r.ko.Spec.Data.InstanceRequirements.TotalLocalStorageGB != nil {
				f2f15f23 := &svcsdktypes.TotalLocalStorageGBRequest{}
				if r.ko.Spec.Data.InstanceRequirements.TotalLocalStorageGB.Max != nil {
					f2f15f23.Max = r.ko.Spec.Data.InstanceRequirements.TotalLocalStorageGB.Max
				}
				if r.ko.Spec.Data.InstanceRequirements.TotalLocalStorageGB.Min != nil {
					f2f15f23.Min = r.ko.Spec.Data.InstanceRequirements.TotalLocalStorageGB.Min
				}
				f2f15.TotalLocalStorageGB = f2f15f23
			}
			if r.ko.Spec.Data.InstanceRequirements.VCPUCount != nil {
				f2f15f24 := &svcsdktypes.VCpuCountRangeRequest{}
				if r.ko.Spec.Data.InstanceRequirements.VCPUCount.Max != nil {
					maxCopy0 := *r.ko.Spec.Data.InstanceRequirements.VCPUCount.Max
					if maxCopy0 > math.MaxInt32 || maxCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Max is of type int32")
					}
					maxCopy := int32(maxCopy0)
					f2f15f24.Max = &maxCopy
				}
				if r.ko.Spec.Data.InstanceRequirements.VCPUCount.Min != nil {
					minCopy0 := *r.ko.Spec.Data.InstanceRequirements.VCPUCount.Min
					if minCopy0 > math.MaxInt32 || minCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Min is of type int32")
					}
					minCopy := int32(minCopy0)
					f2f15f24.Min = &minCopy
				}
				f2f15.VCpuCount = f2f15f24
			}
			f2.InstanceRequirements = f2f15
		}
		if r.ko.Spec.Data.InstanceType != nil {
			f2.InstanceType = svcsdktypes.InstanceType(*r.ko.Spec.Data.InstanceType)
		}
		if r.ko.Spec.Data.KernelID != nil {
			f2.KernelId = r.ko.Spec.Data.KernelID
		}
		if r.ko.Spec.Data.KeyName != nil {
			f2.KeyName = r.ko.Spec.Data.KeyName
		}
		if r.ko.Spec.Data.LicenseSpecifications != nil {
			f2f19 := []svcsdktypes.LaunchTemplateLicenseConfigurationRequest{}
			for _, f2f19iter := range r.ko.Spec.Data.LicenseSpecifications {
				f2f19elem := &svcsdktypes.LaunchTemplateLicenseConfigurationRequest{}
				if f2f19iter.LicenseConfigurationARN != nil {
					f2f19elem.LicenseConfigurationArn = f2f19iter.LicenseConfigurationARN
				}
				f2f19 = append(f2f19, *f2f19elem)
			}
			f2.LicenseSpecifications = f2f19
		}
		if r.ko.Spec.Data.MaintenanceOptions != nil {
			f2f20 := &svcsdktypes.LaunchTemplateInstanceMaintenanceOptionsRequest{}
			if r.ko.Spec.Data.MaintenanceOptions.AutoRecovery != nil {
				f2f20.AutoRecovery = svcsdktypes.LaunchTemplateAutoRecoveryState(*r.ko.Spec.Data.MaintenanceOptions.AutoRecovery)
			}
			f2.MaintenanceOptions = f2f20
		}
		if r.ko.Spec.Data.MetadataOptions != nil {
			f2f21 := &svcsdktypes.LaunchTemplateInstanceMetadataOptionsRequest{}
			if r.ko.Spec.Data.MetadataOptions.HTTPEndpoint != nil {
				f2f21.HttpEndpoint = svcsdktypes.LaunchTemplateInstanceMetadataEndpointState(*r.ko.Spec.Data.MetadataOptions.HTTPEndpoint)
			}
			if r.ko.Spec.Data.MetadataOptions.HTTPProtocolIPv6 != nil {
				f2f21.HttpProtocolIpv6 = svcsdktypes.LaunchTemplateInstanceMetadataProtocolIpv6(*r.ko.Spec.Data.MetadataOptions.HTTPProtocolIPv6)
			}
			if r.ko.Spec.Data.MetadataOptions.HTTPPutResponseHopLimit != nil {
				httpPutResponseHopLimitCopy0 := *r.ko.Spec.Data.MetadataOptions.HTTPPutResponseHopLimit
				if httpPutResponseHopLimitCopy0 > math.MaxInt32 || httpPutResponseHopLimitCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field HttpPutResponseHopLimit is of type int32")
				}
				httpPutResponseHopLimitCopy := int32(httpPutResponseHopLimitCopy0)
				f2f21.HttpPutResponseHopLimit = &httpPutResponseHopLimitCopy
			}
			if r.ko.Spec.Data.MetadataOptions.HTTPTokens != nil {
				f2f21.HttpTokens = svcsdktypes.LaunchTemplateHttpTokensState(*r.ko.Spec.Data.MetadataOptions.HTTPTokens)
			}
			if r.ko.Spec.Data.MetadataOptions.InstanceMetadataTags != nil {
				f2f21.InstanceMetadataTags = svcsdktypes.LaunchTemplateInstanceMetadataTagsState(*r.ko.Spec.Data.MetadataOptions.InstanceMetadataTags)
			}
			f2.MetadataOptions = f2f21
		}
		if r.ko.Spec.Data.Monitoring != nil {
			f2f22 := &svcsdktypes.LaunchTemplatesMonitoringRequest{}
			if r.ko.Spec.Data.Monitoring.Enabled != nil {
				f2f22.Enabled = r.ko.Spec.Data.Monitoring.Enabled
			}
			f2.Monitoring = f2f22
		}
		if r.ko.Spec.Data.NetworkInterfaces != nil {
			f2f23 := []svcsdktypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
			for _, f2f23iter := range r.ko.Spec.Data.NetworkInterfaces {
				f2f23elem := &svcsdktypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
				if f2f23iter.AssociateCarrierIPAddress != nil {
					f2f23elem.AssociateCarrierIpAddress = f2f23iter.AssociateCarrierIPAddress
				}
				if f2f23iter.AssociatePublicIPAddress != nil {
					f2f23elem.AssociatePublicIpAddress = f2f23iter.AssociatePublicIPAddress
				}
				if f2f23iter.DeleteOnTermination != nil {
					f2f23elem.DeleteOnTermination = f2f23iter.DeleteOnTermination
				}
				if f2f23iter.Description != nil {
					f2f23elem.Description = f2f23iter.Description
				}
				if f2f23iter.DeviceIndex != nil {
					deviceIndexCopy0 := *f2f23iter.DeviceIndex
					if deviceIndexCopy0 > math.MaxInt32 || deviceIndexCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field DeviceIndex is of type int32")
					}
					deviceIndexCopy := int32(deviceIndexCopy0)
					f2f23elem.DeviceIndex = &deviceIndexCopy
				}
				if f2f23iter.Groups != nil {
					f2f23elem.Groups = aws.ToStringSlice(f2f23iter.Groups)
				}
				if f2f23iter.InterfaceType != nil {
					f2f23elem.InterfaceType = f2f23iter.InterfaceType
				}
				if f2f23iter.IPv4PrefixCount != nil {
					ipv4PrefixCountCopy0 := *f2f23iter.IPv4PrefixCount
					if ipv4PrefixCountCopy0 > math.MaxInt32 || ipv4PrefixCountCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Ipv4PrefixCount is of type int32")
					}
					ipv4PrefixCountCopy := int32(ipv4PrefixCountCopy0)
					f2f23elem.Ipv4PrefixCount = &ipv4PrefixCountCopy
				}
				if f2f23iter.IPv4Prefixes != nil {
					f2f23elemf8 := []svcsdktypes.Ipv4PrefixSpecificationRequest{}
					for _, f2f23elemf8iter := range f2f23iter.IPv4Prefixes {
						f2f23elemf8elem := &svcsdktypes.Ipv4PrefixSpecificationRequest{}
						if f2f23elemf8iter.IPv4Prefix != nil {
							f2f23elemf8elem.Ipv4Prefix = f2f23elemf8iter.IPv4Prefix
						}
						f2f23elemf8 = append(f2f23elemf8, *f2f23elemf8elem)
					}
					f2f23elem.Ipv4Prefixes = f2f23elemf8
				}
				if f2f23iter.IPv6AddressCount != nil {
					ipv6AddressCountCopy0 := *f2f23iter.IPv6AddressCount
					if ipv6AddressCountCopy0 > math.MaxInt32 || ipv6AddressCountCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Ipv6AddressCount is of type int32")
					}
					ipv6AddressCountCopy := int32(ipv6AddressCountCopy0)
					f2f23elem.Ipv6AddressCount = &ipv6AddressCountCopy
				}
				if f2f23iter.IPv6Addresses != nil {
					f2f23elemf10 := []svcsdktypes.InstanceIpv6AddressRequest{}
					for _, f2f23elemf10iter := range f2f23iter.IPv6Addresses {
						f2f23elemf10elem := &svcsdktypes.InstanceIpv6AddressRequest{}
						if f2f23elemf10iter.IPv6Address != nil {
							f2f23elemf10elem.Ipv6Address = f2f23elemf10iter.IPv6Address
						}
						f2f23elemf10 = append(f2f23elemf10, *f2f23elemf10elem)
					}
					f2f23elem.Ipv6Addresses = f2f23elemf10
				}
				if f2f23iter.IPv6PrefixCount != nil {
					ipv6PrefixCountCopy0 := *f2f23iter.IPv6PrefixCount
					if ipv6PrefixCountCopy0 > math.MaxInt32 || ipv6PrefixCountCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Ipv6PrefixCount is of type int32")
					}
					ipv6PrefixCountCopy := int32(ipv6PrefixCountCopy0)
					f2f23elem.Ipv6PrefixCount = &ipv6PrefixCountCopy
				}
				if f2f23iter.IPv6Prefixes != nil {
					f2f23elemf12 := []svcsdktypes.Ipv6PrefixSpecificationRequest{}
					for _, f2f23elemf12iter := range f2f23iter.IPv6Prefixes {
						f2f23elemf12elem := &svcsdktypes.Ipv6PrefixSpecificationRequest{}
						if f2f23elemf12iter.IPv6Prefix != nil {
							f2f23elemf12elem.Ipv6Prefix = f2f23elemf12iter.IPv6Prefix
						}
						f2f23elemf12 = append(f2f23elemf12, *f2f23elemf12elem)
					}
					f2f23elem.Ipv6Prefixes = f2f23elemf12
				}
				if f2f23iter.NetworkCardIndex != nil {
					networkCardIndexCopy0 := *f2f23iter.NetworkCardIndex
					if networkCardIndexCopy0 > math.MaxInt32 || networkCardIndexCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field NetworkCardIndex is of type int32")
					}
					networkCardIndexCopy := int32(networkCardIndexCopy0)
					f2f23elem.NetworkCardIndex = &networkCardIndexCopy
				}
				if f2f23iter.NetworkInterfaceID != nil {
					f2f23elem.NetworkInterfaceId = f2f23iter.NetworkInterfaceID
				}
				if f2f23iter.PrimaryIPv6 != nil {
					f2f23elem.PrimaryIpv6 = f2f23iter.PrimaryIPv6
				}
				if f2f23iter.PrivateIPAddress != nil {
					f2f23elem.PrivateIpAddress = f2f23iter.PrivateIPAddress
				}
				if f2f23iter.PrivateIPAddresses != nil {
					f2f23elemf17 := []svcsdktypes.PrivateIpAddressSpecification{}
					for _, f2f23elemf17iter := range f2f23iter.PrivateIPAddresses {
						f2f23elemf17elem := &svcsdktypes.PrivateIpAddressSpecification{}
						if f2f23elemf17iter.Primary != nil {
							f2f23elemf17elem.Primary = f2f23elemf17iter.Primary
						}
						if f2f23elemf17iter.PrivateIPAddress != nil {
							f2f23elemf17elem.PrivateIpAddress = f2f23elemf17iter.PrivateIPAddress
						}
						f2f23elemf17 = append(f2f23elemf17, *f2f23elemf17elem)
					}
					f2f23elem.PrivateIpAddresses = f2f23elemf17
				}
				if f2f23iter.SecondaryPrivateIPAddressCount != nil {
					secondaryPrivateIPAddressCountCopy0 := *f2f23iter.SecondaryPrivateIPAddressCount
					if secondaryPrivateIPAddressCountCopy0 > math.MaxInt32 || secondaryPrivateIPAddressCountCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field SecondaryPrivateIpAddressCount is of type int32")
					}
					secondaryPrivateIPAddressCountCopy := int32(secondaryPrivateIPAddressCountCopy0)
					f2f23elem.SecondaryPrivateIpAddressCount = &secondaryPrivateIPAddressCountCopy
				}
				if f2f23iter.SubnetID != nil {
					f2f23elem.SubnetId = f2f23iter.SubnetID
				}
				f2f23 = append(f2f23, *f2f23elem)
			}
			f2.NetworkInterfaces = f2f23
		}
		if r.ko.Spec.Data.Placement != nil {
			f2f24 := &svcsdktypes.LaunchTemplatePlacementRequest{}
			if r.ko.Spec.Data.Placement.Affinity != nil {
				f2f24.Affinity = r.ko.Spec.Data.Placement.Affinity
			}
			if r.ko.Spec.Data.Placement.AvailabilityZone != nil {
				f2f24.AvailabilityZone = r.ko.Spec.Data.Placement.AvailabilityZone
			}
			if r.ko.Spec.Data.Placement.GroupID != nil {
				f2f24.GroupId = r.ko.Spec.Data.Placement.GroupID
			}
			if r.ko.Spec.Data.Placement.GroupName != nil {
				f2f24.GroupName = r.ko.Spec.Data.Placement.GroupName
			}
			if r.ko.Spec.Data.Placement.HostID != nil {
				f2f24.HostId = r.ko.Spec.Data.Placement.HostID
			}
			if r.ko.Spec.Data.Placement.HostResourceGroupARN != nil {
				f2f24.HostResourceGroupArn = r.ko.Spec.Data.Placement.HostResourceGroupARN
			}
			if r.ko.Spec.Data.Placement.PartitionNumber != nil {
				partitionNumberCopy0 := *r.ko.Spec.Data.Placement.PartitionNumber
				if partitionNumberCopy0 > math.MaxInt32 || partitionNumberCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field PartitionNumber is of type int32")
				}
				partitionNumberCopy := int32(partitionNumberCopy0)
				f2f24.PartitionNumber = &partitionNumberCopy
			}
			if r.ko.Spec.Data.Placement.SpreadDomain != nil {
				f2f24.SpreadDomain = r.ko.Spec.Data.Placement.SpreadDomain
			}
			if r.ko.Spec.Data.Placement.Tenancy != nil {
				f2f24.Tenancy = svcsdktypes.Tenancy(*r.ko.Spec.Data.Placement.Tenancy)
			}
			f2.Placement = f2f24
		}
		if r.ko.Spec.Data.PrivateDNSNameOptions != nil {
			f2f25 := &svcsdktypes.LaunchTemplatePrivateDnsNameOptionsRequest{}
			if r.ko.Spec.Data.PrivateDNSNameOptions.EnableResourceNameDNSAAAARecord != nil {
				f2f25.EnableResourceNameDnsAAAARecord = r.ko.Spec.Data.PrivateDNSNameOptions.EnableResourceNameDNSAAAARecord
			}
			if r.ko.Spec.Data.PrivateDNSNameOptions.EnableResourceNameDNSARecord != nil {
				f2f25.EnableResourceNameDnsARecord = r.ko.Spec.Data.PrivateDNSNameOptions.EnableResourceNameDNSARecord
			}
			if r.ko.Spec.Data.PrivateDNSNameOptions.HostnameType != nil {
				f2f25.HostnameType = svcsdktypes.HostnameType(*r.ko.Spec.Data.PrivateDNSNameOptions.HostnameType)
			}
			f2.PrivateDnsNameOptions = f2f25
		}
		if r.ko.Spec.Data.RAMDiskID != nil {
			f2.RamDiskId = r.ko.Spec.Data.RAMDiskID
		}
		if r.ko.Spec.Data.SecurityGroupIDs != nil {
			f2.SecurityGroupIds = aws.ToStringSlice(r.ko.Spec.Data.SecurityGroupIDs)
		}
		if r.ko.Spec.Data.SecurityGroups != nil {
			f2.SecurityGroups = aws.ToStringSlice(r.ko.Spec.Data.SecurityGroups)
		}
		if r.ko.Spec.Data.UserData != nil {
			f2.UserData = r.ko.Spec.Data.UserData
		}
		res.LaunchTemplateData = f2
	}
	if r.ko.Status.ID != nil {
		res.LaunchTemplateId = r.ko.Status.ID
	}
	if r.ko.Spec.VersionDescription != nil {
		res.VersionDescription = r.ko.Spec.VersionDescription
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteLaunchTemplateOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteLaunchTemplate(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteLaunchTemplate", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteLaunchTemplateInput, error) {
	res := &svcsdk.DeleteLaunchTemplateInput{}

	if r.ko.Status.ID != nil {
		res.LaunchTemplateId = r.ko.Status.ID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.LaunchTemplate,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}

// setRequestLaunchTemplateData sets a resource RequestLaunchTemplateData type
// given the SDK type.
func (rm *resourceManager) setRequestLaunchTemplateData(
	resp *svcsdktypes.ResponseLaunchTemplateData,
) *svcapitypes.RequestLaunchTemplateData {
	res := &svcapitypes.RequestLaunchTemplateData{}

	if resp.BlockDeviceMappings != nil {
		resf0 := []*svcapitypes.LaunchTemplateBlockDeviceMappingRequest{}
		for _, resf0iter := range resp.BlockDeviceMappings {
			resf0elem := &svcapitypes.LaunchTemplateBlockDeviceMappingRequest{}
			if resf0iter.DeviceName != nil {
				resf0elem.DeviceName = resf0iter.DeviceName
			}
			if resf0iter.Ebs != nil {
				resf0elemf1 := &svcapitypes.LaunchTemplateEBSBlockDeviceRequest{}
				if resf0iter.Ebs.DeleteOnTermination != nil {
					resf0elemf1.DeleteOnTermination = resf0iter.Ebs.DeleteOnTermination
				}
				if resf0iter.Ebs.Encrypted != nil {
					resf0elemf1.Encrypted = resf0iter.Ebs.Encrypted
				}
				if resf0iter.Ebs.Iops != nil {
					iopsCopy := int64(*resf0iter.Ebs.Iops)
					resf0elemf1.IOPS = &iopsCopy
				}
				if resf0iter.Ebs.KmsKeyId != nil {
					resf0elemf1.KMSKeyID = resf0iter.Ebs.KmsKeyId
				}
				if resf0iter.Ebs.SnapshotId != nil {
					resf0elemf1.SnapshotID = resf0iter.Ebs.SnapshotId
				}
				if resf0iter.Ebs.Throughput != nil {
					throughputCopy := int64(*resf0iter.Ebs.Throughput)
					resf0elemf1.Throughput = &throughputCopy
				}
				if resf0iter.Ebs.VolumeSize != nil {
					volumeSizeCopy := int64(*resf0iter.Ebs.VolumeSize)
					resf0elemf1.VolumeSize = &volumeSizeCopy
				}
				if resf0iter.Ebs.VolumeType != "" {
					resf0elemf1.VolumeType = aws.String(string(resf0iter.Ebs.VolumeType))
				}
				resf0elem.EBS = resf0elemf1
			}
			if resf0iter.NoDevice != nil {
				resf0elem.NoDevice = resf0iter.NoDevice
			}
			if resf0iter.VirtualName != nil {
				resf0elem.VirtualName = resf0iter.VirtualName
			}
			resf0 = append(resf0, resf0elem)
		}
		res.BlockDeviceMappings = resf0
	}
	if resp.CapacityReservationSpecification != nil {
		resf1 := &svcapitypes.LaunchTemplateCapacityReservationSpecificationRequest{}
		if resp.CapacityReservationSpecification.CapacityReservationPreference != "" {
			resf1.CapacityReservationPreference = aws.String(string(resp.CapacityReservationSpecification.CapacityReservationPreference))
		}
		if resp.CapacityReservationSpecification.CapacityReservationTarget != nil {
			resf1f1 := &svcapitypes.CapacityReservationTarget{}
			if resp.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId != nil {
				resf1f1.CapacityReservationID = resp.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId
			}
			if resp.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn != nil {
				resf1f1.CapacityReservationResourceGroupARN = resp.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn
			}
			resf1.CapacityReservationTarget = resf1f1
		}
		res.CapacityReservationSpecification = resf1
	}
	if resp.CpuOptions != nil {
		resf2 := &svcapitypes.LaunchTemplateCPUOptionsRequest{}
		if resp.CpuOptions.AmdSevSnp != "" {
			resf2.AmdSevSnp = aws.String(string(resp.CpuOptions.AmdSevSnp))
		}
		if resp.CpuOptions.CoreCount != nil {
			coreCountCopy := int64(*resp.CpuOptions.CoreCount)
			resf2.CoreCount = &coreCountCopy
		}
		if resp.CpuOptions.ThreadsPerCore != nil {
			threadsPerCoreCopy := int64(*resp.CpuOptions.ThreadsPerCore)
			resf2.ThreadsPerCore = &threadsPerCoreCopy
		}
		res.CPUOptions = resf2
	}
	if resp.CreditSpecification != nil {
		resf3 := &svcapitypes.CreditSpecificationRequest{}
		if resp.CreditSpecification.CpuCredits != nil {
			resf3.CPUCredits = resp.CreditSpecification.CpuCredits
		}
		res.CreditSpecification = resf3
	}
	if resp.DisableApiStop != nil {
		res.DisableAPIStop = resp.DisableApiStop
	}
	if resp.DisableApiTermination != nil {
		res.DisableAPITermination = resp.DisableApiTermination
	}
	if resp.EbsOptimized != nil {
		res.EBSOptimized = resp.EbsOptimized
	}
	if resp.ElasticGpuSpecifications != nil {
		resf7 := []*svcapitypes.ElasticGPUSpecification{}
		for _, resf7iter := range resp.ElasticGpuSpecifications {
			resf7elem := &svcapitypes.ElasticGPUSpecification{}
			if resf7iter.Type != nil {
				resf7elem.Type = resf7iter.Type
			}
			resf7 = append(resf7, resf7elem)
		}
		res.ElasticGPUSpecifications = resf7
	}
	if resp.ElasticInferenceAccelerators != nil {
		resf8 := []*svcapitypes.LaunchTemplateElasticInferenceAccelerator{}
		for _, resf8iter := range resp.ElasticInferenceAccelerators {
			resf8elem := &svcapitypes.LaunchTemplateElasticInferenceAccelerator{}
			if resf8iter.Count != nil {
				countCopy := int64(*resf8iter.Count)
				resf8elem.Count = &countCopy
			}
			if resf8iter.Type != nil {
				resf8elem.Type = resf8iter.Type
			}
			resf8 = append(resf8, resf8elem)
		}
		res.ElasticInferenceAccelerators = resf8
	}
	if resp.EnclaveOptions != nil {
		resf9 := &svcapitypes.LaunchTemplateEnclaveOptionsRequest{}
		if resp.EnclaveOptions.Enabled != nil {
			resf9.Enabled = resp.EnclaveOptions.Enabled
		}
		res.EnclaveOptions = resf9
	}
	if resp.HibernationOptions != nil {
		resf10 := &svcapitypes.LaunchTemplateHibernationOptionsRequest{}
		if resp.HibernationOptions.Configured != nil {
			resf10.Configured = resp.HibernationOptions.Configured
		}
		res.HibernationOptions = resf10
	}
	if resp.IamInstanceProfile != nil {
		resf11 := &svcapitypes.LaunchTemplateIAMInstanceProfileSpecificationRequest{}
		if resp.IamInstanceProfile.Arn != nil {
			resf11.ARN = resp.IamInstanceProfile.Arn
		}
		if resp.IamInstanceProfile.Name != nil {
			resf11.Name = resp.IamInstanceProfile.Name
		}
		res.IAMInstanceProfile = resf11
	}
	if resp.ImageId != nil {
		res.ImageID = resp.ImageId
	}
	if resp.InstanceInitiatedShutdownBehavior != "" {
		res.InstanceInitiatedShutdownBehavior = aws.String(string(resp.InstanceInitiatedShutdownBehavior))
	}
	if resp.InstanceMarketOptions != nil {
		resf14 := &svcapitypes.LaunchTemplateInstanceMarketOptionsRequest{}
		if resp.InstanceMarketOptions.MarketType != "" {
			resf14.MarketType = aws.String(string(resp.InstanceMarketOptions.MarketType))
		}
		if resp.InstanceMarketOptions.SpotOptions != nil {
			resf14f1 := &svcapitypes.LaunchTemplateSpotMarketOptionsRequest{}
			if resp.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
				blockDurationMinutesCopy := int64(*resp.InstanceMarketOptions.SpotOptions.BlockDurationMinutes)
				resf14f1.BlockDurationMinutes = &blockDurationMinutesCopy
			}
			if resp.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != "" {
				resf14f1.InstanceInterruptionBehavior = aws.String(string(resp.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior))
			}
			if resp.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
				resf14f1.MaxPrice = resp.InstanceMarketOptions.SpotOptions.MaxPrice
			}
			if resp.InstanceMarketOptions.SpotOptions.SpotInstanceType != "" {
				resf14f1.SpotInstanceType = aws.String(string(resp.InstanceMarketOptions.SpotOptions.SpotInstanceType))
			}
			if resp.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
				resf14f1.ValidUntil = &metav1.Time{*resp.InstanceMarketOptions.SpotOptions.ValidUntil}
			}
			resf14.SpotOptions = resf14f1
		}
		res.InstanceMarketOptions = resf14
	}
	if resp.InstanceRequirements != nil {
		resf15 := &svcapitypes.InstanceRequirementsRequest{}
		if resp.InstanceRequirements.AcceleratorCount != nil {
			resf15f0 := &svcapitypes.AcceleratorCountRequest{}
			if resp.InstanceRequirements.AcceleratorCount.Max != nil {
				maxCopy := int64(*resp.InstanceRequirements.AcceleratorCount.Max)
				resf15f0.Max = &maxCopy
			}
			if resp.InstanceRequirements.AcceleratorCount.Min != nil {
				minCopy := int64(*resp.InstanceRequirements.AcceleratorCount.Min)
				resf15f0.Min = &minCopy
			}
			resf15.AcceleratorCount = resf15f0
		}
		if resp.InstanceRequirements.AcceleratorManufacturers != nil {
			resf15f1 := []*string{}
			for _, resf15f1iter := range resp.InstanceRequirements.AcceleratorManufacturers {
				var resf15f1elem *string
				resf15f1elem = aws.String(string(resf15f1iter))
				resf15f1 = append(resf15f1, resf15f1elem)
			}
			resf15.AcceleratorManufacturers = resf15f1
		}
		if resp.InstanceRequirements.AcceleratorNames != nil {
			resf15f2 := []*string{}
			for _, resf15f2iter := range resp.InstanceRequirements.AcceleratorNames {
				var resf15f2elem *string
				resf15f2elem = aws.String(string(resf15f2iter))
				resf15f2 = append(resf15f2, resf15f2elem)
			}
			resf15.AcceleratorNames = resf15f2
		}
		if resp.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
			resf15f3 := &svcapitypes.AcceleratorTotalMemoryMiBRequest{}
			if resp.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
				maxCopy := int64(*resp.InstanceRequirements.AcceleratorTotalMemoryMiB.Max)
				resf15f3.Max = &maxCopy
			}
			if resp.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
				minCopy := int64(*resp.InstanceRequirements.AcceleratorTotalMemoryMiB.Min)
				resf15f3.Min = &minCopy
			}
			resf15.AcceleratorTotalMemoryMiB = resf15f3
		}
		if resp.InstanceRequirements.AcceleratorTypes != nil {
			resf15f4 := []*string{}
			for _, resf15f4iter := range resp.InstanceRequirements.AcceleratorTypes {
				var resf15f4elem *string
				resf15f4elem = aws.String(string(resf15f4iter))
				resf15f4 = append(resf15f4, resf15f4elem)
			}
			resf15.AcceleratorTypes = resf15f4
		}
		if resp.InstanceRequirements.AllowedInstanceTypes != nil {
			resf15.AllowedInstanceTypes = aws.StringSlice(resp.InstanceRequirements.AllowedInstanceTypes)
		}
		if resp.InstanceRequirements.BareMetal != "" {
			resf15.BareMetal = aws.String(string(resp.InstanceRequirements.BareMetal))
		}
		if resp.InstanceRequirements.BaselineEbsBandwidthMbps != nil {
			resf15f7 := &svcapitypes.BaselineEBSBandwidthMbpsRequest{}
			if resp.InstanceRequirements.BaselineEbsBandwidthMbps.Max != nil {
				maxCopy := int64(*resp.InstanceRequirements.BaselineEbsBandwidthMbps.Max)
				resf15f7.Max = &maxCopy
			}
			if resp.InstanceRequirements.BaselineEbsBandwidthMbps.Min != nil {
				minCopy := int64(*resp.InstanceRequirements.BaselineEbsBandwidthMbps.Min)
				resf15f7.Min = &minCopy
			}
			resf15.BaselineEBSBandwidthMbps = resf15f7
		}
		if resp.InstanceRequirements.BaselinePerformanceFactors != nil {
			resf15f8 := &svcapitypes.BaselinePerformanceFactorsRequest{}
			if resp.InstanceRequirements.BaselinePerformanceFactors.Cpu != nil {
				resf15f8f0 := &svcapitypes.CPUPerformanceFactorRequest{}
				if resp.InstanceRequirements.BaselinePerformanceFactors.Cpu.References != nil {
					resf15f8f0f0 := []*svcapitypes.PerformanceFactorReferenceRequest{}
					for _, resf15f8f0f0iter := range resp.InstanceRequirements.BaselinePerformanceFactors.Cpu.References {
						resf15f8f0f0elem := &svcapitypes.PerformanceFactorReferenceRequest{}
						if resf15f8f0f0iter.InstanceFamily != nil {
							resf15f8f0f0elem.InstanceFamily = resf15f8f0f0iter.InstanceFamily
						}
						resf15f8f0f0 = append(resf15f8f0f0, resf15f8f0f0elem)
					}
					resf15f8f0.References = resf15f8f0f0
				}
				resf15f8.CPU = resf15f8f0
			}
			resf15.BaselinePerformanceFactors = resf15f8
		}
		if resp.InstanceRequirements.BurstablePerformance != "" {
			resf15.BurstablePerformance = aws.String(string(resp.InstanceRequirements.BurstablePerformance))
		}
		if resp.InstanceRequirements.CpuManufacturers != nil {
			resf15f10 := []*string{}
			for _, resf15f10iter := range resp.InstanceRequirements.CpuManufacturers {
				var resf15f10elem *string
				resf15f10elem = aws.String(string(resf15f10iter))
				resf15f10 = append(resf15f10, resf15f10elem)
			}
			resf15.CPUManufacturers = resf15f10
		}
		if resp.InstanceRequirements.ExcludedInstanceTypes != nil {
			resf15.ExcludedInstanceTypes = aws.StringSlice(resp.InstanceRequirements.ExcludedInstanceTypes)
		}
		if resp.InstanceRequirements.InstanceGenerations != nil {
			resf15f12 := []*string{}
			for _, resf15f12iter := range resp.InstanceRequirements.InstanceGenerations {
				var resf15f12elem *string
				resf15f12elem = aws.String(string(resf15f12iter))
				resf15f12 = append(resf15f12, resf15f12elem)
			}
			resf15.InstanceGenerations = resf15f12
		}
		if resp.InstanceRequirements.LocalStorage != "" {
			resf15.LocalStorage = aws.String(string(resp.InstanceRequirements.LocalStorage))
		}
		if resp.InstanceRequirements.LocalStorageTypes != nil {
			resf15f14 := []*string{}
			for _, resf15f14iter := range resp.InstanceRequirements.LocalStorageTypes {
				var resf15f14elem *string
				resf15f14elem = aws.String(string(resf15f14iter))
				resf15f14 = append(resf15f14, resf15f14elem)
			}
			resf15.LocalStorageTypes = resf15f14
		}
		if resp.InstanceRequirements.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice != nil {
			maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy := int64(*resp.InstanceRequirements.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice)
			resf15.MaxSpotPriceAsPercentageOfOptimalOnDemandPrice = &maxSpotPriceAsPercentageOfOptimalOnDemandPriceCopy
		}
		if resp.InstanceRequirements.MemoryGiBPerVCpu != nil {
			resf15f16 := &svcapitypes.MemoryGiBPerVCPURequest{}
			if resp.InstanceRequirements.MemoryGiBPerVCpu.Max != nil {
				resf15f16.Max = resp.InstanceRequirements.MemoryGiBPerVCpu.Max
			}
			if resp.InstanceRequirements.MemoryGiBPerVCpu.Min != nil {
				resf15f16.Min = resp.InstanceRequirements.MemoryGiBPerVCpu.Min
			}
			resf15.MemoryGiBPerVCPU = resf15f16
		}
		if resp.InstanceRequirements.MemoryMiB != nil {
			resf15f17 := &svcapitypes.MemoryMiBRequest{}
			if resp.InstanceRequirements.MemoryMiB.Max != nil {
				maxCopy := int64(*resp.InstanceRequirements.MemoryMiB.Max)
				resf15f17.Max = &maxCopy
			}
			if resp.InstanceRequirements.MemoryMiB.Min != nil {
				minCopy := int64(*resp.InstanceRequirements.MemoryMiB.Min)
				resf15f17.Min = &minCopy
			}
			resf15.MemoryMiB = resf15f17
		}
		if resp.InstanceRequirements.NetworkBandwidthGbps != nil {
			resf15f18 := &svcapitypes.NetworkBandwidthGbpsRequest{}
			if resp.InstanceRequirements.NetworkBandwidthGbps.Max != nil {
				resf15f18.Max = resp.InstanceRequirements.NetworkBandwidthGbps.Max
			}
			if resp.InstanceRequirements.NetworkBandwidthGbps.Min != nil {
				resf15f18.Min = resp.InstanceRequirements.NetworkBandwidthGbps.Min
			}
			resf15.NetworkBandwidthGbps = resf15f18
		}
		if resp.InstanceRequirements.NetworkInterfaceCount != nil {
			resf15f19 := &svcapitypes.NetworkInterfaceCountRequest{}
			if resp.InstanceRequirements.NetworkInterfaceCount.Max != nil {
				maxCopy := int64(*resp.InstanceRequirements.NetworkInterfaceCount.Max)
				resf15f19.Max = &maxCopy
			}
			if resp.InstanceRequirements.NetworkInterfaceCount.Min != nil {
				minCopy := int64(*resp.InstanceRequirements.NetworkInterfaceCount.Min)
				resf15f19.Min = &minCopy
			}
			resf15.NetworkInterfaceCount = resf15f19
		}
		if resp.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
			onDemandMaxPricePercentageOverLowestPriceCopy := int64(*resp.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice)
			resf15.OnDemandMaxPricePercentageOverLowestPrice = &onDemandMaxPricePercentageOverLowestPriceCopy
		}
		if resp.InstanceRequirements.RequireHibernateSupport != nil {
			resf15.RequireHibernateSupport = resp.InstanceRequirements.RequireHibernateSupport
		}
		if resp.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
			spotMaxPricePercentageOverLowestPriceCopy := int64(*resp.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice)
			resf15.SpotMaxPricePercentageOverLowestPrice = &spotMaxPricePercentageOverLowestPriceCopy
		}
		if resp.InstanceRequirements.TotalLocalStorageGB != nil {
			resf15f23 := &svcapitypes.TotalLocalStorageGBRequest{}
			if resp.InstanceRequirements.TotalLocalStorageGB.Max != nil {
				resf15f23.Max = resp.InstanceRequirements.TotalLocalStorageGB.Max
			}
			if resp.InstanceRequirements.TotalLocalStorageGB.Min != nil {
				resf15f23.Min = resp.InstanceRequirements.TotalLocalStorageGB.Min
			}
			resf15.TotalLocalStorageGB = resf15f23
		}
		if resp.InstanceRequirements.VCpuCount != nil {
			resf15f24 := &svcapitypes.VCPUCountRangeRequest{}
			if resp.InstanceRequirements.VCpuCount.Max != nil {
				maxCopy := int64(*resp.InstanceRequirements.VCpuCount.Max)
				resf15f24.Max = &maxCopy
			}
			if resp.InstanceRequirements.VCpuCount.Min != nil {
				minCopy := int64(*resp.InstanceRequirements.VCpuCount.Min)
				resf15f24.Min = &minCopy
			}
			resf15.VCPUCount = resf15f24
		}
		res.InstanceRequirements = resf15
	}
	if resp.InstanceType != "" {
		res.InstanceType = aws.String(string(resp.InstanceType))
	}
	if resp.KernelId != nil {
		res.KernelID = resp.KernelId
	}
	if resp.KeyName != nil {
		res.KeyName = resp.KeyName
	}
	if resp.LicenseSpecifications != nil {
		resf19 := []*svcapitypes.LaunchTemplateLicenseConfigurationRequest{}
		for _, resf19iter := range resp.LicenseSpecifications {
			resf19elem := &svcapitypes.LaunchTemplateLicenseConfigurationRequest{}
			if resf19iter.LicenseConfigurationArn != nil {
				resf19elem.LicenseConfigurationARN = resf19iter.LicenseConfigurationArn
			}
			resf19 = append(resf19, resf19elem)
		}
		res.LicenseSpecifications = resf19
	}
	if resp.MaintenanceOptions != nil {
		resf20 := &svcapitypes.LaunchTemplateInstanceMaintenanceOptionsRequest{}
		if resp.MaintenanceOptions.AutoRecovery != "" {
			resf20.AutoRecovery = aws.String(string(resp.MaintenanceOptions.AutoRecovery))
		}
		res.MaintenanceOptions = resf20
	}
	if resp.MetadataOptions != nil {
		resf21 := &svcapitypes.LaunchTemplateInstanceMetadataOptionsRequest{}
		if resp.MetadataOptions.HttpEndpoint != "" {
			resf21.HTTPEndpoint = aws.String(string(resp.MetadataOptions.HttpEndpoint))
		}
		if resp.MetadataOptions.HttpProtocolIpv6 != "" {
			resf21.HTTPProtocolIPv6 = aws.String(string(resp.MetadataOptions.HttpProtocolIpv6))
		}
		if resp.MetadataOptions.HttpPutResponseHopLimit != nil {
			httpPutResponseHopLimitCopy := int64(*resp.MetadataOptions.HttpPutResponseHopLimit)
			resf21.HTTPPutResponseHopLimit = &httpPutResponseHopLimitCopy
		}
		if resp.MetadataOptions.HttpTokens != "" {
			resf21.HTTPTokens = aws.String(string(resp.MetadataOptions.HttpTokens))
		}
		if resp.MetadataOptions.InstanceMetadataTags != "" {
			resf21.InstanceMetadataTags = aws.String(string(resp.MetadataOptions.InstanceMetadataTags))
		}
		res.MetadataOptions = resf21
	}
	if resp.Monitoring != nil {
		resf22 := &svcapitypes.LaunchTemplatesMonitoringRequest{}
		if resp.Monitoring.Enabled != nil {
			resf22.Enabled = resp.Monitoring.Enabled
		}
		res.Monitoring = resf22
	}
	if resp.NetworkInterfaces != nil {
		resf23 := []*svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
		for _, resf23iter := range resp.NetworkInterfaces {
			resf23elem := &svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
			if resf23iter.AssociateCarrierIpAddress != nil {
				resf23elem.AssociateCarrierIPAddress = resf23iter.AssociateCarrierIpAddress
			}
			if resf23iter.AssociatePublicIpAddress != nil {
				resf23elem.AssociatePublicIPAddress = resf23iter.AssociatePublicIpAddress
			}
			if resf23iter.DeleteOnTermination != nil {
				resf23elem.DeleteOnTermination = resf23iter.DeleteOnTermination
			}
			if resf23iter.Description != nil {
				resf23elem.Description = resf23iter.Description
			}
			if resf23iter.DeviceIndex != nil {
				deviceIndexCopy := int64(*resf23iter.DeviceIndex)
				resf23elem.DeviceIndex = &deviceIndexCopy
			}
			if resf23iter.Groups != nil {
				resf23elem.Groups = aws.StringSlice(resf23iter.Groups)
			}
			if resf23iter.InterfaceType != nil {
				resf23elem.InterfaceType = resf23iter.InterfaceType
			}
			if resf23iter.Ipv4PrefixCount != nil {
				ipv4PrefixCountCopy := int64(*resf23iter.Ipv4PrefixCount)
				resf23elem.IPv4PrefixCount = &ipv4PrefixCountCopy
			}
			if resf23iter.Ipv4Prefixes != nil {
				resf23elemf10 := []*svcapitypes.IPv4PrefixSpecificationRequest{}
				for _, resf23elemf10iter := range resf23iter.Ipv4Prefixes {
					resf23elemf10elem := &svcapitypes.IPv4PrefixSpecificationRequest{}
					if resf23elemf10iter.Ipv4Prefix != nil {
						resf23elemf10elem.IPv4Prefix = resf23elemf10iter.Ipv4Prefix
					}
					resf23elemf10 = append(resf23elemf10, resf23elemf10elem)
				}
				resf23elem.IPv4Prefixes = resf23elemf10
			}
			if resf23iter.Ipv6AddressCount != nil {
				ipv6AddressCountCopy := int64(*resf23iter.Ipv6AddressCount)
				resf23elem.IPv6AddressCount = &ipv6AddressCountCopy
			}
			if resf23iter.Ipv6Addresses != nil {
				resf23elemf12 := []*svcapitypes.InstanceIPv6AddressRequest{}
				for _, resf23elemf12iter := range resf23iter.Ipv6Addresses {
					resf23elemf12elem := &svcapitypes.InstanceIPv6AddressRequest{}
					if resf23elemf12iter.Ipv6Address != nil {
						resf23elemf12elem.IPv6Address = resf23elemf12iter.Ipv6Address
					}
					resf23elemf12 = append(resf23elemf12, resf23elemf12elem)
				}
				resf23elem.IPv6Addresses = resf23elemf12
			}
			if resf23iter.Ipv6PrefixCount != nil {
				ipv6PrefixCountCopy := int64(*resf23iter.Ipv6PrefixCount)
				resf23elem.IPv6PrefixCount = &ipv6PrefixCountCopy
			}
			if resf23iter.Ipv6Prefixes != nil {
				resf23elemf14 := []*svcapitypes.IPv6PrefixSpecificationRequest{}
				for _, resf23elemf14iter := range resf23iter.Ipv6Prefixes {
					resf23elemf14elem := &svcapitypes.IPv6PrefixSpecificationRequest{}
					if resf23elemf14iter.Ipv6Prefix != nil {
						resf23elemf14elem.IPv6Prefix = resf23elemf14iter.Ipv6Prefix
					}
					resf23elemf14 = append(resf23elemf14, resf23elemf14elem)
				}
				resf23elem.IPv6Prefixes = resf23elemf14
			}
			if resf23iter.NetworkCardIndex != nil {
				networkCardIndexCopy := int64(*resf23iter.NetworkCardIndex)
				resf23elem.NetworkCardIndex = &networkCardIndexCopy
			}
			if resf23iter.NetworkInterfaceId != nil {
				resf23elem.NetworkInterfaceID = resf23iter.NetworkInterfaceId
			}
			if resf23iter.PrimaryIpv6 != nil {
				resf23elem.PrimaryIPv6 = resf23iter.PrimaryIpv6
			}
			if resf23iter.PrivateIpAddress != nil {
				resf23elem.PrivateIPAddress = resf23iter.PrivateIpAddress
			}
			if resf23iter.PrivateIpAddresses != nil {
				resf23elemf19 := []*svcapitypes.PrivateIPAddressSpecification{}
				for _, resf23elemf19iter := range resf23iter.PrivateIpAddresses {
					resf23elemf19elem := &svcapitypes.PrivateIPAddressSpecification{}
					if resf23elemf19iter.Primary != nil {
						resf23elemf19elem.Primary = resf23elemf19iter.Primary
					}
					if resf23elemf19iter.PrivateIpAddress != nil {
						resf23elemf19elem.PrivateIPAddress = resf23elemf19iter.PrivateIpAddress
					}
					resf23elemf19 = append(resf23elemf19, resf23elemf19elem)
				}
				resf23elem.PrivateIPAddresses = resf23elemf19
			}
			if resf23iter.SecondaryPrivateIpAddressCount != nil {
				secondaryPrivateIPAddressCountCopy := int64(*resf23iter.SecondaryPrivateIpAddressCount)
				resf23elem.SecondaryPrivateIPAddressCount = &secondaryPrivateIPAddressCountCopy
			}
			if resf23iter.SubnetId != nil {
				resf23elem.SubnetID = resf23iter.SubnetId
			}
			resf23 = append(resf23, resf23elem)
		}
		res.NetworkInterfaces = resf23
	}
	if resp.Placement != nil {
		resf25 := &svcapitypes.LaunchTemplatePlacementRequest{}
		if resp.Placement.Affinity != nil {
			resf25.Affinity = resp.Placement.Affinity
		}
		if resp.Placement.AvailabilityZone != nil {
			resf25.AvailabilityZone = resp.Placement.AvailabilityZone
		}
		if resp.Placement.GroupId != nil {
			resf25.GroupID = resp.Placement.GroupId
		}
		if resp.Placement.GroupName != nil {
			resf25.GroupName = resp.Placement.GroupName
		}
		if resp.Placement.HostId != nil {
			resf25.HostID = resp.Placement.HostId
		}
		if resp.Placement.HostResourceGroupArn != nil {
			resf25.HostResourceGroupARN = resp.Placement.HostResourceGroupArn
		}
		if resp.Placement.PartitionNumber != nil {
			partitionNumberCopy := int64(*resp.Placement.PartitionNumber)
			resf25.PartitionNumber = &partitionNumberCopy
		}
		if resp.Placement.SpreadDomain != nil {
			resf25.SpreadDomain = resp.Placement.SpreadDomain
		}
		if resp.Placement.Tenancy != "" {
			resf25.Tenancy = aws.String(string(resp.Placement.Tenancy))
		}
		res.Placement = resf25
	}
	if resp.PrivateDnsNameOptions != nil {
		resf26 := &svcapitypes.LaunchTemplatePrivateDNSNameOptionsRequest{}
		if resp.PrivateDnsNameOptions.EnableResourceNameDnsAAAARecord != nil {
			resf26.EnableResourceNameDNSAAAARecord = resp.PrivateDnsNameOptions.EnableResourceNameDnsAAAARecord
		}
		if resp.PrivateDnsNameOptions.EnableResourceNameDnsARecord != nil {
			resf26.EnableResourceNameDNSARecord = resp.PrivateDnsNameOptions.EnableResourceNameDnsARecord
		}
		if resp.PrivateDnsNameOptions.HostnameType != "" {
			resf26.HostnameType = aws.String(string(resp.PrivateDnsNameOptions.HostnameType))
		}
		res.PrivateDNSNameOptions = resf26
	}
	if resp.RamDiskId != nil {
		res.RAMDiskID = resp.RamDiskId
	}
	if resp.SecurityGroupIds != nil {
		res.SecurityGroupIDs = aws.StringSlice(resp.SecurityGroupIds)
	}
	if resp.SecurityGroups != nil {
		res.SecurityGroups = aws.StringSlice(resp.SecurityGroups)
	}
	if resp.UserData != nil {
		res.UserData = resp.UserData
	}

	return res
}
