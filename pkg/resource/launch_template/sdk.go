// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package launch_template

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.LaunchTemplate{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeLaunchTemplatesOutput
	resp, err = rm.sdkapi.DescribeLaunchTemplatesWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeLaunchTemplates", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "InvalidLaunchTemplateName.NotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.LaunchTemplates {
		if elem.CreateTime != nil {
			ko.Status.CreateTime = &metav1.Time{*elem.CreateTime}
		} else {
			ko.Status.CreateTime = nil
		}
		if elem.CreatedBy != nil {
			ko.Status.CreatedBy = elem.CreatedBy
		} else {
			ko.Status.CreatedBy = nil
		}
		if elem.DefaultVersionNumber != nil {
			ko.Spec.DefaultVersionNumber = elem.DefaultVersionNumber
		} else {
			ko.Spec.DefaultVersionNumber = nil
		}
		if elem.LatestVersionNumber != nil {
			ko.Status.LatestVersionNumber = elem.LatestVersionNumber
		} else {
			ko.Status.LatestVersionNumber = nil
		}
		if elem.LaunchTemplateId != nil {
			ko.Status.LaunchTemplateID = elem.LaunchTemplateId
		} else {
			ko.Status.LaunchTemplateID = nil
		}
		if elem.Tags != nil {
			f6 := []*svcapitypes.Tag{}
			for _, f6iter := range elem.Tags {
				f6elem := &svcapitypes.Tag{}
				if f6iter.Key != nil {
					f6elem.Key = f6iter.Key
				}
				if f6iter.Value != nil {
					f6elem.Value = f6iter.Value
				}
				f6 = append(f6, f6elem)
			}
			ko.Status.Tags = f6
		} else {
			ko.Status.Tags = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return r.ko.Status.LaunchTemplateID == nil

}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeLaunchTemplatesInput, error) {
	res := &svcsdk.DescribeLaunchTemplatesInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Status.LaunchTemplateID != nil {
		f2 := []*string{}
		f2 = append(f2, r.ko.Status.LaunchTemplateID)
		res.SetLaunchTemplateIds(f2)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateLaunchTemplateOutput
	_ = resp
	resp, err = rm.sdkapi.CreateLaunchTemplateWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateLaunchTemplate", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.LaunchTemplate.CreateTime != nil {
		ko.Status.CreateTime = &metav1.Time{*resp.LaunchTemplate.CreateTime}
	} else {
		ko.Status.CreateTime = nil
	}
	if resp.LaunchTemplate.CreatedBy != nil {
		ko.Status.CreatedBy = resp.LaunchTemplate.CreatedBy
	} else {
		ko.Status.CreatedBy = nil
	}
	if resp.LaunchTemplate.DefaultVersionNumber != nil {
		ko.Spec.DefaultVersionNumber = resp.LaunchTemplate.DefaultVersionNumber
	} else {
		ko.Spec.DefaultVersionNumber = nil
	}
	if resp.LaunchTemplate.LatestVersionNumber != nil {
		ko.Status.LatestVersionNumber = resp.LaunchTemplate.LatestVersionNumber
	} else {
		ko.Status.LatestVersionNumber = nil
	}
	if resp.LaunchTemplate.LaunchTemplateId != nil {
		ko.Status.LaunchTemplateID = resp.LaunchTemplate.LaunchTemplateId
	} else {
		ko.Status.LaunchTemplateID = nil
	}
	if resp.LaunchTemplate.LaunchTemplateName != nil {
		ko.Spec.Name = resp.LaunchTemplate.LaunchTemplateName
	} else {
		ko.Spec.Name = nil
	}
	if resp.LaunchTemplate.Tags != nil {
		f6 := []*svcapitypes.Tag{}
		for _, f6iter := range resp.LaunchTemplate.Tags {
			f6elem := &svcapitypes.Tag{}
			if f6iter.Key != nil {
				f6elem.Key = f6iter.Key
			}
			if f6iter.Value != nil {
				f6elem.Value = f6iter.Value
			}
			f6 = append(f6, f6elem)
		}
		ko.Status.Tags = f6
	} else {
		ko.Status.Tags = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateLaunchTemplateInput, error) {
	res := &svcsdk.CreateLaunchTemplateInput{}

	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Spec.LaunchTemplateData != nil {
		f2 := &svcsdk.RequestLaunchTemplateData{}
		if r.ko.Spec.LaunchTemplateData.BlockDeviceMappings != nil {
			f2f0 := []*svcsdk.LaunchTemplateBlockDeviceMappingRequest{}
			for _, f2f0iter := range r.ko.Spec.LaunchTemplateData.BlockDeviceMappings {
				f2f0elem := &svcsdk.LaunchTemplateBlockDeviceMappingRequest{}
				if f2f0iter.DeviceName != nil {
					f2f0elem.SetDeviceName(*f2f0iter.DeviceName)
				}
				if f2f0iter.EBS != nil {
					f2f0elemf1 := &svcsdk.LaunchTemplateEbsBlockDeviceRequest{}
					if f2f0iter.EBS.DeleteOnTermination != nil {
						f2f0elemf1.SetDeleteOnTermination(*f2f0iter.EBS.DeleteOnTermination)
					}
					if f2f0iter.EBS.Encrypted != nil {
						f2f0elemf1.SetEncrypted(*f2f0iter.EBS.Encrypted)
					}
					if f2f0iter.EBS.IOPS != nil {
						f2f0elemf1.SetIops(*f2f0iter.EBS.IOPS)
					}
					if f2f0iter.EBS.KMSKeyID != nil {
						f2f0elemf1.SetKmsKeyId(*f2f0iter.EBS.KMSKeyID)
					}
					if f2f0iter.EBS.SnapshotID != nil {
						f2f0elemf1.SetSnapshotId(*f2f0iter.EBS.SnapshotID)
					}
					if f2f0iter.EBS.Throughput != nil {
						f2f0elemf1.SetThroughput(*f2f0iter.EBS.Throughput)
					}
					if f2f0iter.EBS.VolumeSize != nil {
						f2f0elemf1.SetVolumeSize(*f2f0iter.EBS.VolumeSize)
					}
					if f2f0iter.EBS.VolumeType != nil {
						f2f0elemf1.SetVolumeType(*f2f0iter.EBS.VolumeType)
					}
					f2f0elem.SetEbs(f2f0elemf1)
				}
				if f2f0iter.NoDevice != nil {
					f2f0elem.SetNoDevice(*f2f0iter.NoDevice)
				}
				if f2f0iter.VirtualName != nil {
					f2f0elem.SetVirtualName(*f2f0iter.VirtualName)
				}
				f2f0 = append(f2f0, f2f0elem)
			}
			f2.SetBlockDeviceMappings(f2f0)
		}
		if r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification != nil {
			f2f1 := &svcsdk.LaunchTemplateCapacityReservationSpecificationRequest{}
			if r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference != nil {
				f2f1.SetCapacityReservationPreference(*r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference)
			}
			if r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget != nil {
				f2f1f1 := &svcsdk.CapacityReservationTarget{}
				if r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID != nil {
					f2f1f1.SetCapacityReservationId(*r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID)
				}
				if r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN != nil {
					f2f1f1.SetCapacityReservationResourceGroupArn(*r.ko.Spec.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN)
				}
				f2f1.SetCapacityReservationTarget(f2f1f1)
			}
			f2.SetCapacityReservationSpecification(f2f1)
		}
		if r.ko.Spec.LaunchTemplateData.CPUOptions != nil {
			f2f2 := &svcsdk.LaunchTemplateCpuOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.CPUOptions.CoreCount != nil {
				f2f2.SetCoreCount(*r.ko.Spec.LaunchTemplateData.CPUOptions.CoreCount)
			}
			if r.ko.Spec.LaunchTemplateData.CPUOptions.ThreadsPerCore != nil {
				f2f2.SetThreadsPerCore(*r.ko.Spec.LaunchTemplateData.CPUOptions.ThreadsPerCore)
			}
			f2.SetCpuOptions(f2f2)
		}
		if r.ko.Spec.LaunchTemplateData.CreditSpecification != nil {
			f2f3 := &svcsdk.CreditSpecificationRequest{}
			if r.ko.Spec.LaunchTemplateData.CreditSpecification.CPUCredits != nil {
				f2f3.SetCpuCredits(*r.ko.Spec.LaunchTemplateData.CreditSpecification.CPUCredits)
			}
			f2.SetCreditSpecification(f2f3)
		}
		if r.ko.Spec.LaunchTemplateData.DisableAPIStop != nil {
			f2.SetDisableApiStop(*r.ko.Spec.LaunchTemplateData.DisableAPIStop)
		}
		if r.ko.Spec.LaunchTemplateData.DisableAPITermination != nil {
			f2.SetDisableApiTermination(*r.ko.Spec.LaunchTemplateData.DisableAPITermination)
		}
		if r.ko.Spec.LaunchTemplateData.EBSOptimized != nil {
			f2.SetEbsOptimized(*r.ko.Spec.LaunchTemplateData.EBSOptimized)
		}
		if r.ko.Spec.LaunchTemplateData.ElasticGPUSpecifications != nil {
			f2f7 := []*svcsdk.ElasticGpuSpecification{}
			for _, f2f7iter := range r.ko.Spec.LaunchTemplateData.ElasticGPUSpecifications {
				f2f7elem := &svcsdk.ElasticGpuSpecification{}
				if f2f7iter.Type != nil {
					f2f7elem.SetType(*f2f7iter.Type)
				}
				f2f7 = append(f2f7, f2f7elem)
			}
			f2.SetElasticGpuSpecifications(f2f7)
		}
		if r.ko.Spec.LaunchTemplateData.ElasticInferenceAccelerators != nil {
			f2f8 := []*svcsdk.LaunchTemplateElasticInferenceAccelerator{}
			for _, f2f8iter := range r.ko.Spec.LaunchTemplateData.ElasticInferenceAccelerators {
				f2f8elem := &svcsdk.LaunchTemplateElasticInferenceAccelerator{}
				if f2f8iter.Count != nil {
					f2f8elem.SetCount(*f2f8iter.Count)
				}
				if f2f8iter.Type != nil {
					f2f8elem.SetType(*f2f8iter.Type)
				}
				f2f8 = append(f2f8, f2f8elem)
			}
			f2.SetElasticInferenceAccelerators(f2f8)
		}
		if r.ko.Spec.LaunchTemplateData.EnclaveOptions != nil {
			f2f9 := &svcsdk.LaunchTemplateEnclaveOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.EnclaveOptions.Enabled != nil {
				f2f9.SetEnabled(*r.ko.Spec.LaunchTemplateData.EnclaveOptions.Enabled)
			}
			f2.SetEnclaveOptions(f2f9)
		}
		if r.ko.Spec.LaunchTemplateData.HibernationOptions != nil {
			f2f10 := &svcsdk.LaunchTemplateHibernationOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.HibernationOptions.Configured != nil {
				f2f10.SetConfigured(*r.ko.Spec.LaunchTemplateData.HibernationOptions.Configured)
			}
			f2.SetHibernationOptions(f2f10)
		}
		if r.ko.Spec.LaunchTemplateData.IAMInstanceProfile != nil {
			f2f11 := &svcsdk.LaunchTemplateIamInstanceProfileSpecificationRequest{}
			if r.ko.Spec.LaunchTemplateData.IAMInstanceProfile.ARN != nil {
				f2f11.SetArn(*r.ko.Spec.LaunchTemplateData.IAMInstanceProfile.ARN)
			}
			if r.ko.Spec.LaunchTemplateData.IAMInstanceProfile.Name != nil {
				f2f11.SetName(*r.ko.Spec.LaunchTemplateData.IAMInstanceProfile.Name)
			}
			f2.SetIamInstanceProfile(f2f11)
		}
		if r.ko.Spec.LaunchTemplateData.ImageID != nil {
			f2.SetImageId(*r.ko.Spec.LaunchTemplateData.ImageID)
		}
		if r.ko.Spec.LaunchTemplateData.InstanceInitiatedShutdownBehavior != nil {
			f2.SetInstanceInitiatedShutdownBehavior(*r.ko.Spec.LaunchTemplateData.InstanceInitiatedShutdownBehavior)
		}
		if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions != nil {
			f2f14 := &svcsdk.LaunchTemplateInstanceMarketOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.MarketType != nil {
				f2f14.SetMarketType(*r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.MarketType)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions != nil {
				f2f14f1 := &svcsdk.LaunchTemplateSpotMarketOptionsRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
					f2f14f1.SetBlockDurationMinutes(*r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != nil {
					f2f14f1.SetInstanceInterruptionBehavior(*r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
					f2f14f1.SetMaxPrice(*r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType != nil {
					f2f14f1.SetSpotInstanceType(*r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
					f2f14f1.SetValidUntil(r.ko.Spec.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil.Time)
				}
				f2f14.SetSpotOptions(f2f14f1)
			}
			f2.SetInstanceMarketOptions(f2f14)
		}
		if r.ko.Spec.LaunchTemplateData.InstanceRequirements != nil {
			f2f15 := &svcsdk.InstanceRequirementsRequest{}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorCount != nil {
				f2f15f0 := &svcsdk.AcceleratorCountRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max != nil {
					f2f15f0.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min != nil {
					f2f15f0.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min)
				}
				f2f15.SetAcceleratorCount(f2f15f0)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers != nil {
				f2f15f1 := []*string{}
				for _, f2f15f1iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers {
					var f2f15f1elem string
					f2f15f1elem = *f2f15f1iter
					f2f15f1 = append(f2f15f1, &f2f15f1elem)
				}
				f2f15.SetAcceleratorManufacturers(f2f15f1)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorNames != nil {
				f2f15f2 := []*string{}
				for _, f2f15f2iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorNames {
					var f2f15f2elem string
					f2f15f2elem = *f2f15f2iter
					f2f15f2 = append(f2f15f2, &f2f15f2elem)
				}
				f2f15.SetAcceleratorNames(f2f15f2)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
				f2f15f3 := &svcsdk.AcceleratorTotalMemoryMiBRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
					f2f15f3.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
					f2f15f3.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min)
				}
				f2f15.SetAcceleratorTotalMemoryMiB(f2f15f3)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTypes != nil {
				f2f15f4 := []*string{}
				for _, f2f15f4iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.AcceleratorTypes {
					var f2f15f4elem string
					f2f15f4elem = *f2f15f4iter
					f2f15f4 = append(f2f15f4, &f2f15f4elem)
				}
				f2f15.SetAcceleratorTypes(f2f15f4)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.BareMetal != nil {
				f2f15.SetBareMetal(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.BareMetal)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.BaselineEBSBandwidthMbps != nil {
				f2f15f6 := &svcsdk.BaselineEbsBandwidthMbpsRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.BaselineEBSBandwidthMbps.Max != nil {
					f2f15f6.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.BaselineEBSBandwidthMbps.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.BaselineEBSBandwidthMbps.Min != nil {
					f2f15f6.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.BaselineEBSBandwidthMbps.Min)
				}
				f2f15.SetBaselineEbsBandwidthMbps(f2f15f6)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.BurstablePerformance != nil {
				f2f15.SetBurstablePerformance(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.BurstablePerformance)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.CPUManufacturers != nil {
				f2f15f8 := []*string{}
				for _, f2f15f8iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.CPUManufacturers {
					var f2f15f8elem string
					f2f15f8elem = *f2f15f8iter
					f2f15f8 = append(f2f15f8, &f2f15f8elem)
				}
				f2f15.SetCpuManufacturers(f2f15f8)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes != nil {
				f2f15f9 := []*string{}
				for _, f2f15f9iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes {
					var f2f15f9elem string
					f2f15f9elem = *f2f15f9iter
					f2f15f9 = append(f2f15f9, &f2f15f9elem)
				}
				f2f15.SetExcludedInstanceTypes(f2f15f9)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.InstanceGenerations != nil {
				f2f15f10 := []*string{}
				for _, f2f15f10iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.InstanceGenerations {
					var f2f15f10elem string
					f2f15f10elem = *f2f15f10iter
					f2f15f10 = append(f2f15f10, &f2f15f10elem)
				}
				f2f15.SetInstanceGenerations(f2f15f10)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.LocalStorage != nil {
				f2f15.SetLocalStorage(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.LocalStorage)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.LocalStorageTypes != nil {
				f2f15f12 := []*string{}
				for _, f2f15f12iter := range r.ko.Spec.LaunchTemplateData.InstanceRequirements.LocalStorageTypes {
					var f2f15f12elem string
					f2f15f12elem = *f2f15f12iter
					f2f15f12 = append(f2f15f12, &f2f15f12elem)
				}
				f2f15.SetLocalStorageTypes(f2f15f12)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCPU != nil {
				f2f15f13 := &svcsdk.MemoryGiBPerVCpuRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCPU.Max != nil {
					f2f15f13.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCPU.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCPU.Min != nil {
					f2f15f13.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCPU.Min)
				}
				f2f15.SetMemoryGiBPerVCpu(f2f15f13)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryMiB != nil {
				f2f15f14 := &svcsdk.MemoryMiBRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max != nil {
					f2f15f14.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min != nil {
					f2f15f14.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min)
				}
				f2f15.SetMemoryMiB(f2f15f14)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount != nil {
				f2f15f15 := &svcsdk.NetworkInterfaceCountRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max != nil {
					f2f15f15.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min != nil {
					f2f15f15.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min)
				}
				f2f15.SetNetworkInterfaceCount(f2f15f15)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
				f2f15.SetOnDemandMaxPricePercentageOverLowestPrice(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport != nil {
				f2f15.SetRequireHibernateSupport(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
				f2f15.SetSpotMaxPricePercentageOverLowestPrice(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB != nil {
				f2f15f19 := &svcsdk.TotalLocalStorageGBRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max != nil {
					f2f15f19.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min != nil {
					f2f15f19.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min)
				}
				f2f15.SetTotalLocalStorageGB(f2f15f19)
			}
			if r.ko.Spec.LaunchTemplateData.InstanceRequirements.VCPUCount != nil {
				f2f15f20 := &svcsdk.VCpuCountRangeRequest{}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.VCPUCount.Max != nil {
					f2f15f20.SetMax(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.VCPUCount.Max)
				}
				if r.ko.Spec.LaunchTemplateData.InstanceRequirements.VCPUCount.Min != nil {
					f2f15f20.SetMin(*r.ko.Spec.LaunchTemplateData.InstanceRequirements.VCPUCount.Min)
				}
				f2f15.SetVCpuCount(f2f15f20)
			}
			f2.SetInstanceRequirements(f2f15)
		}
		if r.ko.Spec.LaunchTemplateData.InstanceType != nil {
			f2.SetInstanceType(*r.ko.Spec.LaunchTemplateData.InstanceType)
		}
		if r.ko.Spec.LaunchTemplateData.KernelID != nil {
			f2.SetKernelId(*r.ko.Spec.LaunchTemplateData.KernelID)
		}
		if r.ko.Spec.LaunchTemplateData.KeyName != nil {
			f2.SetKeyName(*r.ko.Spec.LaunchTemplateData.KeyName)
		}
		if r.ko.Spec.LaunchTemplateData.LicenseSpecifications != nil {
			f2f19 := []*svcsdk.LaunchTemplateLicenseConfigurationRequest{}
			for _, f2f19iter := range r.ko.Spec.LaunchTemplateData.LicenseSpecifications {
				f2f19elem := &svcsdk.LaunchTemplateLicenseConfigurationRequest{}
				if f2f19iter.LicenseConfigurationARN != nil {
					f2f19elem.SetLicenseConfigurationArn(*f2f19iter.LicenseConfigurationARN)
				}
				f2f19 = append(f2f19, f2f19elem)
			}
			f2.SetLicenseSpecifications(f2f19)
		}
		if r.ko.Spec.LaunchTemplateData.MaintenanceOptions != nil {
			f2f20 := &svcsdk.LaunchTemplateInstanceMaintenanceOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.MaintenanceOptions.AutoRecovery != nil {
				f2f20.SetAutoRecovery(*r.ko.Spec.LaunchTemplateData.MaintenanceOptions.AutoRecovery)
			}
			f2.SetMaintenanceOptions(f2f20)
		}
		if r.ko.Spec.LaunchTemplateData.MetadataOptions != nil {
			f2f21 := &svcsdk.LaunchTemplateInstanceMetadataOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPEndpoint != nil {
				f2f21.SetHttpEndpoint(*r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPEndpoint)
			}
			if r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPProtocolIPv6 != nil {
				f2f21.SetHttpProtocolIpv6(*r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPProtocolIPv6)
			}
			if r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPPutResponseHopLimit != nil {
				f2f21.SetHttpPutResponseHopLimit(*r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPPutResponseHopLimit)
			}
			if r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPTokens != nil {
				f2f21.SetHttpTokens(*r.ko.Spec.LaunchTemplateData.MetadataOptions.HTTPTokens)
			}
			if r.ko.Spec.LaunchTemplateData.MetadataOptions.InstanceMetadataTags != nil {
				f2f21.SetInstanceMetadataTags(*r.ko.Spec.LaunchTemplateData.MetadataOptions.InstanceMetadataTags)
			}
			f2.SetMetadataOptions(f2f21)
		}
		if r.ko.Spec.LaunchTemplateData.Monitoring != nil {
			f2f22 := &svcsdk.LaunchTemplatesMonitoringRequest{}
			if r.ko.Spec.LaunchTemplateData.Monitoring.Enabled != nil {
				f2f22.SetEnabled(*r.ko.Spec.LaunchTemplateData.Monitoring.Enabled)
			}
			f2.SetMonitoring(f2f22)
		}
		if r.ko.Spec.LaunchTemplateData.NetworkInterfaces != nil {
			f2f23 := []*svcsdk.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
			for _, f2f23iter := range r.ko.Spec.LaunchTemplateData.NetworkInterfaces {
				f2f23elem := &svcsdk.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
				if f2f23iter.AssociateCarrierIPAddress != nil {
					f2f23elem.SetAssociateCarrierIpAddress(*f2f23iter.AssociateCarrierIPAddress)
				}
				if f2f23iter.AssociatePublicIPAddress != nil {
					f2f23elem.SetAssociatePublicIpAddress(*f2f23iter.AssociatePublicIPAddress)
				}
				if f2f23iter.DeleteOnTermination != nil {
					f2f23elem.SetDeleteOnTermination(*f2f23iter.DeleteOnTermination)
				}
				if f2f23iter.Description != nil {
					f2f23elem.SetDescription(*f2f23iter.Description)
				}
				if f2f23iter.DeviceIndex != nil {
					f2f23elem.SetDeviceIndex(*f2f23iter.DeviceIndex)
				}
				if f2f23iter.Groups != nil {
					f2f23elemf5 := []*string{}
					for _, f2f23elemf5iter := range f2f23iter.Groups {
						var f2f23elemf5elem string
						f2f23elemf5elem = *f2f23elemf5iter
						f2f23elemf5 = append(f2f23elemf5, &f2f23elemf5elem)
					}
					f2f23elem.SetGroups(f2f23elemf5)
				}
				if f2f23iter.InterfaceType != nil {
					f2f23elem.SetInterfaceType(*f2f23iter.InterfaceType)
				}
				if f2f23iter.IPv4PrefixCount != nil {
					f2f23elem.SetIpv4PrefixCount(*f2f23iter.IPv4PrefixCount)
				}
				if f2f23iter.IPv4Prefixes != nil {
					f2f23elemf8 := []*svcsdk.Ipv4PrefixSpecificationRequest{}
					for _, f2f23elemf8iter := range f2f23iter.IPv4Prefixes {
						f2f23elemf8elem := &svcsdk.Ipv4PrefixSpecificationRequest{}
						if f2f23elemf8iter.IPv4Prefix != nil {
							f2f23elemf8elem.SetIpv4Prefix(*f2f23elemf8iter.IPv4Prefix)
						}
						f2f23elemf8 = append(f2f23elemf8, f2f23elemf8elem)
					}
					f2f23elem.SetIpv4Prefixes(f2f23elemf8)
				}
				if f2f23iter.IPv6AddressCount != nil {
					f2f23elem.SetIpv6AddressCount(*f2f23iter.IPv6AddressCount)
				}
				if f2f23iter.IPv6Addresses != nil {
					f2f23elemf10 := []*svcsdk.InstanceIpv6AddressRequest{}
					for _, f2f23elemf10iter := range f2f23iter.IPv6Addresses {
						f2f23elemf10elem := &svcsdk.InstanceIpv6AddressRequest{}
						if f2f23elemf10iter.IPv6Address != nil {
							f2f23elemf10elem.SetIpv6Address(*f2f23elemf10iter.IPv6Address)
						}
						f2f23elemf10 = append(f2f23elemf10, f2f23elemf10elem)
					}
					f2f23elem.SetIpv6Addresses(f2f23elemf10)
				}
				if f2f23iter.IPv6PrefixCount != nil {
					f2f23elem.SetIpv6PrefixCount(*f2f23iter.IPv6PrefixCount)
				}
				if f2f23iter.IPv6Prefixes != nil {
					f2f23elemf12 := []*svcsdk.Ipv6PrefixSpecificationRequest{}
					for _, f2f23elemf12iter := range f2f23iter.IPv6Prefixes {
						f2f23elemf12elem := &svcsdk.Ipv6PrefixSpecificationRequest{}
						if f2f23elemf12iter.IPv6Prefix != nil {
							f2f23elemf12elem.SetIpv6Prefix(*f2f23elemf12iter.IPv6Prefix)
						}
						f2f23elemf12 = append(f2f23elemf12, f2f23elemf12elem)
					}
					f2f23elem.SetIpv6Prefixes(f2f23elemf12)
				}
				if f2f23iter.NetworkCardIndex != nil {
					f2f23elem.SetNetworkCardIndex(*f2f23iter.NetworkCardIndex)
				}
				if f2f23iter.NetworkInterfaceID != nil {
					f2f23elem.SetNetworkInterfaceId(*f2f23iter.NetworkInterfaceID)
				}
				if f2f23iter.PrivateIPAddress != nil {
					f2f23elem.SetPrivateIpAddress(*f2f23iter.PrivateIPAddress)
				}
				if f2f23iter.PrivateIPAddresses != nil {
					f2f23elemf16 := []*svcsdk.PrivateIpAddressSpecification{}
					for _, f2f23elemf16iter := range f2f23iter.PrivateIPAddresses {
						f2f23elemf16elem := &svcsdk.PrivateIpAddressSpecification{}
						if f2f23elemf16iter.Primary != nil {
							f2f23elemf16elem.SetPrimary(*f2f23elemf16iter.Primary)
						}
						if f2f23elemf16iter.PrivateIPAddress != nil {
							f2f23elemf16elem.SetPrivateIpAddress(*f2f23elemf16iter.PrivateIPAddress)
						}
						f2f23elemf16 = append(f2f23elemf16, f2f23elemf16elem)
					}
					f2f23elem.SetPrivateIpAddresses(f2f23elemf16)
				}
				if f2f23iter.SecondaryPrivateIPAddressCount != nil {
					f2f23elem.SetSecondaryPrivateIpAddressCount(*f2f23iter.SecondaryPrivateIPAddressCount)
				}
				if f2f23iter.SubnetID != nil {
					f2f23elem.SetSubnetId(*f2f23iter.SubnetID)
				}
				f2f23 = append(f2f23, f2f23elem)
			}
			f2.SetNetworkInterfaces(f2f23)
		}
		if r.ko.Spec.LaunchTemplateData.Placement != nil {
			f2f24 := &svcsdk.LaunchTemplatePlacementRequest{}
			if r.ko.Spec.LaunchTemplateData.Placement.Affinity != nil {
				f2f24.SetAffinity(*r.ko.Spec.LaunchTemplateData.Placement.Affinity)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.AvailabilityZone != nil {
				f2f24.SetAvailabilityZone(*r.ko.Spec.LaunchTemplateData.Placement.AvailabilityZone)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.GroupName != nil {
				f2f24.SetGroupName(*r.ko.Spec.LaunchTemplateData.Placement.GroupName)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.HostID != nil {
				f2f24.SetHostId(*r.ko.Spec.LaunchTemplateData.Placement.HostID)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.HostResourceGroupARN != nil {
				f2f24.SetHostResourceGroupArn(*r.ko.Spec.LaunchTemplateData.Placement.HostResourceGroupARN)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.PartitionNumber != nil {
				f2f24.SetPartitionNumber(*r.ko.Spec.LaunchTemplateData.Placement.PartitionNumber)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.SpreadDomain != nil {
				f2f24.SetSpreadDomain(*r.ko.Spec.LaunchTemplateData.Placement.SpreadDomain)
			}
			if r.ko.Spec.LaunchTemplateData.Placement.Tenancy != nil {
				f2f24.SetTenancy(*r.ko.Spec.LaunchTemplateData.Placement.Tenancy)
			}
			f2.SetPlacement(f2f24)
		}
		if r.ko.Spec.LaunchTemplateData.PrivateDNSNameOptions != nil {
			f2f25 := &svcsdk.LaunchTemplatePrivateDnsNameOptionsRequest{}
			if r.ko.Spec.LaunchTemplateData.PrivateDNSNameOptions.EnableResourceNameDNSAAAARecord != nil {
				f2f25.SetEnableResourceNameDnsAAAARecord(*r.ko.Spec.LaunchTemplateData.PrivateDNSNameOptions.EnableResourceNameDNSAAAARecord)
			}
			if r.ko.Spec.LaunchTemplateData.PrivateDNSNameOptions.EnableResourceNameDNSARecord != nil {
				f2f25.SetEnableResourceNameDnsARecord(*r.ko.Spec.LaunchTemplateData.PrivateDNSNameOptions.EnableResourceNameDNSARecord)
			}
			if r.ko.Spec.LaunchTemplateData.PrivateDNSNameOptions.HostnameType != nil {
				f2f25.SetHostnameType(*r.ko.Spec.LaunchTemplateData.PrivateDNSNameOptions.HostnameType)
			}
			f2.SetPrivateDnsNameOptions(f2f25)
		}
		if r.ko.Spec.LaunchTemplateData.RAMDiskID != nil {
			f2.SetRamDiskId(*r.ko.Spec.LaunchTemplateData.RAMDiskID)
		}
		if r.ko.Spec.LaunchTemplateData.SecurityGroupIDs != nil {
			f2f27 := []*string{}
			for _, f2f27iter := range r.ko.Spec.LaunchTemplateData.SecurityGroupIDs {
				var f2f27elem string
				f2f27elem = *f2f27iter
				f2f27 = append(f2f27, &f2f27elem)
			}
			f2.SetSecurityGroupIds(f2f27)
		}
		if r.ko.Spec.LaunchTemplateData.SecurityGroups != nil {
			f2f28 := []*string{}
			for _, f2f28iter := range r.ko.Spec.LaunchTemplateData.SecurityGroups {
				var f2f28elem string
				f2f28elem = *f2f28iter
				f2f28 = append(f2f28, &f2f28elem)
			}
			f2.SetSecurityGroups(f2f28)
		}
		if r.ko.Spec.LaunchTemplateData.TagSpecifications != nil {
			f2f29 := []*svcsdk.LaunchTemplateTagSpecificationRequest{}
			for _, f2f29iter := range r.ko.Spec.LaunchTemplateData.TagSpecifications {
				f2f29elem := &svcsdk.LaunchTemplateTagSpecificationRequest{}
				if f2f29iter.ResourceType != nil {
					f2f29elem.SetResourceType(*f2f29iter.ResourceType)
				}
				if f2f29iter.Tags != nil {
					f2f29elemf1 := []*svcsdk.Tag{}
					for _, f2f29elemf1iter := range f2f29iter.Tags {
						f2f29elemf1elem := &svcsdk.Tag{}
						if f2f29elemf1iter.Key != nil {
							f2f29elemf1elem.SetKey(*f2f29elemf1iter.Key)
						}
						if f2f29elemf1iter.Value != nil {
							f2f29elemf1elem.SetValue(*f2f29elemf1iter.Value)
						}
						f2f29elemf1 = append(f2f29elemf1, f2f29elemf1elem)
					}
					f2f29elem.SetTags(f2f29elemf1)
				}
				f2f29 = append(f2f29, f2f29elem)
			}
			f2.SetTagSpecifications(f2f29)
		}
		if r.ko.Spec.LaunchTemplateData.UserData != nil {
			f2.SetUserData(*r.ko.Spec.LaunchTemplateData.UserData)
		}
		res.SetLaunchTemplateData(f2)
	}
	if r.ko.Spec.Name != nil {
		res.SetLaunchTemplateName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f4 := []*svcsdk.TagSpecification{}
		for _, f4iter := range r.ko.Spec.TagSpecifications {
			f4elem := &svcsdk.TagSpecification{}
			if f4iter.ResourceType != nil {
				f4elem.SetResourceType(*f4iter.ResourceType)
			}
			if f4iter.Tags != nil {
				f4elemf1 := []*svcsdk.Tag{}
				for _, f4elemf1iter := range f4iter.Tags {
					f4elemf1elem := &svcsdk.Tag{}
					if f4elemf1iter.Key != nil {
						f4elemf1elem.SetKey(*f4elemf1iter.Key)
					}
					if f4elemf1iter.Value != nil {
						f4elemf1elem.SetValue(*f4elemf1iter.Value)
					}
					f4elemf1 = append(f4elemf1, f4elemf1elem)
				}
				f4elem.SetTags(f4elemf1)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTagSpecifications(f4)
	}
	if r.ko.Spec.VersionDescription != nil {
		res.SetVersionDescription(*r.ko.Spec.VersionDescription)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	if err := rm.setDefaultTemplateVersion(desired, input); err != nil {
		return nil, err
	}

	var resp *svcsdk.ModifyLaunchTemplateOutput
	_ = resp
	resp, err = rm.sdkapi.ModifyLaunchTemplateWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyLaunchTemplate", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.LaunchTemplate.CreateTime != nil {
		ko.Status.CreateTime = &metav1.Time{*resp.LaunchTemplate.CreateTime}
	} else {
		ko.Status.CreateTime = nil
	}
	if resp.LaunchTemplate.CreatedBy != nil {
		ko.Status.CreatedBy = resp.LaunchTemplate.CreatedBy
	} else {
		ko.Status.CreatedBy = nil
	}
	if resp.LaunchTemplate.DefaultVersionNumber != nil {
		ko.Spec.DefaultVersionNumber = resp.LaunchTemplate.DefaultVersionNumber
	} else {
		ko.Spec.DefaultVersionNumber = nil
	}
	if resp.LaunchTemplate.LatestVersionNumber != nil {
		ko.Status.LatestVersionNumber = resp.LaunchTemplate.LatestVersionNumber
	} else {
		ko.Status.LatestVersionNumber = nil
	}
	if resp.LaunchTemplate.LaunchTemplateId != nil {
		ko.Status.LaunchTemplateID = resp.LaunchTemplate.LaunchTemplateId
	} else {
		ko.Status.LaunchTemplateID = nil
	}
	if resp.LaunchTemplate.Tags != nil {
		f6 := []*svcapitypes.Tag{}
		for _, f6iter := range resp.LaunchTemplate.Tags {
			f6elem := &svcapitypes.Tag{}
			if f6iter.Key != nil {
				f6elem.Key = f6iter.Key
			}
			if f6iter.Value != nil {
				f6elem.Value = f6iter.Value
			}
			f6 = append(f6, f6elem)
		}
		ko.Status.Tags = f6
	} else {
		ko.Status.Tags = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.ModifyLaunchTemplateInput, error) {
	res := &svcsdk.ModifyLaunchTemplateInput{}

	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Status.LaunchTemplateID != nil {
		res.SetLaunchTemplateId(*r.ko.Status.LaunchTemplateID)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	input.LaunchTemplateId = nil
	var resp *svcsdk.DeleteLaunchTemplateOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteLaunchTemplateWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteLaunchTemplate", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteLaunchTemplateInput, error) {
	res := &svcsdk.DeleteLaunchTemplateInput{}

	if r.ko.Spec.DryRun != nil {
		res.SetDryRun(*r.ko.Spec.DryRun)
	}
	if r.ko.Status.LaunchTemplateID != nil {
		res.SetLaunchTemplateId(*r.ko.Status.LaunchTemplateID)
	}
	if r.ko.Spec.Name != nil {
		res.SetLaunchTemplateName(*r.ko.Spec.Name)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.LaunchTemplate,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	if syncCondition == nil && onSuccess {
		syncCondition = &ackv1alpha1.Condition{
			Type:   ackv1alpha1.ConditionTypeResourceSynced,
			Status: corev1.ConditionTrue,
		}
		ko.Status.Conditions = append(ko.Status.Conditions, syncCondition)
	}
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "InvalidParameterValue",
		"InvalidTagSpecification":
		return true
	default:
		return false
	}
}
