// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package vpc

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.VPC{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeVpcsOutput
	resp, err = rm.sdkapi.DescribeVpcsWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeVpcs", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "InvalidVpcID.NotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.Vpcs {
		if elem.CidrBlock != nil {
			ko.Spec.CIDRBlock = elem.CidrBlock
		} else {
			ko.Spec.CIDRBlock = nil
		}
		if elem.CidrBlockAssociationSet != nil {
			f1 := []*svcapitypes.VPCCIDRBlockAssociation{}
			for _, f1iter := range elem.CidrBlockAssociationSet {
				f1elem := &svcapitypes.VPCCIDRBlockAssociation{}
				if f1iter.AssociationId != nil {
					f1elem.AssociationID = f1iter.AssociationId
				}
				if f1iter.CidrBlock != nil {
					f1elem.CIDRBlock = f1iter.CidrBlock
				}
				if f1iter.CidrBlockState != nil {
					f1elemf2 := &svcapitypes.VPCCIDRBlockState{}
					if f1iter.CidrBlockState.State != nil {
						f1elemf2.State = f1iter.CidrBlockState.State
					}
					if f1iter.CidrBlockState.StatusMessage != nil {
						f1elemf2.StatusMessage = f1iter.CidrBlockState.StatusMessage
					}
					f1elem.CIDRBlockState = f1elemf2
				}
				f1 = append(f1, f1elem)
			}
			ko.Status.CIDRBlockAssociationSet = f1
		} else {
			ko.Status.CIDRBlockAssociationSet = nil
		}
		if elem.DhcpOptionsId != nil {
			ko.Status.DHCPOptionsID = elem.DhcpOptionsId
		} else {
			ko.Status.DHCPOptionsID = nil
		}
		if elem.InstanceTenancy != nil {
			ko.Spec.InstanceTenancy = elem.InstanceTenancy
		} else {
			ko.Spec.InstanceTenancy = nil
		}
		if elem.Ipv6CidrBlockAssociationSet != nil {
			f4 := []*svcapitypes.VPCIPv6CIDRBlockAssociation{}
			for _, f4iter := range elem.Ipv6CidrBlockAssociationSet {
				f4elem := &svcapitypes.VPCIPv6CIDRBlockAssociation{}
				if f4iter.AssociationId != nil {
					f4elem.AssociationID = f4iter.AssociationId
				}
				if f4iter.Ipv6CidrBlock != nil {
					f4elem.IPv6CIDRBlock = f4iter.Ipv6CidrBlock
				}
				if f4iter.Ipv6CidrBlockState != nil {
					f4elemf2 := &svcapitypes.VPCCIDRBlockState{}
					if f4iter.Ipv6CidrBlockState.State != nil {
						f4elemf2.State = f4iter.Ipv6CidrBlockState.State
					}
					if f4iter.Ipv6CidrBlockState.StatusMessage != nil {
						f4elemf2.StatusMessage = f4iter.Ipv6CidrBlockState.StatusMessage
					}
					f4elem.IPv6CIDRBlockState = f4elemf2
				}
				if f4iter.Ipv6Pool != nil {
					f4elem.IPv6Pool = f4iter.Ipv6Pool
				}
				if f4iter.NetworkBorderGroup != nil {
					f4elem.NetworkBorderGroup = f4iter.NetworkBorderGroup
				}
				f4 = append(f4, f4elem)
			}
			ko.Status.IPv6CIDRBlockAssociationSet = f4
		} else {
			ko.Status.IPv6CIDRBlockAssociationSet = nil
		}
		if elem.IsDefault != nil {
			ko.Status.IsDefault = elem.IsDefault
		} else {
			ko.Status.IsDefault = nil
		}
		if elem.OwnerId != nil {
			ko.Status.OwnerID = elem.OwnerId
		} else {
			ko.Status.OwnerID = nil
		}
		if elem.State != nil {
			ko.Status.State = elem.State
		} else {
			ko.Status.State = nil
		}
		if elem.Tags != nil {
			f8 := []*svcapitypes.Tag{}
			for _, f8iter := range elem.Tags {
				f8elem := &svcapitypes.Tag{}
				if f8iter.Key != nil {
					f8elem.Key = f8iter.Key
				}
				if f8iter.Value != nil {
					f8elem.Value = f8iter.Value
				}
				f8 = append(f8, f8elem)
			}
			ko.Spec.Tags = f8
		} else {
			ko.Spec.Tags = nil
		}
		if elem.VpcId != nil {
			ko.Status.VPCID = elem.VpcId
		} else {
			ko.Status.VPCID = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	if dnsAttrs, err := rm.getDNSAttributes(ctx, *ko.Status.VPCID); err != nil {
		return nil, err
	} else {
		ko.Spec.EnableDNSSupport = dnsAttrs.EnableSupport
		ko.Spec.EnableDNSHostnames = dnsAttrs.EnableHostnames
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return r.ko.Status.VPCID == nil

}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeVpcsInput, error) {
	res := &svcsdk.DescribeVpcsInput{}

	if r.ko.Status.VPCID != nil {
		f4 := []*string{}
		f4 = append(f4, r.ko.Status.VPCID)
		res.SetVpcIds(f4)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	updateTagSpecificationsInCreateRequest(desired, input)

	var resp *svcsdk.CreateVpcOutput
	_ = resp
	resp, err = rm.sdkapi.CreateVpcWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateVpc", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Vpc.CidrBlock != nil {
		ko.Spec.CIDRBlock = resp.Vpc.CidrBlock
	} else {
		ko.Spec.CIDRBlock = nil
	}
	if resp.Vpc.CidrBlockAssociationSet != nil {
		f1 := []*svcapitypes.VPCCIDRBlockAssociation{}
		for _, f1iter := range resp.Vpc.CidrBlockAssociationSet {
			f1elem := &svcapitypes.VPCCIDRBlockAssociation{}
			if f1iter.AssociationId != nil {
				f1elem.AssociationID = f1iter.AssociationId
			}
			if f1iter.CidrBlock != nil {
				f1elem.CIDRBlock = f1iter.CidrBlock
			}
			if f1iter.CidrBlockState != nil {
				f1elemf2 := &svcapitypes.VPCCIDRBlockState{}
				if f1iter.CidrBlockState.State != nil {
					f1elemf2.State = f1iter.CidrBlockState.State
				}
				if f1iter.CidrBlockState.StatusMessage != nil {
					f1elemf2.StatusMessage = f1iter.CidrBlockState.StatusMessage
				}
				f1elem.CIDRBlockState = f1elemf2
			}
			f1 = append(f1, f1elem)
		}
		ko.Status.CIDRBlockAssociationSet = f1
	} else {
		ko.Status.CIDRBlockAssociationSet = nil
	}
	if resp.Vpc.DhcpOptionsId != nil {
		ko.Status.DHCPOptionsID = resp.Vpc.DhcpOptionsId
	} else {
		ko.Status.DHCPOptionsID = nil
	}
	if resp.Vpc.InstanceTenancy != nil {
		ko.Spec.InstanceTenancy = resp.Vpc.InstanceTenancy
	} else {
		ko.Spec.InstanceTenancy = nil
	}
	if resp.Vpc.Ipv6CidrBlockAssociationSet != nil {
		f4 := []*svcapitypes.VPCIPv6CIDRBlockAssociation{}
		for _, f4iter := range resp.Vpc.Ipv6CidrBlockAssociationSet {
			f4elem := &svcapitypes.VPCIPv6CIDRBlockAssociation{}
			if f4iter.AssociationId != nil {
				f4elem.AssociationID = f4iter.AssociationId
			}
			if f4iter.Ipv6CidrBlock != nil {
				f4elem.IPv6CIDRBlock = f4iter.Ipv6CidrBlock
			}
			if f4iter.Ipv6CidrBlockState != nil {
				f4elemf2 := &svcapitypes.VPCCIDRBlockState{}
				if f4iter.Ipv6CidrBlockState.State != nil {
					f4elemf2.State = f4iter.Ipv6CidrBlockState.State
				}
				if f4iter.Ipv6CidrBlockState.StatusMessage != nil {
					f4elemf2.StatusMessage = f4iter.Ipv6CidrBlockState.StatusMessage
				}
				f4elem.IPv6CIDRBlockState = f4elemf2
			}
			if f4iter.Ipv6Pool != nil {
				f4elem.IPv6Pool = f4iter.Ipv6Pool
			}
			if f4iter.NetworkBorderGroup != nil {
				f4elem.NetworkBorderGroup = f4iter.NetworkBorderGroup
			}
			f4 = append(f4, f4elem)
		}
		ko.Status.IPv6CIDRBlockAssociationSet = f4
	} else {
		ko.Status.IPv6CIDRBlockAssociationSet = nil
	}
	if resp.Vpc.IsDefault != nil {
		ko.Status.IsDefault = resp.Vpc.IsDefault
	} else {
		ko.Status.IsDefault = nil
	}
	if resp.Vpc.OwnerId != nil {
		ko.Status.OwnerID = resp.Vpc.OwnerId
	} else {
		ko.Status.OwnerID = nil
	}
	if resp.Vpc.State != nil {
		ko.Status.State = resp.Vpc.State
	} else {
		ko.Status.State = nil
	}
	if resp.Vpc.Tags != nil {
		f8 := []*svcapitypes.Tag{}
		for _, f8iter := range resp.Vpc.Tags {
			f8elem := &svcapitypes.Tag{}
			if f8iter.Key != nil {
				f8elem.Key = f8iter.Key
			}
			if f8iter.Value != nil {
				f8elem.Value = f8iter.Value
			}
			f8 = append(f8, f8elem)
		}
		ko.Spec.Tags = f8
	} else {
		ko.Spec.Tags = nil
	}
	if resp.Vpc.VpcId != nil {
		ko.Status.VPCID = resp.Vpc.VpcId
	} else {
		ko.Status.VPCID = nil
	}

	rm.setStatusDefaults(ko)
	err = rm.createAttributes(ctx, &resource{ko})
	if err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateVpcInput, error) {
	res := &svcsdk.CreateVpcInput{}

	if r.ko.Spec.AmazonProvidedIPv6CIDRBlock != nil {
		res.SetAmazonProvidedIpv6CidrBlock(*r.ko.Spec.AmazonProvidedIPv6CIDRBlock)
	}
	if r.ko.Spec.CIDRBlock != nil {
		res.SetCidrBlock(*r.ko.Spec.CIDRBlock)
	}
	if r.ko.Spec.InstanceTenancy != nil {
		res.SetInstanceTenancy(*r.ko.Spec.InstanceTenancy)
	}
	if r.ko.Spec.IPv6CIDRBlock != nil {
		res.SetIpv6CidrBlock(*r.ko.Spec.IPv6CIDRBlock)
	}
	if r.ko.Spec.IPv6CIDRBlockNetworkBorderGroup != nil {
		res.SetIpv6CidrBlockNetworkBorderGroup(*r.ko.Spec.IPv6CIDRBlockNetworkBorderGroup)
	}
	if r.ko.Spec.IPv6Pool != nil {
		res.SetIpv6Pool(*r.ko.Spec.IPv6Pool)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return rm.customUpdate(ctx, desired, latest, delta)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteVpcOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteVpcWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteVpc", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteVpcInput, error) {
	res := &svcsdk.DeleteVpcInput{}

	if r.ko.Status.VPCID != nil {
		res.SetVpcId(*r.ko.Status.VPCID)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.VPC,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "InvalidParameterCombination":
		return true
	default:
		return false
	}
}
