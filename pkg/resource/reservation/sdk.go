// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package reservation

import (
	"context"
	"errors"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.Reservation{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer exit(err)
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeInstancesOutput
	resp, err = rm.sdkapi.DescribeInstancesWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeInstances", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.Reservations {
		if elem.Groups != nil {
			f0 := []*svcapitypes.GroupIdentifier{}
			for _, f0iter := range elem.Groups {
				f0elem := &svcapitypes.GroupIdentifier{}
				if f0iter.GroupId != nil {
					f0elem.GroupID = f0iter.GroupId
				}
				if f0iter.GroupName != nil {
					f0elem.GroupName = f0iter.GroupName
				}
				f0 = append(f0, f0elem)
			}
			ko.Status.Groups = f0
		} else {
			ko.Status.Groups = nil
		}
		if elem.Instances != nil {
			f1 := []*svcapitypes.Instance{}
			for _, f1iter := range elem.Instances {
				f1elem := &svcapitypes.Instance{}
				if f1iter.AmiLaunchIndex != nil {
					f1elem.AMILaunchIndex = f1iter.AmiLaunchIndex
				}
				if f1iter.Architecture != nil {
					f1elem.Architecture = f1iter.Architecture
				}
				if f1iter.BlockDeviceMappings != nil {
					f1elemf2 := []*svcapitypes.InstanceBlockDeviceMapping{}
					for _, f1elemf2iter := range f1iter.BlockDeviceMappings {
						f1elemf2elem := &svcapitypes.InstanceBlockDeviceMapping{}
						if f1elemf2iter.DeviceName != nil {
							f1elemf2elem.DeviceName = f1elemf2iter.DeviceName
						}
						if f1elemf2iter.Ebs != nil {
							f1elemf2elemf1 := &svcapitypes.EBSInstanceBlockDevice{}
							if f1elemf2iter.Ebs.AttachTime != nil {
								f1elemf2elemf1.AttachTime = &metav1.Time{*f1elemf2iter.Ebs.AttachTime}
							}
							if f1elemf2iter.Ebs.DeleteOnTermination != nil {
								f1elemf2elemf1.DeleteOnTermination = f1elemf2iter.Ebs.DeleteOnTermination
							}
							if f1elemf2iter.Ebs.Status != nil {
								f1elemf2elemf1.Status = f1elemf2iter.Ebs.Status
							}
							if f1elemf2iter.Ebs.VolumeId != nil {
								f1elemf2elemf1.VolumeID = f1elemf2iter.Ebs.VolumeId
							}
							f1elemf2elem.EBS = f1elemf2elemf1
						}
						f1elemf2 = append(f1elemf2, f1elemf2elem)
					}
					f1elem.BlockDeviceMappings = f1elemf2
				}
				if f1iter.BootMode != nil {
					f1elem.BootMode = f1iter.BootMode
				}
				if f1iter.CapacityReservationId != nil {
					f1elem.CapacityReservationID = f1iter.CapacityReservationId
				}
				if f1iter.CapacityReservationSpecification != nil {
					f1elemf5 := &svcapitypes.CapacityReservationSpecificationResponse{}
					if f1iter.CapacityReservationSpecification.CapacityReservationPreference != nil {
						f1elemf5.CapacityReservationPreference = f1iter.CapacityReservationSpecification.CapacityReservationPreference
					}
					if f1iter.CapacityReservationSpecification.CapacityReservationTarget != nil {
						f1elemf5f1 := &svcapitypes.CapacityReservationTargetResponse{}
						if f1iter.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId != nil {
							f1elemf5f1.CapacityReservationID = f1iter.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId
						}
						if f1iter.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn != nil {
							f1elemf5f1.CapacityReservationResourceGroupARN = f1iter.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn
						}
						f1elemf5.CapacityReservationTarget = f1elemf5f1
					}
					f1elem.CapacityReservationSpecification = f1elemf5
				}
				if f1iter.ClientToken != nil {
					f1elem.ClientToken = f1iter.ClientToken
				}
				if f1iter.CpuOptions != nil {
					f1elemf7 := &svcapitypes.CPUOptions{}
					if f1iter.CpuOptions.CoreCount != nil {
						f1elemf7.CoreCount = f1iter.CpuOptions.CoreCount
					}
					if f1iter.CpuOptions.ThreadsPerCore != nil {
						f1elemf7.ThreadsPerCore = f1iter.CpuOptions.ThreadsPerCore
					}
					f1elem.CPUOptions = f1elemf7
				}
				if f1iter.EbsOptimized != nil {
					f1elem.EBSOptimized = f1iter.EbsOptimized
				}
				if f1iter.ElasticGpuAssociations != nil {
					f1elemf9 := []*svcapitypes.ElasticGPUAssociation{}
					for _, f1elemf9iter := range f1iter.ElasticGpuAssociations {
						f1elemf9elem := &svcapitypes.ElasticGPUAssociation{}
						if f1elemf9iter.ElasticGpuAssociationId != nil {
							f1elemf9elem.ElasticGPUAssociationID = f1elemf9iter.ElasticGpuAssociationId
						}
						if f1elemf9iter.ElasticGpuAssociationState != nil {
							f1elemf9elem.ElasticGPUAssociationState = f1elemf9iter.ElasticGpuAssociationState
						}
						if f1elemf9iter.ElasticGpuAssociationTime != nil {
							f1elemf9elem.ElasticGPUAssociationTime = f1elemf9iter.ElasticGpuAssociationTime
						}
						if f1elemf9iter.ElasticGpuId != nil {
							f1elemf9elem.ElasticGPUID = f1elemf9iter.ElasticGpuId
						}
						f1elemf9 = append(f1elemf9, f1elemf9elem)
					}
					f1elem.ElasticGPUAssociations = f1elemf9
				}
				if f1iter.ElasticInferenceAcceleratorAssociations != nil {
					f1elemf10 := []*svcapitypes.ElasticInferenceAcceleratorAssociation{}
					for _, f1elemf10iter := range f1iter.ElasticInferenceAcceleratorAssociations {
						f1elemf10elem := &svcapitypes.ElasticInferenceAcceleratorAssociation{}
						if f1elemf10iter.ElasticInferenceAcceleratorArn != nil {
							f1elemf10elem.ElasticInferenceAcceleratorARN = f1elemf10iter.ElasticInferenceAcceleratorArn
						}
						if f1elemf10iter.ElasticInferenceAcceleratorAssociationId != nil {
							f1elemf10elem.ElasticInferenceAcceleratorAssociationID = f1elemf10iter.ElasticInferenceAcceleratorAssociationId
						}
						if f1elemf10iter.ElasticInferenceAcceleratorAssociationState != nil {
							f1elemf10elem.ElasticInferenceAcceleratorAssociationState = f1elemf10iter.ElasticInferenceAcceleratorAssociationState
						}
						if f1elemf10iter.ElasticInferenceAcceleratorAssociationTime != nil {
							f1elemf10elem.ElasticInferenceAcceleratorAssociationTime = &metav1.Time{*f1elemf10iter.ElasticInferenceAcceleratorAssociationTime}
						}
						f1elemf10 = append(f1elemf10, f1elemf10elem)
					}
					f1elem.ElasticInferenceAcceleratorAssociations = f1elemf10
				}
				if f1iter.EnaSupport != nil {
					f1elem.ENASupport = f1iter.EnaSupport
				}
				if f1iter.EnclaveOptions != nil {
					f1elemf12 := &svcapitypes.EnclaveOptions{}
					if f1iter.EnclaveOptions.Enabled != nil {
						f1elemf12.Enabled = f1iter.EnclaveOptions.Enabled
					}
					f1elem.EnclaveOptions = f1elemf12
				}
				if f1iter.HibernationOptions != nil {
					f1elemf13 := &svcapitypes.HibernationOptions{}
					if f1iter.HibernationOptions.Configured != nil {
						f1elemf13.Configured = f1iter.HibernationOptions.Configured
					}
					f1elem.HibernationOptions = f1elemf13
				}
				if f1iter.Hypervisor != nil {
					f1elem.Hypervisor = f1iter.Hypervisor
				}
				if f1iter.IamInstanceProfile != nil {
					f1elemf15 := &svcapitypes.IAMInstanceProfile{}
					if f1iter.IamInstanceProfile.Arn != nil {
						f1elemf15.ARN = f1iter.IamInstanceProfile.Arn
					}
					if f1iter.IamInstanceProfile.Id != nil {
						f1elemf15.ID = f1iter.IamInstanceProfile.Id
					}
					f1elem.IAMInstanceProfile = f1elemf15
				}
				if f1iter.ImageId != nil {
					f1elem.ImageID = f1iter.ImageId
				}
				if f1iter.InstanceId != nil {
					f1elem.InstanceID = f1iter.InstanceId
				}
				if f1iter.InstanceLifecycle != nil {
					f1elem.InstanceLifecycle = f1iter.InstanceLifecycle
				}
				if f1iter.InstanceType != nil {
					f1elem.InstanceType = f1iter.InstanceType
				}
				if f1iter.KernelId != nil {
					f1elem.KernelID = f1iter.KernelId
				}
				if f1iter.KeyName != nil {
					f1elem.KeyName = f1iter.KeyName
				}
				if f1iter.LaunchTime != nil {
					f1elem.LaunchTime = &metav1.Time{*f1iter.LaunchTime}
				}
				if f1iter.Licenses != nil {
					f1elemf23 := []*svcapitypes.LicenseConfiguration{}
					for _, f1elemf23iter := range f1iter.Licenses {
						f1elemf23elem := &svcapitypes.LicenseConfiguration{}
						if f1elemf23iter.LicenseConfigurationArn != nil {
							f1elemf23elem.LicenseConfigurationARN = f1elemf23iter.LicenseConfigurationArn
						}
						f1elemf23 = append(f1elemf23, f1elemf23elem)
					}
					f1elem.Licenses = f1elemf23
				}
				if f1iter.MetadataOptions != nil {
					f1elemf24 := &svcapitypes.InstanceMetadataOptionsResponse{}
					if f1iter.MetadataOptions.HttpEndpoint != nil {
						f1elemf24.HTTPEndpoint = f1iter.MetadataOptions.HttpEndpoint
					}
					if f1iter.MetadataOptions.HttpProtocolIpv6 != nil {
						f1elemf24.HTTPProtocolIPv6 = f1iter.MetadataOptions.HttpProtocolIpv6
					}
					if f1iter.MetadataOptions.HttpPutResponseHopLimit != nil {
						f1elemf24.HTTPPutResponseHopLimit = f1iter.MetadataOptions.HttpPutResponseHopLimit
					}
					if f1iter.MetadataOptions.HttpTokens != nil {
						f1elemf24.HTTPTokens = f1iter.MetadataOptions.HttpTokens
					}
					if f1iter.MetadataOptions.State != nil {
						f1elemf24.State = f1iter.MetadataOptions.State
					}
					f1elem.MetadataOptions = f1elemf24
				}
				if f1iter.Monitoring != nil {
					f1elemf25 := &svcapitypes.Monitoring{}
					if f1iter.Monitoring.State != nil {
						f1elemf25.State = f1iter.Monitoring.State
					}
					f1elem.Monitoring = f1elemf25
				}
				if f1iter.NetworkInterfaces != nil {
					f1elemf26 := []*svcapitypes.InstanceNetworkInterface{}
					for _, f1elemf26iter := range f1iter.NetworkInterfaces {
						f1elemf26elem := &svcapitypes.InstanceNetworkInterface{}
						if f1elemf26iter.Association != nil {
							f1elemf26elemf0 := &svcapitypes.InstanceNetworkInterfaceAssociation{}
							if f1elemf26iter.Association.CarrierIp != nil {
								f1elemf26elemf0.CarrierIP = f1elemf26iter.Association.CarrierIp
							}
							if f1elemf26iter.Association.CustomerOwnedIp != nil {
								f1elemf26elemf0.CustomerOwnedIP = f1elemf26iter.Association.CustomerOwnedIp
							}
							if f1elemf26iter.Association.IpOwnerId != nil {
								f1elemf26elemf0.IPOwnerID = f1elemf26iter.Association.IpOwnerId
							}
							if f1elemf26iter.Association.PublicDnsName != nil {
								f1elemf26elemf0.PublicDNSName = f1elemf26iter.Association.PublicDnsName
							}
							if f1elemf26iter.Association.PublicIp != nil {
								f1elemf26elemf0.PublicIP = f1elemf26iter.Association.PublicIp
							}
							f1elemf26elem.Association = f1elemf26elemf0
						}
						if f1elemf26iter.Attachment != nil {
							f1elemf26elemf1 := &svcapitypes.InstanceNetworkInterfaceAttachment{}
							if f1elemf26iter.Attachment.AttachTime != nil {
								f1elemf26elemf1.AttachTime = &metav1.Time{*f1elemf26iter.Attachment.AttachTime}
							}
							if f1elemf26iter.Attachment.AttachmentId != nil {
								f1elemf26elemf1.AttachmentID = f1elemf26iter.Attachment.AttachmentId
							}
							if f1elemf26iter.Attachment.DeleteOnTermination != nil {
								f1elemf26elemf1.DeleteOnTermination = f1elemf26iter.Attachment.DeleteOnTermination
							}
							if f1elemf26iter.Attachment.DeviceIndex != nil {
								f1elemf26elemf1.DeviceIndex = f1elemf26iter.Attachment.DeviceIndex
							}
							if f1elemf26iter.Attachment.NetworkCardIndex != nil {
								f1elemf26elemf1.NetworkCardIndex = f1elemf26iter.Attachment.NetworkCardIndex
							}
							if f1elemf26iter.Attachment.Status != nil {
								f1elemf26elemf1.Status = f1elemf26iter.Attachment.Status
							}
							f1elemf26elem.Attachment = f1elemf26elemf1
						}
						if f1elemf26iter.Description != nil {
							f1elemf26elem.Description = f1elemf26iter.Description
						}
						if f1elemf26iter.Groups != nil {
							f1elemf26elemf3 := []*svcapitypes.GroupIdentifier{}
							for _, f1elemf26elemf3iter := range f1elemf26iter.Groups {
								f1elemf26elemf3elem := &svcapitypes.GroupIdentifier{}
								if f1elemf26elemf3iter.GroupId != nil {
									f1elemf26elemf3elem.GroupID = f1elemf26elemf3iter.GroupId
								}
								if f1elemf26elemf3iter.GroupName != nil {
									f1elemf26elemf3elem.GroupName = f1elemf26elemf3iter.GroupName
								}
								f1elemf26elemf3 = append(f1elemf26elemf3, f1elemf26elemf3elem)
							}
							f1elemf26elem.Groups = f1elemf26elemf3
						}
						if f1elemf26iter.InterfaceType != nil {
							f1elemf26elem.InterfaceType = f1elemf26iter.InterfaceType
						}
						if f1elemf26iter.Ipv4Prefixes != nil {
							f1elemf26elemf5 := []*svcapitypes.InstanceIPv4Prefix{}
							for _, f1elemf26elemf5iter := range f1elemf26iter.Ipv4Prefixes {
								f1elemf26elemf5elem := &svcapitypes.InstanceIPv4Prefix{}
								if f1elemf26elemf5iter.Ipv4Prefix != nil {
									f1elemf26elemf5elem.IPv4Prefix = f1elemf26elemf5iter.Ipv4Prefix
								}
								f1elemf26elemf5 = append(f1elemf26elemf5, f1elemf26elemf5elem)
							}
							f1elemf26elem.IPv4Prefixes = f1elemf26elemf5
						}
						if f1elemf26iter.Ipv6Addresses != nil {
							f1elemf26elemf6 := []*svcapitypes.InstanceIPv6Address{}
							for _, f1elemf26elemf6iter := range f1elemf26iter.Ipv6Addresses {
								f1elemf26elemf6elem := &svcapitypes.InstanceIPv6Address{}
								if f1elemf26elemf6iter.Ipv6Address != nil {
									f1elemf26elemf6elem.IPv6Address = f1elemf26elemf6iter.Ipv6Address
								}
								f1elemf26elemf6 = append(f1elemf26elemf6, f1elemf26elemf6elem)
							}
							f1elemf26elem.IPv6Addresses = f1elemf26elemf6
						}
						if f1elemf26iter.Ipv6Prefixes != nil {
							f1elemf26elemf7 := []*svcapitypes.InstanceIPv6Prefix{}
							for _, f1elemf26elemf7iter := range f1elemf26iter.Ipv6Prefixes {
								f1elemf26elemf7elem := &svcapitypes.InstanceIPv6Prefix{}
								if f1elemf26elemf7iter.Ipv6Prefix != nil {
									f1elemf26elemf7elem.IPv6Prefix = f1elemf26elemf7iter.Ipv6Prefix
								}
								f1elemf26elemf7 = append(f1elemf26elemf7, f1elemf26elemf7elem)
							}
							f1elemf26elem.IPv6Prefixes = f1elemf26elemf7
						}
						if f1elemf26iter.MacAddress != nil {
							f1elemf26elem.MacAddress = f1elemf26iter.MacAddress
						}
						if f1elemf26iter.NetworkInterfaceId != nil {
							f1elemf26elem.NetworkInterfaceID = f1elemf26iter.NetworkInterfaceId
						}
						if f1elemf26iter.OwnerId != nil {
							f1elemf26elem.OwnerID = f1elemf26iter.OwnerId
						}
						if f1elemf26iter.PrivateDnsName != nil {
							f1elemf26elem.PrivateDNSName = f1elemf26iter.PrivateDnsName
						}
						if f1elemf26iter.PrivateIpAddress != nil {
							f1elemf26elem.PrivateIPAddress = f1elemf26iter.PrivateIpAddress
						}
						if f1elemf26iter.PrivateIpAddresses != nil {
							f1elemf26elemf13 := []*svcapitypes.InstancePrivateIPAddress{}
							for _, f1elemf26elemf13iter := range f1elemf26iter.PrivateIpAddresses {
								f1elemf26elemf13elem := &svcapitypes.InstancePrivateIPAddress{}
								if f1elemf26elemf13iter.Association != nil {
									f1elemf26elemf13elemf0 := &svcapitypes.InstanceNetworkInterfaceAssociation{}
									if f1elemf26elemf13iter.Association.CarrierIp != nil {
										f1elemf26elemf13elemf0.CarrierIP = f1elemf26elemf13iter.Association.CarrierIp
									}
									if f1elemf26elemf13iter.Association.CustomerOwnedIp != nil {
										f1elemf26elemf13elemf0.CustomerOwnedIP = f1elemf26elemf13iter.Association.CustomerOwnedIp
									}
									if f1elemf26elemf13iter.Association.IpOwnerId != nil {
										f1elemf26elemf13elemf0.IPOwnerID = f1elemf26elemf13iter.Association.IpOwnerId
									}
									if f1elemf26elemf13iter.Association.PublicDnsName != nil {
										f1elemf26elemf13elemf0.PublicDNSName = f1elemf26elemf13iter.Association.PublicDnsName
									}
									if f1elemf26elemf13iter.Association.PublicIp != nil {
										f1elemf26elemf13elemf0.PublicIP = f1elemf26elemf13iter.Association.PublicIp
									}
									f1elemf26elemf13elem.Association = f1elemf26elemf13elemf0
								}
								if f1elemf26elemf13iter.Primary != nil {
									f1elemf26elemf13elem.Primary = f1elemf26elemf13iter.Primary
								}
								if f1elemf26elemf13iter.PrivateDnsName != nil {
									f1elemf26elemf13elem.PrivateDNSName = f1elemf26elemf13iter.PrivateDnsName
								}
								if f1elemf26elemf13iter.PrivateIpAddress != nil {
									f1elemf26elemf13elem.PrivateIPAddress = f1elemf26elemf13iter.PrivateIpAddress
								}
								f1elemf26elemf13 = append(f1elemf26elemf13, f1elemf26elemf13elem)
							}
							f1elemf26elem.PrivateIPAddresses = f1elemf26elemf13
						}
						if f1elemf26iter.SourceDestCheck != nil {
							f1elemf26elem.SourceDestCheck = f1elemf26iter.SourceDestCheck
						}
						if f1elemf26iter.Status != nil {
							f1elemf26elem.Status = f1elemf26iter.Status
						}
						if f1elemf26iter.SubnetId != nil {
							f1elemf26elem.SubnetID = f1elemf26iter.SubnetId
						}
						if f1elemf26iter.VpcId != nil {
							f1elemf26elem.VPCID = f1elemf26iter.VpcId
						}
						f1elemf26 = append(f1elemf26, f1elemf26elem)
					}
					f1elem.NetworkInterfaces = f1elemf26
				}
				if f1iter.OutpostArn != nil {
					f1elem.OutpostARN = f1iter.OutpostArn
				}
				if f1iter.Placement != nil {
					f1elemf28 := &svcapitypes.Placement{}
					if f1iter.Placement.Affinity != nil {
						f1elemf28.Affinity = f1iter.Placement.Affinity
					}
					if f1iter.Placement.AvailabilityZone != nil {
						f1elemf28.AvailabilityZone = f1iter.Placement.AvailabilityZone
					}
					if f1iter.Placement.GroupName != nil {
						f1elemf28.GroupName = f1iter.Placement.GroupName
					}
					if f1iter.Placement.HostId != nil {
						f1elemf28.HostID = f1iter.Placement.HostId
					}
					if f1iter.Placement.HostResourceGroupArn != nil {
						f1elemf28.HostResourceGroupARN = f1iter.Placement.HostResourceGroupArn
					}
					if f1iter.Placement.PartitionNumber != nil {
						f1elemf28.PartitionNumber = f1iter.Placement.PartitionNumber
					}
					if f1iter.Placement.SpreadDomain != nil {
						f1elemf28.SpreadDomain = f1iter.Placement.SpreadDomain
					}
					if f1iter.Placement.Tenancy != nil {
						f1elemf28.Tenancy = f1iter.Placement.Tenancy
					}
					f1elem.Placement = f1elemf28
				}
				if f1iter.Platform != nil {
					f1elem.Platform = f1iter.Platform
				}
				if f1iter.PlatformDetails != nil {
					f1elem.PlatformDetails = f1iter.PlatformDetails
				}
				if f1iter.PrivateDnsName != nil {
					f1elem.PrivateDNSName = f1iter.PrivateDnsName
				}
				if f1iter.PrivateIpAddress != nil {
					f1elem.PrivateIPAddress = f1iter.PrivateIpAddress
				}
				if f1iter.ProductCodes != nil {
					f1elemf33 := []*svcapitypes.ProductCode{}
					for _, f1elemf33iter := range f1iter.ProductCodes {
						f1elemf33elem := &svcapitypes.ProductCode{}
						if f1elemf33iter.ProductCodeId != nil {
							f1elemf33elem.ProductCodeID = f1elemf33iter.ProductCodeId
						}
						if f1elemf33iter.ProductCodeType != nil {
							f1elemf33elem.ProductCodeType = f1elemf33iter.ProductCodeType
						}
						f1elemf33 = append(f1elemf33, f1elemf33elem)
					}
					f1elem.ProductCodes = f1elemf33
				}
				if f1iter.PublicDnsName != nil {
					f1elem.PublicDNSName = f1iter.PublicDnsName
				}
				if f1iter.PublicIpAddress != nil {
					f1elem.PublicIPAddress = f1iter.PublicIpAddress
				}
				if f1iter.RamdiskId != nil {
					f1elem.RamdiskID = f1iter.RamdiskId
				}
				if f1iter.RootDeviceName != nil {
					f1elem.RootDeviceName = f1iter.RootDeviceName
				}
				if f1iter.RootDeviceType != nil {
					f1elem.RootDeviceType = f1iter.RootDeviceType
				}
				if f1iter.SecurityGroups != nil {
					f1elemf39 := []*svcapitypes.GroupIdentifier{}
					for _, f1elemf39iter := range f1iter.SecurityGroups {
						f1elemf39elem := &svcapitypes.GroupIdentifier{}
						if f1elemf39iter.GroupId != nil {
							f1elemf39elem.GroupID = f1elemf39iter.GroupId
						}
						if f1elemf39iter.GroupName != nil {
							f1elemf39elem.GroupName = f1elemf39iter.GroupName
						}
						f1elemf39 = append(f1elemf39, f1elemf39elem)
					}
					f1elem.SecurityGroups = f1elemf39
				}
				if f1iter.SourceDestCheck != nil {
					f1elem.SourceDestCheck = f1iter.SourceDestCheck
				}
				if f1iter.SpotInstanceRequestId != nil {
					f1elem.SpotInstanceRequestID = f1iter.SpotInstanceRequestId
				}
				if f1iter.SriovNetSupport != nil {
					f1elem.SriovNetSupport = f1iter.SriovNetSupport
				}
				if f1iter.State != nil {
					f1elemf43 := &svcapitypes.InstanceState{}
					if f1iter.State.Code != nil {
						f1elemf43.Code = f1iter.State.Code
					}
					if f1iter.State.Name != nil {
						f1elemf43.Name = f1iter.State.Name
					}
					f1elem.State = f1elemf43
				}
				if f1iter.StateReason != nil {
					f1elemf44 := &svcapitypes.StateReason{}
					if f1iter.StateReason.Code != nil {
						f1elemf44.Code = f1iter.StateReason.Code
					}
					if f1iter.StateReason.Message != nil {
						f1elemf44.Message = f1iter.StateReason.Message
					}
					f1elem.StateReason = f1elemf44
				}
				if f1iter.StateTransitionReason != nil {
					f1elem.StateTransitionReason = f1iter.StateTransitionReason
				}
				if f1iter.SubnetId != nil {
					f1elem.SubnetID = f1iter.SubnetId
				}
				if f1iter.Tags != nil {
					f1elemf47 := []*svcapitypes.Tag{}
					for _, f1elemf47iter := range f1iter.Tags {
						f1elemf47elem := &svcapitypes.Tag{}
						if f1elemf47iter.Key != nil {
							f1elemf47elem.Key = f1elemf47iter.Key
						}
						if f1elemf47iter.Value != nil {
							f1elemf47elem.Value = f1elemf47iter.Value
						}
						f1elemf47 = append(f1elemf47, f1elemf47elem)
					}
					f1elem.Tags = f1elemf47
				}
				if f1iter.UsageOperation != nil {
					f1elem.UsageOperation = f1iter.UsageOperation
				}
				if f1iter.UsageOperationUpdateTime != nil {
					f1elem.UsageOperationUpdateTime = &metav1.Time{*f1iter.UsageOperationUpdateTime}
				}
				if f1iter.VirtualizationType != nil {
					f1elem.VirtualizationType = f1iter.VirtualizationType
				}
				if f1iter.VpcId != nil {
					f1elem.VPCID = f1iter.VpcId
				}
				f1 = append(f1, f1elem)
			}
			ko.Status.Instances = f1
		} else {
			ko.Status.Instances = nil
		}
		if elem.OwnerId != nil {
			ko.Status.OwnerID = elem.OwnerId
		} else {
			ko.Status.OwnerID = nil
		}
		if elem.RequesterId != nil {
			ko.Status.RequesterID = elem.RequesterId
		} else {
			ko.Status.RequesterID = nil
		}
		if elem.ReservationId != nil {
			ko.Status.ReservationID = elem.ReservationId
		} else {
			ko.Status.ReservationID = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return false
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeInstancesInput, error) {
	res := &svcsdk.DescribeInstancesInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer exit(err)
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.Reservation
	_ = resp
	resp, err = rm.sdkapi.RunInstancesWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "RunInstances", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Groups != nil {
		f0 := []*svcapitypes.GroupIdentifier{}
		for _, f0iter := range resp.Groups {
			f0elem := &svcapitypes.GroupIdentifier{}
			if f0iter.GroupId != nil {
				f0elem.GroupID = f0iter.GroupId
			}
			if f0iter.GroupName != nil {
				f0elem.GroupName = f0iter.GroupName
			}
			f0 = append(f0, f0elem)
		}
		ko.Status.Groups = f0
	} else {
		ko.Status.Groups = nil
	}
	if resp.Instances != nil {
		f1 := []*svcapitypes.Instance{}
		for _, f1iter := range resp.Instances {
			f1elem := &svcapitypes.Instance{}
			if f1iter.AmiLaunchIndex != nil {
				f1elem.AMILaunchIndex = f1iter.AmiLaunchIndex
			}
			if f1iter.Architecture != nil {
				f1elem.Architecture = f1iter.Architecture
			}
			if f1iter.BlockDeviceMappings != nil {
				f1elemf2 := []*svcapitypes.InstanceBlockDeviceMapping{}
				for _, f1elemf2iter := range f1iter.BlockDeviceMappings {
					f1elemf2elem := &svcapitypes.InstanceBlockDeviceMapping{}
					if f1elemf2iter.DeviceName != nil {
						f1elemf2elem.DeviceName = f1elemf2iter.DeviceName
					}
					if f1elemf2iter.Ebs != nil {
						f1elemf2elemf1 := &svcapitypes.EBSInstanceBlockDevice{}
						if f1elemf2iter.Ebs.AttachTime != nil {
							f1elemf2elemf1.AttachTime = &metav1.Time{*f1elemf2iter.Ebs.AttachTime}
						}
						if f1elemf2iter.Ebs.DeleteOnTermination != nil {
							f1elemf2elemf1.DeleteOnTermination = f1elemf2iter.Ebs.DeleteOnTermination
						}
						if f1elemf2iter.Ebs.Status != nil {
							f1elemf2elemf1.Status = f1elemf2iter.Ebs.Status
						}
						if f1elemf2iter.Ebs.VolumeId != nil {
							f1elemf2elemf1.VolumeID = f1elemf2iter.Ebs.VolumeId
						}
						f1elemf2elem.EBS = f1elemf2elemf1
					}
					f1elemf2 = append(f1elemf2, f1elemf2elem)
				}
				f1elem.BlockDeviceMappings = f1elemf2
			}
			if f1iter.BootMode != nil {
				f1elem.BootMode = f1iter.BootMode
			}
			if f1iter.CapacityReservationId != nil {
				f1elem.CapacityReservationID = f1iter.CapacityReservationId
			}
			if f1iter.CapacityReservationSpecification != nil {
				f1elemf5 := &svcapitypes.CapacityReservationSpecificationResponse{}
				if f1iter.CapacityReservationSpecification.CapacityReservationPreference != nil {
					f1elemf5.CapacityReservationPreference = f1iter.CapacityReservationSpecification.CapacityReservationPreference
				}
				if f1iter.CapacityReservationSpecification.CapacityReservationTarget != nil {
					f1elemf5f1 := &svcapitypes.CapacityReservationTargetResponse{}
					if f1iter.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId != nil {
						f1elemf5f1.CapacityReservationID = f1iter.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId
					}
					if f1iter.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn != nil {
						f1elemf5f1.CapacityReservationResourceGroupARN = f1iter.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn
					}
					f1elemf5.CapacityReservationTarget = f1elemf5f1
				}
				f1elem.CapacityReservationSpecification = f1elemf5
			}
			if f1iter.ClientToken != nil {
				f1elem.ClientToken = f1iter.ClientToken
			}
			if f1iter.CpuOptions != nil {
				f1elemf7 := &svcapitypes.CPUOptions{}
				if f1iter.CpuOptions.CoreCount != nil {
					f1elemf7.CoreCount = f1iter.CpuOptions.CoreCount
				}
				if f1iter.CpuOptions.ThreadsPerCore != nil {
					f1elemf7.ThreadsPerCore = f1iter.CpuOptions.ThreadsPerCore
				}
				f1elem.CPUOptions = f1elemf7
			}
			if f1iter.EbsOptimized != nil {
				f1elem.EBSOptimized = f1iter.EbsOptimized
			}
			if f1iter.ElasticGpuAssociations != nil {
				f1elemf9 := []*svcapitypes.ElasticGPUAssociation{}
				for _, f1elemf9iter := range f1iter.ElasticGpuAssociations {
					f1elemf9elem := &svcapitypes.ElasticGPUAssociation{}
					if f1elemf9iter.ElasticGpuAssociationId != nil {
						f1elemf9elem.ElasticGPUAssociationID = f1elemf9iter.ElasticGpuAssociationId
					}
					if f1elemf9iter.ElasticGpuAssociationState != nil {
						f1elemf9elem.ElasticGPUAssociationState = f1elemf9iter.ElasticGpuAssociationState
					}
					if f1elemf9iter.ElasticGpuAssociationTime != nil {
						f1elemf9elem.ElasticGPUAssociationTime = f1elemf9iter.ElasticGpuAssociationTime
					}
					if f1elemf9iter.ElasticGpuId != nil {
						f1elemf9elem.ElasticGPUID = f1elemf9iter.ElasticGpuId
					}
					f1elemf9 = append(f1elemf9, f1elemf9elem)
				}
				f1elem.ElasticGPUAssociations = f1elemf9
			}
			if f1iter.ElasticInferenceAcceleratorAssociations != nil {
				f1elemf10 := []*svcapitypes.ElasticInferenceAcceleratorAssociation{}
				for _, f1elemf10iter := range f1iter.ElasticInferenceAcceleratorAssociations {
					f1elemf10elem := &svcapitypes.ElasticInferenceAcceleratorAssociation{}
					if f1elemf10iter.ElasticInferenceAcceleratorArn != nil {
						f1elemf10elem.ElasticInferenceAcceleratorARN = f1elemf10iter.ElasticInferenceAcceleratorArn
					}
					if f1elemf10iter.ElasticInferenceAcceleratorAssociationId != nil {
						f1elemf10elem.ElasticInferenceAcceleratorAssociationID = f1elemf10iter.ElasticInferenceAcceleratorAssociationId
					}
					if f1elemf10iter.ElasticInferenceAcceleratorAssociationState != nil {
						f1elemf10elem.ElasticInferenceAcceleratorAssociationState = f1elemf10iter.ElasticInferenceAcceleratorAssociationState
					}
					if f1elemf10iter.ElasticInferenceAcceleratorAssociationTime != nil {
						f1elemf10elem.ElasticInferenceAcceleratorAssociationTime = &metav1.Time{*f1elemf10iter.ElasticInferenceAcceleratorAssociationTime}
					}
					f1elemf10 = append(f1elemf10, f1elemf10elem)
				}
				f1elem.ElasticInferenceAcceleratorAssociations = f1elemf10
			}
			if f1iter.EnaSupport != nil {
				f1elem.ENASupport = f1iter.EnaSupport
			}
			if f1iter.EnclaveOptions != nil {
				f1elemf12 := &svcapitypes.EnclaveOptions{}
				if f1iter.EnclaveOptions.Enabled != nil {
					f1elemf12.Enabled = f1iter.EnclaveOptions.Enabled
				}
				f1elem.EnclaveOptions = f1elemf12
			}
			if f1iter.HibernationOptions != nil {
				f1elemf13 := &svcapitypes.HibernationOptions{}
				if f1iter.HibernationOptions.Configured != nil {
					f1elemf13.Configured = f1iter.HibernationOptions.Configured
				}
				f1elem.HibernationOptions = f1elemf13
			}
			if f1iter.Hypervisor != nil {
				f1elem.Hypervisor = f1iter.Hypervisor
			}
			if f1iter.IamInstanceProfile != nil {
				f1elemf15 := &svcapitypes.IAMInstanceProfile{}
				if f1iter.IamInstanceProfile.Arn != nil {
					f1elemf15.ARN = f1iter.IamInstanceProfile.Arn
				}
				if f1iter.IamInstanceProfile.Id != nil {
					f1elemf15.ID = f1iter.IamInstanceProfile.Id
				}
				f1elem.IAMInstanceProfile = f1elemf15
			}
			if f1iter.ImageId != nil {
				f1elem.ImageID = f1iter.ImageId
			}
			if f1iter.InstanceId != nil {
				f1elem.InstanceID = f1iter.InstanceId
			}
			if f1iter.InstanceLifecycle != nil {
				f1elem.InstanceLifecycle = f1iter.InstanceLifecycle
			}
			if f1iter.InstanceType != nil {
				f1elem.InstanceType = f1iter.InstanceType
			}
			if f1iter.KernelId != nil {
				f1elem.KernelID = f1iter.KernelId
			}
			if f1iter.KeyName != nil {
				f1elem.KeyName = f1iter.KeyName
			}
			if f1iter.LaunchTime != nil {
				f1elem.LaunchTime = &metav1.Time{*f1iter.LaunchTime}
			}
			if f1iter.Licenses != nil {
				f1elemf23 := []*svcapitypes.LicenseConfiguration{}
				for _, f1elemf23iter := range f1iter.Licenses {
					f1elemf23elem := &svcapitypes.LicenseConfiguration{}
					if f1elemf23iter.LicenseConfigurationArn != nil {
						f1elemf23elem.LicenseConfigurationARN = f1elemf23iter.LicenseConfigurationArn
					}
					f1elemf23 = append(f1elemf23, f1elemf23elem)
				}
				f1elem.Licenses = f1elemf23
			}
			if f1iter.MetadataOptions != nil {
				f1elemf24 := &svcapitypes.InstanceMetadataOptionsResponse{}
				if f1iter.MetadataOptions.HttpEndpoint != nil {
					f1elemf24.HTTPEndpoint = f1iter.MetadataOptions.HttpEndpoint
				}
				if f1iter.MetadataOptions.HttpProtocolIpv6 != nil {
					f1elemf24.HTTPProtocolIPv6 = f1iter.MetadataOptions.HttpProtocolIpv6
				}
				if f1iter.MetadataOptions.HttpPutResponseHopLimit != nil {
					f1elemf24.HTTPPutResponseHopLimit = f1iter.MetadataOptions.HttpPutResponseHopLimit
				}
				if f1iter.MetadataOptions.HttpTokens != nil {
					f1elemf24.HTTPTokens = f1iter.MetadataOptions.HttpTokens
				}
				if f1iter.MetadataOptions.State != nil {
					f1elemf24.State = f1iter.MetadataOptions.State
				}
				f1elem.MetadataOptions = f1elemf24
			}
			if f1iter.Monitoring != nil {
				f1elemf25 := &svcapitypes.Monitoring{}
				if f1iter.Monitoring.State != nil {
					f1elemf25.State = f1iter.Monitoring.State
				}
				f1elem.Monitoring = f1elemf25
			}
			if f1iter.NetworkInterfaces != nil {
				f1elemf26 := []*svcapitypes.InstanceNetworkInterface{}
				for _, f1elemf26iter := range f1iter.NetworkInterfaces {
					f1elemf26elem := &svcapitypes.InstanceNetworkInterface{}
					if f1elemf26iter.Association != nil {
						f1elemf26elemf0 := &svcapitypes.InstanceNetworkInterfaceAssociation{}
						if f1elemf26iter.Association.CarrierIp != nil {
							f1elemf26elemf0.CarrierIP = f1elemf26iter.Association.CarrierIp
						}
						if f1elemf26iter.Association.CustomerOwnedIp != nil {
							f1elemf26elemf0.CustomerOwnedIP = f1elemf26iter.Association.CustomerOwnedIp
						}
						if f1elemf26iter.Association.IpOwnerId != nil {
							f1elemf26elemf0.IPOwnerID = f1elemf26iter.Association.IpOwnerId
						}
						if f1elemf26iter.Association.PublicDnsName != nil {
							f1elemf26elemf0.PublicDNSName = f1elemf26iter.Association.PublicDnsName
						}
						if f1elemf26iter.Association.PublicIp != nil {
							f1elemf26elemf0.PublicIP = f1elemf26iter.Association.PublicIp
						}
						f1elemf26elem.Association = f1elemf26elemf0
					}
					if f1elemf26iter.Attachment != nil {
						f1elemf26elemf1 := &svcapitypes.InstanceNetworkInterfaceAttachment{}
						if f1elemf26iter.Attachment.AttachTime != nil {
							f1elemf26elemf1.AttachTime = &metav1.Time{*f1elemf26iter.Attachment.AttachTime}
						}
						if f1elemf26iter.Attachment.AttachmentId != nil {
							f1elemf26elemf1.AttachmentID = f1elemf26iter.Attachment.AttachmentId
						}
						if f1elemf26iter.Attachment.DeleteOnTermination != nil {
							f1elemf26elemf1.DeleteOnTermination = f1elemf26iter.Attachment.DeleteOnTermination
						}
						if f1elemf26iter.Attachment.DeviceIndex != nil {
							f1elemf26elemf1.DeviceIndex = f1elemf26iter.Attachment.DeviceIndex
						}
						if f1elemf26iter.Attachment.NetworkCardIndex != nil {
							f1elemf26elemf1.NetworkCardIndex = f1elemf26iter.Attachment.NetworkCardIndex
						}
						if f1elemf26iter.Attachment.Status != nil {
							f1elemf26elemf1.Status = f1elemf26iter.Attachment.Status
						}
						f1elemf26elem.Attachment = f1elemf26elemf1
					}
					if f1elemf26iter.Description != nil {
						f1elemf26elem.Description = f1elemf26iter.Description
					}
					if f1elemf26iter.Groups != nil {
						f1elemf26elemf3 := []*svcapitypes.GroupIdentifier{}
						for _, f1elemf26elemf3iter := range f1elemf26iter.Groups {
							f1elemf26elemf3elem := &svcapitypes.GroupIdentifier{}
							if f1elemf26elemf3iter.GroupId != nil {
								f1elemf26elemf3elem.GroupID = f1elemf26elemf3iter.GroupId
							}
							if f1elemf26elemf3iter.GroupName != nil {
								f1elemf26elemf3elem.GroupName = f1elemf26elemf3iter.GroupName
							}
							f1elemf26elemf3 = append(f1elemf26elemf3, f1elemf26elemf3elem)
						}
						f1elemf26elem.Groups = f1elemf26elemf3
					}
					if f1elemf26iter.InterfaceType != nil {
						f1elemf26elem.InterfaceType = f1elemf26iter.InterfaceType
					}
					if f1elemf26iter.Ipv4Prefixes != nil {
						f1elemf26elemf5 := []*svcapitypes.InstanceIPv4Prefix{}
						for _, f1elemf26elemf5iter := range f1elemf26iter.Ipv4Prefixes {
							f1elemf26elemf5elem := &svcapitypes.InstanceIPv4Prefix{}
							if f1elemf26elemf5iter.Ipv4Prefix != nil {
								f1elemf26elemf5elem.IPv4Prefix = f1elemf26elemf5iter.Ipv4Prefix
							}
							f1elemf26elemf5 = append(f1elemf26elemf5, f1elemf26elemf5elem)
						}
						f1elemf26elem.IPv4Prefixes = f1elemf26elemf5
					}
					if f1elemf26iter.Ipv6Addresses != nil {
						f1elemf26elemf6 := []*svcapitypes.InstanceIPv6Address{}
						for _, f1elemf26elemf6iter := range f1elemf26iter.Ipv6Addresses {
							f1elemf26elemf6elem := &svcapitypes.InstanceIPv6Address{}
							if f1elemf26elemf6iter.Ipv6Address != nil {
								f1elemf26elemf6elem.IPv6Address = f1elemf26elemf6iter.Ipv6Address
							}
							f1elemf26elemf6 = append(f1elemf26elemf6, f1elemf26elemf6elem)
						}
						f1elemf26elem.IPv6Addresses = f1elemf26elemf6
					}
					if f1elemf26iter.Ipv6Prefixes != nil {
						f1elemf26elemf7 := []*svcapitypes.InstanceIPv6Prefix{}
						for _, f1elemf26elemf7iter := range f1elemf26iter.Ipv6Prefixes {
							f1elemf26elemf7elem := &svcapitypes.InstanceIPv6Prefix{}
							if f1elemf26elemf7iter.Ipv6Prefix != nil {
								f1elemf26elemf7elem.IPv6Prefix = f1elemf26elemf7iter.Ipv6Prefix
							}
							f1elemf26elemf7 = append(f1elemf26elemf7, f1elemf26elemf7elem)
						}
						f1elemf26elem.IPv6Prefixes = f1elemf26elemf7
					}
					if f1elemf26iter.MacAddress != nil {
						f1elemf26elem.MacAddress = f1elemf26iter.MacAddress
					}
					if f1elemf26iter.NetworkInterfaceId != nil {
						f1elemf26elem.NetworkInterfaceID = f1elemf26iter.NetworkInterfaceId
					}
					if f1elemf26iter.OwnerId != nil {
						f1elemf26elem.OwnerID = f1elemf26iter.OwnerId
					}
					if f1elemf26iter.PrivateDnsName != nil {
						f1elemf26elem.PrivateDNSName = f1elemf26iter.PrivateDnsName
					}
					if f1elemf26iter.PrivateIpAddress != nil {
						f1elemf26elem.PrivateIPAddress = f1elemf26iter.PrivateIpAddress
					}
					if f1elemf26iter.PrivateIpAddresses != nil {
						f1elemf26elemf13 := []*svcapitypes.InstancePrivateIPAddress{}
						for _, f1elemf26elemf13iter := range f1elemf26iter.PrivateIpAddresses {
							f1elemf26elemf13elem := &svcapitypes.InstancePrivateIPAddress{}
							if f1elemf26elemf13iter.Association != nil {
								f1elemf26elemf13elemf0 := &svcapitypes.InstanceNetworkInterfaceAssociation{}
								if f1elemf26elemf13iter.Association.CarrierIp != nil {
									f1elemf26elemf13elemf0.CarrierIP = f1elemf26elemf13iter.Association.CarrierIp
								}
								if f1elemf26elemf13iter.Association.CustomerOwnedIp != nil {
									f1elemf26elemf13elemf0.CustomerOwnedIP = f1elemf26elemf13iter.Association.CustomerOwnedIp
								}
								if f1elemf26elemf13iter.Association.IpOwnerId != nil {
									f1elemf26elemf13elemf0.IPOwnerID = f1elemf26elemf13iter.Association.IpOwnerId
								}
								if f1elemf26elemf13iter.Association.PublicDnsName != nil {
									f1elemf26elemf13elemf0.PublicDNSName = f1elemf26elemf13iter.Association.PublicDnsName
								}
								if f1elemf26elemf13iter.Association.PublicIp != nil {
									f1elemf26elemf13elemf0.PublicIP = f1elemf26elemf13iter.Association.PublicIp
								}
								f1elemf26elemf13elem.Association = f1elemf26elemf13elemf0
							}
							if f1elemf26elemf13iter.Primary != nil {
								f1elemf26elemf13elem.Primary = f1elemf26elemf13iter.Primary
							}
							if f1elemf26elemf13iter.PrivateDnsName != nil {
								f1elemf26elemf13elem.PrivateDNSName = f1elemf26elemf13iter.PrivateDnsName
							}
							if f1elemf26elemf13iter.PrivateIpAddress != nil {
								f1elemf26elemf13elem.PrivateIPAddress = f1elemf26elemf13iter.PrivateIpAddress
							}
							f1elemf26elemf13 = append(f1elemf26elemf13, f1elemf26elemf13elem)
						}
						f1elemf26elem.PrivateIPAddresses = f1elemf26elemf13
					}
					if f1elemf26iter.SourceDestCheck != nil {
						f1elemf26elem.SourceDestCheck = f1elemf26iter.SourceDestCheck
					}
					if f1elemf26iter.Status != nil {
						f1elemf26elem.Status = f1elemf26iter.Status
					}
					if f1elemf26iter.SubnetId != nil {
						f1elemf26elem.SubnetID = f1elemf26iter.SubnetId
					}
					if f1elemf26iter.VpcId != nil {
						f1elemf26elem.VPCID = f1elemf26iter.VpcId
					}
					f1elemf26 = append(f1elemf26, f1elemf26elem)
				}
				f1elem.NetworkInterfaces = f1elemf26
			}
			if f1iter.OutpostArn != nil {
				f1elem.OutpostARN = f1iter.OutpostArn
			}
			if f1iter.Placement != nil {
				f1elemf28 := &svcapitypes.Placement{}
				if f1iter.Placement.Affinity != nil {
					f1elemf28.Affinity = f1iter.Placement.Affinity
				}
				if f1iter.Placement.AvailabilityZone != nil {
					f1elemf28.AvailabilityZone = f1iter.Placement.AvailabilityZone
				}
				if f1iter.Placement.GroupName != nil {
					f1elemf28.GroupName = f1iter.Placement.GroupName
				}
				if f1iter.Placement.HostId != nil {
					f1elemf28.HostID = f1iter.Placement.HostId
				}
				if f1iter.Placement.HostResourceGroupArn != nil {
					f1elemf28.HostResourceGroupARN = f1iter.Placement.HostResourceGroupArn
				}
				if f1iter.Placement.PartitionNumber != nil {
					f1elemf28.PartitionNumber = f1iter.Placement.PartitionNumber
				}
				if f1iter.Placement.SpreadDomain != nil {
					f1elemf28.SpreadDomain = f1iter.Placement.SpreadDomain
				}
				if f1iter.Placement.Tenancy != nil {
					f1elemf28.Tenancy = f1iter.Placement.Tenancy
				}
				f1elem.Placement = f1elemf28
			}
			if f1iter.Platform != nil {
				f1elem.Platform = f1iter.Platform
			}
			if f1iter.PlatformDetails != nil {
				f1elem.PlatformDetails = f1iter.PlatformDetails
			}
			if f1iter.PrivateDnsName != nil {
				f1elem.PrivateDNSName = f1iter.PrivateDnsName
			}
			if f1iter.PrivateIpAddress != nil {
				f1elem.PrivateIPAddress = f1iter.PrivateIpAddress
			}
			if f1iter.ProductCodes != nil {
				f1elemf33 := []*svcapitypes.ProductCode{}
				for _, f1elemf33iter := range f1iter.ProductCodes {
					f1elemf33elem := &svcapitypes.ProductCode{}
					if f1elemf33iter.ProductCodeId != nil {
						f1elemf33elem.ProductCodeID = f1elemf33iter.ProductCodeId
					}
					if f1elemf33iter.ProductCodeType != nil {
						f1elemf33elem.ProductCodeType = f1elemf33iter.ProductCodeType
					}
					f1elemf33 = append(f1elemf33, f1elemf33elem)
				}
				f1elem.ProductCodes = f1elemf33
			}
			if f1iter.PublicDnsName != nil {
				f1elem.PublicDNSName = f1iter.PublicDnsName
			}
			if f1iter.PublicIpAddress != nil {
				f1elem.PublicIPAddress = f1iter.PublicIpAddress
			}
			if f1iter.RamdiskId != nil {
				f1elem.RamdiskID = f1iter.RamdiskId
			}
			if f1iter.RootDeviceName != nil {
				f1elem.RootDeviceName = f1iter.RootDeviceName
			}
			if f1iter.RootDeviceType != nil {
				f1elem.RootDeviceType = f1iter.RootDeviceType
			}
			if f1iter.SecurityGroups != nil {
				f1elemf39 := []*svcapitypes.GroupIdentifier{}
				for _, f1elemf39iter := range f1iter.SecurityGroups {
					f1elemf39elem := &svcapitypes.GroupIdentifier{}
					if f1elemf39iter.GroupId != nil {
						f1elemf39elem.GroupID = f1elemf39iter.GroupId
					}
					if f1elemf39iter.GroupName != nil {
						f1elemf39elem.GroupName = f1elemf39iter.GroupName
					}
					f1elemf39 = append(f1elemf39, f1elemf39elem)
				}
				f1elem.SecurityGroups = f1elemf39
			}
			if f1iter.SourceDestCheck != nil {
				f1elem.SourceDestCheck = f1iter.SourceDestCheck
			}
			if f1iter.SpotInstanceRequestId != nil {
				f1elem.SpotInstanceRequestID = f1iter.SpotInstanceRequestId
			}
			if f1iter.SriovNetSupport != nil {
				f1elem.SriovNetSupport = f1iter.SriovNetSupport
			}
			if f1iter.State != nil {
				f1elemf43 := &svcapitypes.InstanceState{}
				if f1iter.State.Code != nil {
					f1elemf43.Code = f1iter.State.Code
				}
				if f1iter.State.Name != nil {
					f1elemf43.Name = f1iter.State.Name
				}
				f1elem.State = f1elemf43
			}
			if f1iter.StateReason != nil {
				f1elemf44 := &svcapitypes.StateReason{}
				if f1iter.StateReason.Code != nil {
					f1elemf44.Code = f1iter.StateReason.Code
				}
				if f1iter.StateReason.Message != nil {
					f1elemf44.Message = f1iter.StateReason.Message
				}
				f1elem.StateReason = f1elemf44
			}
			if f1iter.StateTransitionReason != nil {
				f1elem.StateTransitionReason = f1iter.StateTransitionReason
			}
			if f1iter.SubnetId != nil {
				f1elem.SubnetID = f1iter.SubnetId
			}
			if f1iter.Tags != nil {
				f1elemf47 := []*svcapitypes.Tag{}
				for _, f1elemf47iter := range f1iter.Tags {
					f1elemf47elem := &svcapitypes.Tag{}
					if f1elemf47iter.Key != nil {
						f1elemf47elem.Key = f1elemf47iter.Key
					}
					if f1elemf47iter.Value != nil {
						f1elemf47elem.Value = f1elemf47iter.Value
					}
					f1elemf47 = append(f1elemf47, f1elemf47elem)
				}
				f1elem.Tags = f1elemf47
			}
			if f1iter.UsageOperation != nil {
				f1elem.UsageOperation = f1iter.UsageOperation
			}
			if f1iter.UsageOperationUpdateTime != nil {
				f1elem.UsageOperationUpdateTime = &metav1.Time{*f1iter.UsageOperationUpdateTime}
			}
			if f1iter.VirtualizationType != nil {
				f1elem.VirtualizationType = f1iter.VirtualizationType
			}
			if f1iter.VpcId != nil {
				f1elem.VPCID = f1iter.VpcId
			}
			f1 = append(f1, f1elem)
		}
		ko.Status.Instances = f1
	} else {
		ko.Status.Instances = nil
	}
	if resp.OwnerId != nil {
		ko.Status.OwnerID = resp.OwnerId
	} else {
		ko.Status.OwnerID = nil
	}
	if resp.RequesterId != nil {
		ko.Status.RequesterID = resp.RequesterId
	} else {
		ko.Status.RequesterID = nil
	}
	if resp.ReservationId != nil {
		ko.Status.ReservationID = resp.ReservationId
	} else {
		ko.Status.ReservationID = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.RunInstancesInput, error) {
	res := &svcsdk.RunInstancesInput{}

	if r.ko.Spec.AdditionalInfo != nil {
		res.SetAdditionalInfo(*r.ko.Spec.AdditionalInfo)
	}
	if r.ko.Spec.BlockDeviceMappings != nil {
		f1 := []*svcsdk.BlockDeviceMapping{}
		for _, f1iter := range r.ko.Spec.BlockDeviceMappings {
			f1elem := &svcsdk.BlockDeviceMapping{}
			if f1iter.DeviceName != nil {
				f1elem.SetDeviceName(*f1iter.DeviceName)
			}
			if f1iter.EBS != nil {
				f1elemf1 := &svcsdk.EbsBlockDevice{}
				if f1iter.EBS.DeleteOnTermination != nil {
					f1elemf1.SetDeleteOnTermination(*f1iter.EBS.DeleteOnTermination)
				}
				if f1iter.EBS.Encrypted != nil {
					f1elemf1.SetEncrypted(*f1iter.EBS.Encrypted)
				}
				if f1iter.EBS.IOPS != nil {
					f1elemf1.SetIops(*f1iter.EBS.IOPS)
				}
				if f1iter.EBS.KMSKeyID != nil {
					f1elemf1.SetKmsKeyId(*f1iter.EBS.KMSKeyID)
				}
				if f1iter.EBS.OutpostARN != nil {
					f1elemf1.SetOutpostArn(*f1iter.EBS.OutpostARN)
				}
				if f1iter.EBS.SnapshotID != nil {
					f1elemf1.SetSnapshotId(*f1iter.EBS.SnapshotID)
				}
				if f1iter.EBS.Throughput != nil {
					f1elemf1.SetThroughput(*f1iter.EBS.Throughput)
				}
				if f1iter.EBS.VolumeSize != nil {
					f1elemf1.SetVolumeSize(*f1iter.EBS.VolumeSize)
				}
				if f1iter.EBS.VolumeType != nil {
					f1elemf1.SetVolumeType(*f1iter.EBS.VolumeType)
				}
				f1elem.SetEbs(f1elemf1)
			}
			if f1iter.NoDevice != nil {
				f1elem.SetNoDevice(*f1iter.NoDevice)
			}
			if f1iter.VirtualName != nil {
				f1elem.SetVirtualName(*f1iter.VirtualName)
			}
			f1 = append(f1, f1elem)
		}
		res.SetBlockDeviceMappings(f1)
	}
	if r.ko.Spec.CapacityReservationSpecification != nil {
		f2 := &svcsdk.CapacityReservationSpecification{}
		if r.ko.Spec.CapacityReservationSpecification.CapacityReservationPreference != nil {
			f2.SetCapacityReservationPreference(*r.ko.Spec.CapacityReservationSpecification.CapacityReservationPreference)
		}
		if r.ko.Spec.CapacityReservationSpecification.CapacityReservationTarget != nil {
			f2f1 := &svcsdk.CapacityReservationTarget{}
			if r.ko.Spec.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID != nil {
				f2f1.SetCapacityReservationId(*r.ko.Spec.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID)
			}
			if r.ko.Spec.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN != nil {
				f2f1.SetCapacityReservationResourceGroupArn(*r.ko.Spec.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN)
			}
			f2.SetCapacityReservationTarget(f2f1)
		}
		res.SetCapacityReservationSpecification(f2)
	}
	if r.ko.Spec.ClientToken != nil {
		res.SetClientToken(*r.ko.Spec.ClientToken)
	}
	if r.ko.Spec.CPUOptions != nil {
		f4 := &svcsdk.CpuOptionsRequest{}
		if r.ko.Spec.CPUOptions.CoreCount != nil {
			f4.SetCoreCount(*r.ko.Spec.CPUOptions.CoreCount)
		}
		if r.ko.Spec.CPUOptions.ThreadsPerCore != nil {
			f4.SetThreadsPerCore(*r.ko.Spec.CPUOptions.ThreadsPerCore)
		}
		res.SetCpuOptions(f4)
	}
	if r.ko.Spec.CreditSpecification != nil {
		f5 := &svcsdk.CreditSpecificationRequest{}
		if r.ko.Spec.CreditSpecification.CPUCredits != nil {
			f5.SetCpuCredits(*r.ko.Spec.CreditSpecification.CPUCredits)
		}
		res.SetCreditSpecification(f5)
	}
	if r.ko.Spec.DisableAPITermination != nil {
		res.SetDisableApiTermination(*r.ko.Spec.DisableAPITermination)
	}
	if r.ko.Spec.EBSOptimized != nil {
		res.SetEbsOptimized(*r.ko.Spec.EBSOptimized)
	}
	if r.ko.Spec.ElasticGPUSpecification != nil {
		f8 := []*svcsdk.ElasticGpuSpecification{}
		for _, f8iter := range r.ko.Spec.ElasticGPUSpecification {
			f8elem := &svcsdk.ElasticGpuSpecification{}
			if f8iter.Type != nil {
				f8elem.SetType(*f8iter.Type)
			}
			f8 = append(f8, f8elem)
		}
		res.SetElasticGpuSpecification(f8)
	}
	if r.ko.Spec.ElasticInferenceAccelerators != nil {
		f9 := []*svcsdk.ElasticInferenceAccelerator{}
		for _, f9iter := range r.ko.Spec.ElasticInferenceAccelerators {
			f9elem := &svcsdk.ElasticInferenceAccelerator{}
			if f9iter.Count != nil {
				f9elem.SetCount(*f9iter.Count)
			}
			if f9iter.Type != nil {
				f9elem.SetType(*f9iter.Type)
			}
			f9 = append(f9, f9elem)
		}
		res.SetElasticInferenceAccelerators(f9)
	}
	if r.ko.Spec.EnclaveOptions != nil {
		f10 := &svcsdk.EnclaveOptionsRequest{}
		if r.ko.Spec.EnclaveOptions.Enabled != nil {
			f10.SetEnabled(*r.ko.Spec.EnclaveOptions.Enabled)
		}
		res.SetEnclaveOptions(f10)
	}
	if r.ko.Spec.HibernationOptions != nil {
		f11 := &svcsdk.HibernationOptionsRequest{}
		if r.ko.Spec.HibernationOptions.Configured != nil {
			f11.SetConfigured(*r.ko.Spec.HibernationOptions.Configured)
		}
		res.SetHibernationOptions(f11)
	}
	if r.ko.Spec.IAMInstanceProfile != nil {
		f12 := &svcsdk.IamInstanceProfileSpecification{}
		if r.ko.Spec.IAMInstanceProfile.ARN != nil {
			f12.SetArn(*r.ko.Spec.IAMInstanceProfile.ARN)
		}
		if r.ko.Spec.IAMInstanceProfile.Name != nil {
			f12.SetName(*r.ko.Spec.IAMInstanceProfile.Name)
		}
		res.SetIamInstanceProfile(f12)
	}
	if r.ko.Spec.ImageID != nil {
		res.SetImageId(*r.ko.Spec.ImageID)
	}
	if r.ko.Spec.InstanceInitiatedShutdownBehavior != nil {
		res.SetInstanceInitiatedShutdownBehavior(*r.ko.Spec.InstanceInitiatedShutdownBehavior)
	}
	if r.ko.Spec.InstanceMarketOptions != nil {
		f15 := &svcsdk.InstanceMarketOptionsRequest{}
		if r.ko.Spec.InstanceMarketOptions.MarketType != nil {
			f15.SetMarketType(*r.ko.Spec.InstanceMarketOptions.MarketType)
		}
		if r.ko.Spec.InstanceMarketOptions.SpotOptions != nil {
			f15f1 := &svcsdk.SpotMarketOptions{}
			if r.ko.Spec.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
				f15f1.SetBlockDurationMinutes(*r.ko.Spec.InstanceMarketOptions.SpotOptions.BlockDurationMinutes)
			}
			if r.ko.Spec.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != nil {
				f15f1.SetInstanceInterruptionBehavior(*r.ko.Spec.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior)
			}
			if r.ko.Spec.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
				f15f1.SetMaxPrice(*r.ko.Spec.InstanceMarketOptions.SpotOptions.MaxPrice)
			}
			if r.ko.Spec.InstanceMarketOptions.SpotOptions.SpotInstanceType != nil {
				f15f1.SetSpotInstanceType(*r.ko.Spec.InstanceMarketOptions.SpotOptions.SpotInstanceType)
			}
			if r.ko.Spec.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
				f15f1.SetValidUntil(r.ko.Spec.InstanceMarketOptions.SpotOptions.ValidUntil.Time)
			}
			f15.SetSpotOptions(f15f1)
		}
		res.SetInstanceMarketOptions(f15)
	}
	if r.ko.Spec.InstanceType != nil {
		res.SetInstanceType(*r.ko.Spec.InstanceType)
	}
	if r.ko.Spec.IPv6AddressCount != nil {
		res.SetIpv6AddressCount(*r.ko.Spec.IPv6AddressCount)
	}
	if r.ko.Spec.IPv6Addresses != nil {
		f18 := []*svcsdk.InstanceIpv6Address{}
		for _, f18iter := range r.ko.Spec.IPv6Addresses {
			f18elem := &svcsdk.InstanceIpv6Address{}
			if f18iter.IPv6Address != nil {
				f18elem.SetIpv6Address(*f18iter.IPv6Address)
			}
			f18 = append(f18, f18elem)
		}
		res.SetIpv6Addresses(f18)
	}
	if r.ko.Spec.KernelID != nil {
		res.SetKernelId(*r.ko.Spec.KernelID)
	}
	if r.ko.Spec.KeyName != nil {
		res.SetKeyName(*r.ko.Spec.KeyName)
	}
	if r.ko.Spec.LaunchTemplate != nil {
		f21 := &svcsdk.LaunchTemplateSpecification{}
		if r.ko.Spec.LaunchTemplate.LaunchTemplateID != nil {
			f21.SetLaunchTemplateId(*r.ko.Spec.LaunchTemplate.LaunchTemplateID)
		}
		if r.ko.Spec.LaunchTemplate.LaunchTemplateName != nil {
			f21.SetLaunchTemplateName(*r.ko.Spec.LaunchTemplate.LaunchTemplateName)
		}
		if r.ko.Spec.LaunchTemplate.Version != nil {
			f21.SetVersion(*r.ko.Spec.LaunchTemplate.Version)
		}
		res.SetLaunchTemplate(f21)
	}
	if r.ko.Spec.LicenseSpecifications != nil {
		f22 := []*svcsdk.LicenseConfigurationRequest{}
		for _, f22iter := range r.ko.Spec.LicenseSpecifications {
			f22elem := &svcsdk.LicenseConfigurationRequest{}
			if f22iter.LicenseConfigurationARN != nil {
				f22elem.SetLicenseConfigurationArn(*f22iter.LicenseConfigurationARN)
			}
			f22 = append(f22, f22elem)
		}
		res.SetLicenseSpecifications(f22)
	}
	if r.ko.Spec.MaxCount != nil {
		res.SetMaxCount(*r.ko.Spec.MaxCount)
	}
	if r.ko.Spec.MetadataOptions != nil {
		f24 := &svcsdk.InstanceMetadataOptionsRequest{}
		if r.ko.Spec.MetadataOptions.HTTPEndpoint != nil {
			f24.SetHttpEndpoint(*r.ko.Spec.MetadataOptions.HTTPEndpoint)
		}
		if r.ko.Spec.MetadataOptions.HTTPProtocolIPv6 != nil {
			f24.SetHttpProtocolIpv6(*r.ko.Spec.MetadataOptions.HTTPProtocolIPv6)
		}
		if r.ko.Spec.MetadataOptions.HTTPPutResponseHopLimit != nil {
			f24.SetHttpPutResponseHopLimit(*r.ko.Spec.MetadataOptions.HTTPPutResponseHopLimit)
		}
		if r.ko.Spec.MetadataOptions.HTTPTokens != nil {
			f24.SetHttpTokens(*r.ko.Spec.MetadataOptions.HTTPTokens)
		}
		res.SetMetadataOptions(f24)
	}
	if r.ko.Spec.MinCount != nil {
		res.SetMinCount(*r.ko.Spec.MinCount)
	}
	if r.ko.Spec.Monitoring != nil {
		f26 := &svcsdk.RunInstancesMonitoringEnabled{}
		if r.ko.Spec.Monitoring.Enabled != nil {
			f26.SetEnabled(*r.ko.Spec.Monitoring.Enabled)
		}
		res.SetMonitoring(f26)
	}
	if r.ko.Spec.NetworkInterfaces != nil {
		f27 := []*svcsdk.InstanceNetworkInterfaceSpecification{}
		for _, f27iter := range r.ko.Spec.NetworkInterfaces {
			f27elem := &svcsdk.InstanceNetworkInterfaceSpecification{}
			if f27iter.AssociateCarrierIPAddress != nil {
				f27elem.SetAssociateCarrierIpAddress(*f27iter.AssociateCarrierIPAddress)
			}
			if f27iter.AssociatePublicIPAddress != nil {
				f27elem.SetAssociatePublicIpAddress(*f27iter.AssociatePublicIPAddress)
			}
			if f27iter.DeleteOnTermination != nil {
				f27elem.SetDeleteOnTermination(*f27iter.DeleteOnTermination)
			}
			if f27iter.Description != nil {
				f27elem.SetDescription(*f27iter.Description)
			}
			if f27iter.DeviceIndex != nil {
				f27elem.SetDeviceIndex(*f27iter.DeviceIndex)
			}
			if f27iter.Groups != nil {
				f27elemf5 := []*string{}
				for _, f27elemf5iter := range f27iter.Groups {
					var f27elemf5elem string
					f27elemf5elem = *f27elemf5iter
					f27elemf5 = append(f27elemf5, &f27elemf5elem)
				}
				f27elem.SetGroups(f27elemf5)
			}
			if f27iter.InterfaceType != nil {
				f27elem.SetInterfaceType(*f27iter.InterfaceType)
			}
			if f27iter.IPv4PrefixCount != nil {
				f27elem.SetIpv4PrefixCount(*f27iter.IPv4PrefixCount)
			}
			if f27iter.IPv4Prefixes != nil {
				f27elemf8 := []*svcsdk.Ipv4PrefixSpecificationRequest{}
				for _, f27elemf8iter := range f27iter.IPv4Prefixes {
					f27elemf8elem := &svcsdk.Ipv4PrefixSpecificationRequest{}
					if f27elemf8iter.IPv4Prefix != nil {
						f27elemf8elem.SetIpv4Prefix(*f27elemf8iter.IPv4Prefix)
					}
					f27elemf8 = append(f27elemf8, f27elemf8elem)
				}
				f27elem.SetIpv4Prefixes(f27elemf8)
			}
			if f27iter.IPv6AddressCount != nil {
				f27elem.SetIpv6AddressCount(*f27iter.IPv6AddressCount)
			}
			if f27iter.IPv6Addresses != nil {
				f27elemf10 := []*svcsdk.InstanceIpv6Address{}
				for _, f27elemf10iter := range f27iter.IPv6Addresses {
					f27elemf10elem := &svcsdk.InstanceIpv6Address{}
					if f27elemf10iter.IPv6Address != nil {
						f27elemf10elem.SetIpv6Address(*f27elemf10iter.IPv6Address)
					}
					f27elemf10 = append(f27elemf10, f27elemf10elem)
				}
				f27elem.SetIpv6Addresses(f27elemf10)
			}
			if f27iter.IPv6PrefixCount != nil {
				f27elem.SetIpv6PrefixCount(*f27iter.IPv6PrefixCount)
			}
			if f27iter.IPv6Prefixes != nil {
				f27elemf12 := []*svcsdk.Ipv6PrefixSpecificationRequest{}
				for _, f27elemf12iter := range f27iter.IPv6Prefixes {
					f27elemf12elem := &svcsdk.Ipv6PrefixSpecificationRequest{}
					if f27elemf12iter.IPv6Prefix != nil {
						f27elemf12elem.SetIpv6Prefix(*f27elemf12iter.IPv6Prefix)
					}
					f27elemf12 = append(f27elemf12, f27elemf12elem)
				}
				f27elem.SetIpv6Prefixes(f27elemf12)
			}
			if f27iter.NetworkCardIndex != nil {
				f27elem.SetNetworkCardIndex(*f27iter.NetworkCardIndex)
			}
			if f27iter.NetworkInterfaceID != nil {
				f27elem.SetNetworkInterfaceId(*f27iter.NetworkInterfaceID)
			}
			if f27iter.PrivateIPAddress != nil {
				f27elem.SetPrivateIpAddress(*f27iter.PrivateIPAddress)
			}
			if f27iter.PrivateIPAddresses != nil {
				f27elemf16 := []*svcsdk.PrivateIpAddressSpecification{}
				for _, f27elemf16iter := range f27iter.PrivateIPAddresses {
					f27elemf16elem := &svcsdk.PrivateIpAddressSpecification{}
					if f27elemf16iter.Primary != nil {
						f27elemf16elem.SetPrimary(*f27elemf16iter.Primary)
					}
					if f27elemf16iter.PrivateIPAddress != nil {
						f27elemf16elem.SetPrivateIpAddress(*f27elemf16iter.PrivateIPAddress)
					}
					f27elemf16 = append(f27elemf16, f27elemf16elem)
				}
				f27elem.SetPrivateIpAddresses(f27elemf16)
			}
			if f27iter.SecondaryPrivateIPAddressCount != nil {
				f27elem.SetSecondaryPrivateIpAddressCount(*f27iter.SecondaryPrivateIPAddressCount)
			}
			if f27iter.SubnetID != nil {
				f27elem.SetSubnetId(*f27iter.SubnetID)
			}
			f27 = append(f27, f27elem)
		}
		res.SetNetworkInterfaces(f27)
	}
	if r.ko.Spec.Placement != nil {
		f28 := &svcsdk.Placement{}
		if r.ko.Spec.Placement.Affinity != nil {
			f28.SetAffinity(*r.ko.Spec.Placement.Affinity)
		}
		if r.ko.Spec.Placement.AvailabilityZone != nil {
			f28.SetAvailabilityZone(*r.ko.Spec.Placement.AvailabilityZone)
		}
		if r.ko.Spec.Placement.GroupName != nil {
			f28.SetGroupName(*r.ko.Spec.Placement.GroupName)
		}
		if r.ko.Spec.Placement.HostID != nil {
			f28.SetHostId(*r.ko.Spec.Placement.HostID)
		}
		if r.ko.Spec.Placement.HostResourceGroupARN != nil {
			f28.SetHostResourceGroupArn(*r.ko.Spec.Placement.HostResourceGroupARN)
		}
		if r.ko.Spec.Placement.PartitionNumber != nil {
			f28.SetPartitionNumber(*r.ko.Spec.Placement.PartitionNumber)
		}
		if r.ko.Spec.Placement.SpreadDomain != nil {
			f28.SetSpreadDomain(*r.ko.Spec.Placement.SpreadDomain)
		}
		if r.ko.Spec.Placement.Tenancy != nil {
			f28.SetTenancy(*r.ko.Spec.Placement.Tenancy)
		}
		res.SetPlacement(f28)
	}
	if r.ko.Spec.PrivateIPAddress != nil {
		res.SetPrivateIpAddress(*r.ko.Spec.PrivateIPAddress)
	}
	if r.ko.Spec.RamdiskID != nil {
		res.SetRamdiskId(*r.ko.Spec.RamdiskID)
	}
	if r.ko.Spec.SecurityGroupIDs != nil {
		f31 := []*string{}
		for _, f31iter := range r.ko.Spec.SecurityGroupIDs {
			var f31elem string
			f31elem = *f31iter
			f31 = append(f31, &f31elem)
		}
		res.SetSecurityGroupIds(f31)
	}
	if r.ko.Spec.SecurityGroups != nil {
		f32 := []*string{}
		for _, f32iter := range r.ko.Spec.SecurityGroups {
			var f32elem string
			f32elem = *f32iter
			f32 = append(f32, &f32elem)
		}
		res.SetSecurityGroups(f32)
	}
	if r.ko.Spec.SubnetID != nil {
		res.SetSubnetId(*r.ko.Spec.SubnetID)
	}
	if r.ko.Spec.TagSpecifications != nil {
		f34 := []*svcsdk.TagSpecification{}
		for _, f34iter := range r.ko.Spec.TagSpecifications {
			f34elem := &svcsdk.TagSpecification{}
			if f34iter.ResourceType != nil {
				f34elem.SetResourceType(*f34iter.ResourceType)
			}
			if f34iter.Tags != nil {
				f34elemf1 := []*svcsdk.Tag{}
				for _, f34elemf1iter := range f34iter.Tags {
					f34elemf1elem := &svcsdk.Tag{}
					if f34elemf1iter.Key != nil {
						f34elemf1elem.SetKey(*f34elemf1iter.Key)
					}
					if f34elemf1iter.Value != nil {
						f34elemf1elem.SetValue(*f34elemf1iter.Value)
					}
					f34elemf1 = append(f34elemf1, f34elemf1elem)
				}
				f34elem.SetTags(f34elemf1)
			}
			f34 = append(f34, f34elem)
		}
		res.SetTagSpecifications(f34)
	}
	if r.ko.Spec.UserData != nil {
		res.SetUserData(*r.ko.Spec.UserData)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, ackerr.NotImplemented
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer exit(err)
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.TerminateInstancesOutput
	_ = resp
	resp, err = rm.sdkapi.TerminateInstancesWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "TerminateInstances", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.TerminateInstancesInput, error) {
	res := &svcsdk.TerminateInstancesInput{}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Reservation,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
