// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package instance

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EC2{}
	_ = &svcapitypes.Instance{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DescribeInstancesOutput
	resp, err = rm.sdkapi.DescribeInstancesWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeInstances", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, iter0 := range resp.Reservations {
		for _, elem := range iter0.Instances {
			if elem.AmiLaunchIndex != nil {
				ko.Status.AMILaunchIndex = elem.AmiLaunchIndex
			} else {
				ko.Status.AMILaunchIndex = nil
			}
			if elem.Architecture != nil {
				ko.Status.Architecture = elem.Architecture
			} else {
				ko.Status.Architecture = nil
			}
			if elem.BlockDeviceMappings != nil {
				f2 := []*svcapitypes.BlockDeviceMapping{}
				for _, f2iter := range elem.BlockDeviceMappings {
					f2elem := &svcapitypes.BlockDeviceMapping{}
					if f2iter.DeviceName != nil {
						f2elem.DeviceName = f2iter.DeviceName
					}
					if f2iter.Ebs != nil {
						f2elemf1 := &svcapitypes.EBSBlockDevice{}
						if f2iter.Ebs.DeleteOnTermination != nil {
							f2elemf1.DeleteOnTermination = f2iter.Ebs.DeleteOnTermination
						}
						f2elem.EBS = f2elemf1
					}
					f2 = append(f2, f2elem)
				}
				ko.Spec.BlockDeviceMappings = f2
			} else {
				ko.Spec.BlockDeviceMappings = nil
			}
			if elem.BootMode != nil {
				ko.Status.BootMode = elem.BootMode
			} else {
				ko.Status.BootMode = nil
			}
			if elem.CapacityReservationId != nil {
				ko.Status.CapacityReservationID = elem.CapacityReservationId
			} else {
				ko.Status.CapacityReservationID = nil
			}
			if elem.CapacityReservationSpecification != nil {
				f5 := &svcapitypes.CapacityReservationSpecification{}
				if elem.CapacityReservationSpecification.CapacityReservationPreference != nil {
					f5.CapacityReservationPreference = elem.CapacityReservationSpecification.CapacityReservationPreference
				}
				if elem.CapacityReservationSpecification.CapacityReservationTarget != nil {
					f5f1 := &svcapitypes.CapacityReservationTarget{}
					if elem.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId != nil {
						f5f1.CapacityReservationID = elem.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId
					}
					if elem.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn != nil {
						f5f1.CapacityReservationResourceGroupARN = elem.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn
					}
					f5.CapacityReservationTarget = f5f1
				}
				ko.Spec.CapacityReservationSpecification = f5
			} else {
				ko.Spec.CapacityReservationSpecification = nil
			}
			if elem.CpuOptions != nil {
				f6 := &svcapitypes.CPUOptionsRequest{}
				if elem.CpuOptions.CoreCount != nil {
					f6.CoreCount = elem.CpuOptions.CoreCount
				}
				if elem.CpuOptions.ThreadsPerCore != nil {
					f6.ThreadsPerCore = elem.CpuOptions.ThreadsPerCore
				}
				ko.Spec.CPUOptions = f6
			} else {
				ko.Spec.CPUOptions = nil
			}
			if elem.EbsOptimized != nil {
				ko.Spec.EBSOptimized = elem.EbsOptimized
			} else {
				ko.Spec.EBSOptimized = nil
			}
			if elem.ElasticGpuAssociations != nil {
				f8 := []*svcapitypes.ElasticGPUAssociation{}
				for _, f8iter := range elem.ElasticGpuAssociations {
					f8elem := &svcapitypes.ElasticGPUAssociation{}
					if f8iter.ElasticGpuAssociationId != nil {
						f8elem.ElasticGPUAssociationID = f8iter.ElasticGpuAssociationId
					}
					if f8iter.ElasticGpuAssociationState != nil {
						f8elem.ElasticGPUAssociationState = f8iter.ElasticGpuAssociationState
					}
					if f8iter.ElasticGpuAssociationTime != nil {
						f8elem.ElasticGPUAssociationTime = f8iter.ElasticGpuAssociationTime
					}
					if f8iter.ElasticGpuId != nil {
						f8elem.ElasticGPUID = f8iter.ElasticGpuId
					}
					f8 = append(f8, f8elem)
				}
				ko.Status.ElasticGPUAssociations = f8
			} else {
				ko.Status.ElasticGPUAssociations = nil
			}
			if elem.ElasticInferenceAcceleratorAssociations != nil {
				f9 := []*svcapitypes.ElasticInferenceAcceleratorAssociation{}
				for _, f9iter := range elem.ElasticInferenceAcceleratorAssociations {
					f9elem := &svcapitypes.ElasticInferenceAcceleratorAssociation{}
					if f9iter.ElasticInferenceAcceleratorArn != nil {
						f9elem.ElasticInferenceAcceleratorARN = f9iter.ElasticInferenceAcceleratorArn
					}
					if f9iter.ElasticInferenceAcceleratorAssociationId != nil {
						f9elem.ElasticInferenceAcceleratorAssociationID = f9iter.ElasticInferenceAcceleratorAssociationId
					}
					if f9iter.ElasticInferenceAcceleratorAssociationState != nil {
						f9elem.ElasticInferenceAcceleratorAssociationState = f9iter.ElasticInferenceAcceleratorAssociationState
					}
					if f9iter.ElasticInferenceAcceleratorAssociationTime != nil {
						f9elem.ElasticInferenceAcceleratorAssociationTime = &metav1.Time{*f9iter.ElasticInferenceAcceleratorAssociationTime}
					}
					f9 = append(f9, f9elem)
				}
				ko.Status.ElasticInferenceAcceleratorAssociations = f9
			} else {
				ko.Status.ElasticInferenceAcceleratorAssociations = nil
			}
			if elem.EnaSupport != nil {
				ko.Status.ENASupport = elem.EnaSupport
			} else {
				ko.Status.ENASupport = nil
			}
			if elem.EnclaveOptions != nil {
				f11 := &svcapitypes.EnclaveOptionsRequest{}
				if elem.EnclaveOptions.Enabled != nil {
					f11.Enabled = elem.EnclaveOptions.Enabled
				}
				ko.Spec.EnclaveOptions = f11
			} else {
				ko.Spec.EnclaveOptions = nil
			}
			if elem.HibernationOptions != nil {
				f12 := &svcapitypes.HibernationOptionsRequest{}
				if elem.HibernationOptions.Configured != nil {
					f12.Configured = elem.HibernationOptions.Configured
				}
				ko.Spec.HibernationOptions = f12
			} else {
				ko.Spec.HibernationOptions = nil
			}
			if elem.Hypervisor != nil {
				ko.Status.Hypervisor = elem.Hypervisor
			} else {
				ko.Status.Hypervisor = nil
			}
			if elem.IamInstanceProfile != nil {
				f14 := &svcapitypes.IAMInstanceProfileSpecification{}
				if elem.IamInstanceProfile.Arn != nil {
					f14.ARN = elem.IamInstanceProfile.Arn
				}
				ko.Spec.IAMInstanceProfile = f14
			} else {
				ko.Spec.IAMInstanceProfile = nil
			}
			if elem.ImageId != nil {
				ko.Spec.ImageID = elem.ImageId
			} else {
				ko.Spec.ImageID = nil
			}
			if elem.InstanceId != nil {
				ko.Status.InstanceID = elem.InstanceId
			} else {
				ko.Status.InstanceID = nil
			}
			if elem.InstanceLifecycle != nil {
				ko.Status.InstanceLifecycle = elem.InstanceLifecycle
			} else {
				ko.Status.InstanceLifecycle = nil
			}
			if elem.InstanceType != nil {
				ko.Spec.InstanceType = elem.InstanceType
			} else {
				ko.Spec.InstanceType = nil
			}
			if elem.Ipv6Address != nil {
				ko.Status.IPv6Address = elem.Ipv6Address
			} else {
				ko.Status.IPv6Address = nil
			}
			if elem.KernelId != nil {
				ko.Spec.KernelID = elem.KernelId
			} else {
				ko.Spec.KernelID = nil
			}
			if elem.KeyName != nil {
				ko.Spec.KeyName = elem.KeyName
			} else {
				ko.Spec.KeyName = nil
			}
			if elem.LaunchTime != nil {
				ko.Status.LaunchTime = &metav1.Time{*elem.LaunchTime}
			} else {
				ko.Status.LaunchTime = nil
			}
			if elem.Licenses != nil {
				f23 := []*svcapitypes.LicenseConfiguration{}
				for _, f23iter := range elem.Licenses {
					f23elem := &svcapitypes.LicenseConfiguration{}
					if f23iter.LicenseConfigurationArn != nil {
						f23elem.LicenseConfigurationARN = f23iter.LicenseConfigurationArn
					}
					f23 = append(f23, f23elem)
				}
				ko.Status.Licenses = f23
			} else {
				ko.Status.Licenses = nil
			}
			if elem.MaintenanceOptions != nil {
				f24 := &svcapitypes.InstanceMaintenanceOptionsRequest{}
				if elem.MaintenanceOptions.AutoRecovery != nil {
					f24.AutoRecovery = elem.MaintenanceOptions.AutoRecovery
				}
				ko.Spec.MaintenanceOptions = f24
			} else {
				ko.Spec.MaintenanceOptions = nil
			}
			if elem.MetadataOptions != nil {
				f25 := &svcapitypes.InstanceMetadataOptionsRequest{}
				if elem.MetadataOptions.HttpEndpoint != nil {
					f25.HTTPEndpoint = elem.MetadataOptions.HttpEndpoint
				}
				if elem.MetadataOptions.HttpProtocolIpv6 != nil {
					f25.HTTPProtocolIPv6 = elem.MetadataOptions.HttpProtocolIpv6
				}
				if elem.MetadataOptions.HttpPutResponseHopLimit != nil {
					f25.HTTPPutResponseHopLimit = elem.MetadataOptions.HttpPutResponseHopLimit
				}
				if elem.MetadataOptions.HttpTokens != nil {
					f25.HTTPTokens = elem.MetadataOptions.HttpTokens
				}
				if elem.MetadataOptions.InstanceMetadataTags != nil {
					f25.InstanceMetadataTags = elem.MetadataOptions.InstanceMetadataTags
				}
				ko.Spec.MetadataOptions = f25
			} else {
				ko.Spec.MetadataOptions = nil
			}
			if elem.Monitoring != nil {
				f26 := &svcapitypes.RunInstancesMonitoringEnabled{}
				ko.Spec.Monitoring = f26
			} else {
				ko.Spec.Monitoring = nil
			}
			if elem.NetworkInterfaces != nil {
				f27 := []*svcapitypes.InstanceNetworkInterfaceSpecification{}
				for _, f27iter := range elem.NetworkInterfaces {
					f27elem := &svcapitypes.InstanceNetworkInterfaceSpecification{}
					if f27iter.Description != nil {
						f27elem.Description = f27iter.Description
					}
					if f27iter.InterfaceType != nil {
						f27elem.InterfaceType = f27iter.InterfaceType
					}
					if f27iter.Ipv4Prefixes != nil {
						f27elemf5 := []*svcapitypes.IPv4PrefixSpecificationRequest{}
						for _, f27elemf5iter := range f27iter.Ipv4Prefixes {
							f27elemf5elem := &svcapitypes.IPv4PrefixSpecificationRequest{}
							if f27elemf5iter.Ipv4Prefix != nil {
								f27elemf5elem.IPv4Prefix = f27elemf5iter.Ipv4Prefix
							}
							f27elemf5 = append(f27elemf5, f27elemf5elem)
						}
						f27elem.IPv4Prefixes = f27elemf5
					}
					if f27iter.Ipv6Addresses != nil {
						f27elemf6 := []*svcapitypes.InstanceIPv6Address{}
						for _, f27elemf6iter := range f27iter.Ipv6Addresses {
							f27elemf6elem := &svcapitypes.InstanceIPv6Address{}
							if f27elemf6iter.Ipv6Address != nil {
								f27elemf6elem.IPv6Address = f27elemf6iter.Ipv6Address
							}
							f27elemf6 = append(f27elemf6, f27elemf6elem)
						}
						f27elem.IPv6Addresses = f27elemf6
					}
					if f27iter.Ipv6Prefixes != nil {
						f27elemf7 := []*svcapitypes.IPv6PrefixSpecificationRequest{}
						for _, f27elemf7iter := range f27iter.Ipv6Prefixes {
							f27elemf7elem := &svcapitypes.IPv6PrefixSpecificationRequest{}
							if f27elemf7iter.Ipv6Prefix != nil {
								f27elemf7elem.IPv6Prefix = f27elemf7iter.Ipv6Prefix
							}
							f27elemf7 = append(f27elemf7, f27elemf7elem)
						}
						f27elem.IPv6Prefixes = f27elemf7
					}
					if f27iter.NetworkInterfaceId != nil {
						f27elem.NetworkInterfaceID = f27iter.NetworkInterfaceId
					}
					if f27iter.PrivateIpAddress != nil {
						f27elem.PrivateIPAddress = f27iter.PrivateIpAddress
					}
					if f27iter.PrivateIpAddresses != nil {
						f27elemf13 := []*svcapitypes.PrivateIPAddressSpecification{}
						for _, f27elemf13iter := range f27iter.PrivateIpAddresses {
							f27elemf13elem := &svcapitypes.PrivateIPAddressSpecification{}
							if f27elemf13iter.Primary != nil {
								f27elemf13elem.Primary = f27elemf13iter.Primary
							}
							if f27elemf13iter.PrivateIpAddress != nil {
								f27elemf13elem.PrivateIPAddress = f27elemf13iter.PrivateIpAddress
							}
							f27elemf13 = append(f27elemf13, f27elemf13elem)
						}
						f27elem.PrivateIPAddresses = f27elemf13
					}
					if f27iter.SubnetId != nil {
						f27elem.SubnetID = f27iter.SubnetId
					}
					f27 = append(f27, f27elem)
				}
				ko.Spec.NetworkInterfaces = f27
			} else {
				ko.Spec.NetworkInterfaces = nil
			}
			if elem.OutpostArn != nil {
				ko.Status.OutpostARN = elem.OutpostArn
			} else {
				ko.Status.OutpostARN = nil
			}
			if elem.Placement != nil {
				f29 := &svcapitypes.Placement{}
				if elem.Placement.Affinity != nil {
					f29.Affinity = elem.Placement.Affinity
				}
				if elem.Placement.AvailabilityZone != nil {
					f29.AvailabilityZone = elem.Placement.AvailabilityZone
				}
				if elem.Placement.GroupName != nil {
					f29.GroupName = elem.Placement.GroupName
				}
				if elem.Placement.HostId != nil {
					f29.HostID = elem.Placement.HostId
				}
				if elem.Placement.HostResourceGroupArn != nil {
					f29.HostResourceGroupARN = elem.Placement.HostResourceGroupArn
				}
				if elem.Placement.PartitionNumber != nil {
					f29.PartitionNumber = elem.Placement.PartitionNumber
				}
				if elem.Placement.SpreadDomain != nil {
					f29.SpreadDomain = elem.Placement.SpreadDomain
				}
				if elem.Placement.Tenancy != nil {
					f29.Tenancy = elem.Placement.Tenancy
				}
				ko.Spec.Placement = f29
			} else {
				ko.Spec.Placement = nil
			}
			if elem.Platform != nil {
				ko.Status.Platform = elem.Platform
			} else {
				ko.Status.Platform = nil
			}
			if elem.PlatformDetails != nil {
				ko.Status.PlatformDetails = elem.PlatformDetails
			} else {
				ko.Status.PlatformDetails = nil
			}
			if elem.PrivateDnsName != nil {
				ko.Status.PrivateDNSName = elem.PrivateDnsName
			} else {
				ko.Status.PrivateDNSName = nil
			}
			if elem.PrivateDnsNameOptions != nil {
				f33 := &svcapitypes.PrivateDNSNameOptionsRequest{}
				if elem.PrivateDnsNameOptions.EnableResourceNameDnsAAAARecord != nil {
					f33.EnableResourceNameDNSAAAARecord = elem.PrivateDnsNameOptions.EnableResourceNameDnsAAAARecord
				}
				if elem.PrivateDnsNameOptions.EnableResourceNameDnsARecord != nil {
					f33.EnableResourceNameDNSARecord = elem.PrivateDnsNameOptions.EnableResourceNameDnsARecord
				}
				if elem.PrivateDnsNameOptions.HostnameType != nil {
					f33.HostnameType = elem.PrivateDnsNameOptions.HostnameType
				}
				ko.Spec.PrivateDNSNameOptions = f33
			} else {
				ko.Spec.PrivateDNSNameOptions = nil
			}
			if elem.PrivateIpAddress != nil {
				ko.Spec.PrivateIPAddress = elem.PrivateIpAddress
			} else {
				ko.Spec.PrivateIPAddress = nil
			}
			if elem.ProductCodes != nil {
				f35 := []*svcapitypes.ProductCode{}
				for _, f35iter := range elem.ProductCodes {
					f35elem := &svcapitypes.ProductCode{}
					if f35iter.ProductCodeId != nil {
						f35elem.ProductCodeID = f35iter.ProductCodeId
					}
					if f35iter.ProductCodeType != nil {
						f35elem.ProductCodeType = f35iter.ProductCodeType
					}
					f35 = append(f35, f35elem)
				}
				ko.Status.ProductCodes = f35
			} else {
				ko.Status.ProductCodes = nil
			}
			if elem.PublicDnsName != nil {
				ko.Status.PublicDNSName = elem.PublicDnsName
			} else {
				ko.Status.PublicDNSName = nil
			}
			if elem.PublicIpAddress != nil {
				ko.Status.PublicIPAddress = elem.PublicIpAddress
			} else {
				ko.Status.PublicIPAddress = nil
			}
			if elem.RamdiskId != nil {
				ko.Spec.RAMDiskID = elem.RamdiskId
			} else {
				ko.Spec.RAMDiskID = nil
			}
			if elem.RootDeviceName != nil {
				ko.Status.RootDeviceName = elem.RootDeviceName
			} else {
				ko.Status.RootDeviceName = nil
			}
			if elem.RootDeviceType != nil {
				ko.Status.RootDeviceType = elem.RootDeviceType
			} else {
				ko.Status.RootDeviceType = nil
			}
			if elem.SecurityGroups != nil {
				f41 := []*string{}
				for _, f41iter := range elem.SecurityGroups {
					var f41elem string
					f41elem = *f41iter.GroupName
					f41 = append(f41, &f41elem)
				}
				ko.Spec.SecurityGroups = f41
			} else {
				ko.Spec.SecurityGroups = nil
			}
			if elem.SourceDestCheck != nil {
				ko.Status.SourceDestCheck = elem.SourceDestCheck
			} else {
				ko.Status.SourceDestCheck = nil
			}
			if elem.SpotInstanceRequestId != nil {
				ko.Status.SpotInstanceRequestID = elem.SpotInstanceRequestId
			} else {
				ko.Status.SpotInstanceRequestID = nil
			}
			if elem.SriovNetSupport != nil {
				ko.Status.SRIOVNetSupport = elem.SriovNetSupport
			} else {
				ko.Status.SRIOVNetSupport = nil
			}
			if elem.State != nil {
				f45 := &svcapitypes.InstanceState{}
				if elem.State.Code != nil {
					f45.Code = elem.State.Code
				}
				if elem.State.Name != nil {
					f45.Name = elem.State.Name
				}
				ko.Status.State = f45
			} else {
				ko.Status.State = nil
			}
			if elem.StateReason != nil {
				f46 := &svcapitypes.StateReason{}
				if elem.StateReason.Code != nil {
					f46.Code = elem.StateReason.Code
				}
				if elem.StateReason.Message != nil {
					f46.Message = elem.StateReason.Message
				}
				ko.Status.StateReason = f46
			} else {
				ko.Status.StateReason = nil
			}
			if elem.StateTransitionReason != nil {
				ko.Status.StateTransitionReason = elem.StateTransitionReason
			} else {
				ko.Status.StateTransitionReason = nil
			}
			if elem.SubnetId != nil {
				ko.Spec.SubnetID = elem.SubnetId
			} else {
				ko.Spec.SubnetID = nil
			}
			if elem.Tags != nil {
				f49 := []*svcapitypes.Tag{}
				for _, f49iter := range elem.Tags {
					f49elem := &svcapitypes.Tag{}
					if f49iter.Key != nil {
						f49elem.Key = f49iter.Key
					}
					if f49iter.Value != nil {
						f49elem.Value = f49iter.Value
					}
					f49 = append(f49, f49elem)
				}
				ko.Spec.Tags = f49
			} else {
				ko.Spec.Tags = nil
			}
			if elem.TpmSupport != nil {
				ko.Status.TPMSupport = elem.TpmSupport
			} else {
				ko.Status.TPMSupport = nil
			}
			if elem.UsageOperation != nil {
				ko.Status.UsageOperation = elem.UsageOperation
			} else {
				ko.Status.UsageOperation = nil
			}
			if elem.UsageOperationUpdateTime != nil {
				ko.Status.UsageOperationUpdateTime = &metav1.Time{*elem.UsageOperationUpdateTime}
			} else {
				ko.Status.UsageOperationUpdateTime = nil
			}
			if elem.VirtualizationType != nil {
				ko.Status.VirtualizationType = elem.VirtualizationType
			} else {
				ko.Status.VirtualizationType = nil
			}
			if elem.VpcId != nil {
				ko.Status.VPCID = elem.VpcId
			} else {
				ko.Status.VPCID = nil
			}
			found = true
			break
		}
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)

	toAdd, toDelete := computeTagsDelta(r.ko.Spec.Tags, ko.Spec.Tags)
	if len(toAdd) == 0 && len(toDelete) == 0 {
		// if resource's initial tags and response tags are equal,
		// then assign resource's tags to maintain tag order
		ko.Spec.Tags = r.ko.Spec.Tags
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return r.ko.Status.InstanceID == nil

}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeInstancesInput, error) {
	res := &svcsdk.DescribeInstancesInput{}

	if r.ko.Status.InstanceID != nil {
		f2 := []*string{}
		f2 = append(f2, r.ko.Status.InstanceID)
		res.SetInstanceIds(f2)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	updateTagSpecificationsInCreateRequest(desired, input)

	var resp *svcsdk.Reservation
	_ = resp
	resp, err = rm.sdkapi.RunInstancesWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "RunInstances", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	found := false
	for _, elem := range resp.Instances {
		if elem.AmiLaunchIndex != nil {
			ko.Status.AMILaunchIndex = elem.AmiLaunchIndex
		} else {
			ko.Status.AMILaunchIndex = nil
		}
		if elem.Architecture != nil {
			ko.Status.Architecture = elem.Architecture
		} else {
			ko.Status.Architecture = nil
		}
		if elem.BlockDeviceMappings != nil {
			f2 := []*svcapitypes.BlockDeviceMapping{}
			for _, f2iter := range elem.BlockDeviceMappings {
				f2elem := &svcapitypes.BlockDeviceMapping{}
				if f2iter.DeviceName != nil {
					f2elem.DeviceName = f2iter.DeviceName
				}
				if f2iter.Ebs != nil {
					f2elemf1 := &svcapitypes.EBSBlockDevice{}
					if f2iter.Ebs.DeleteOnTermination != nil {
						f2elemf1.DeleteOnTermination = f2iter.Ebs.DeleteOnTermination
					}
					f2elem.EBS = f2elemf1
				}
				f2 = append(f2, f2elem)
			}
			ko.Spec.BlockDeviceMappings = f2
		} else {
			ko.Spec.BlockDeviceMappings = nil
		}
		if elem.BootMode != nil {
			ko.Status.BootMode = elem.BootMode
		} else {
			ko.Status.BootMode = nil
		}
		if elem.CapacityReservationId != nil {
			ko.Status.CapacityReservationID = elem.CapacityReservationId
		} else {
			ko.Status.CapacityReservationID = nil
		}
		if elem.CapacityReservationSpecification != nil {
			f5 := &svcapitypes.CapacityReservationSpecification{}
			if elem.CapacityReservationSpecification.CapacityReservationPreference != nil {
				f5.CapacityReservationPreference = elem.CapacityReservationSpecification.CapacityReservationPreference
			}
			if elem.CapacityReservationSpecification.CapacityReservationTarget != nil {
				f5f1 := &svcapitypes.CapacityReservationTarget{}
				if elem.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId != nil {
					f5f1.CapacityReservationID = elem.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId
				}
				if elem.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn != nil {
					f5f1.CapacityReservationResourceGroupARN = elem.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn
				}
				f5.CapacityReservationTarget = f5f1
			}
			ko.Spec.CapacityReservationSpecification = f5
		} else {
			ko.Spec.CapacityReservationSpecification = nil
		}
		if elem.CpuOptions != nil {
			f6 := &svcapitypes.CPUOptionsRequest{}
			if elem.CpuOptions.CoreCount != nil {
				f6.CoreCount = elem.CpuOptions.CoreCount
			}
			if elem.CpuOptions.ThreadsPerCore != nil {
				f6.ThreadsPerCore = elem.CpuOptions.ThreadsPerCore
			}
			ko.Spec.CPUOptions = f6
		} else {
			ko.Spec.CPUOptions = nil
		}
		if elem.EbsOptimized != nil {
			ko.Spec.EBSOptimized = elem.EbsOptimized
		} else {
			ko.Spec.EBSOptimized = nil
		}
		if elem.ElasticGpuAssociations != nil {
			f8 := []*svcapitypes.ElasticGPUAssociation{}
			for _, f8iter := range elem.ElasticGpuAssociations {
				f8elem := &svcapitypes.ElasticGPUAssociation{}
				if f8iter.ElasticGpuAssociationId != nil {
					f8elem.ElasticGPUAssociationID = f8iter.ElasticGpuAssociationId
				}
				if f8iter.ElasticGpuAssociationState != nil {
					f8elem.ElasticGPUAssociationState = f8iter.ElasticGpuAssociationState
				}
				if f8iter.ElasticGpuAssociationTime != nil {
					f8elem.ElasticGPUAssociationTime = f8iter.ElasticGpuAssociationTime
				}
				if f8iter.ElasticGpuId != nil {
					f8elem.ElasticGPUID = f8iter.ElasticGpuId
				}
				f8 = append(f8, f8elem)
			}
			ko.Status.ElasticGPUAssociations = f8
		} else {
			ko.Status.ElasticGPUAssociations = nil
		}
		if elem.ElasticInferenceAcceleratorAssociations != nil {
			f9 := []*svcapitypes.ElasticInferenceAcceleratorAssociation{}
			for _, f9iter := range elem.ElasticInferenceAcceleratorAssociations {
				f9elem := &svcapitypes.ElasticInferenceAcceleratorAssociation{}
				if f9iter.ElasticInferenceAcceleratorArn != nil {
					f9elem.ElasticInferenceAcceleratorARN = f9iter.ElasticInferenceAcceleratorArn
				}
				if f9iter.ElasticInferenceAcceleratorAssociationId != nil {
					f9elem.ElasticInferenceAcceleratorAssociationID = f9iter.ElasticInferenceAcceleratorAssociationId
				}
				if f9iter.ElasticInferenceAcceleratorAssociationState != nil {
					f9elem.ElasticInferenceAcceleratorAssociationState = f9iter.ElasticInferenceAcceleratorAssociationState
				}
				if f9iter.ElasticInferenceAcceleratorAssociationTime != nil {
					f9elem.ElasticInferenceAcceleratorAssociationTime = &metav1.Time{*f9iter.ElasticInferenceAcceleratorAssociationTime}
				}
				f9 = append(f9, f9elem)
			}
			ko.Status.ElasticInferenceAcceleratorAssociations = f9
		} else {
			ko.Status.ElasticInferenceAcceleratorAssociations = nil
		}
		if elem.EnaSupport != nil {
			ko.Status.ENASupport = elem.EnaSupport
		} else {
			ko.Status.ENASupport = nil
		}
		if elem.EnclaveOptions != nil {
			f11 := &svcapitypes.EnclaveOptionsRequest{}
			if elem.EnclaveOptions.Enabled != nil {
				f11.Enabled = elem.EnclaveOptions.Enabled
			}
			ko.Spec.EnclaveOptions = f11
		} else {
			ko.Spec.EnclaveOptions = nil
		}
		if elem.HibernationOptions != nil {
			f12 := &svcapitypes.HibernationOptionsRequest{}
			if elem.HibernationOptions.Configured != nil {
				f12.Configured = elem.HibernationOptions.Configured
			}
			ko.Spec.HibernationOptions = f12
		} else {
			ko.Spec.HibernationOptions = nil
		}
		if elem.Hypervisor != nil {
			ko.Status.Hypervisor = elem.Hypervisor
		} else {
			ko.Status.Hypervisor = nil
		}
		if elem.IamInstanceProfile != nil {
			f14 := &svcapitypes.IAMInstanceProfileSpecification{}
			if elem.IamInstanceProfile.Arn != nil {
				f14.ARN = elem.IamInstanceProfile.Arn
			}
			ko.Spec.IAMInstanceProfile = f14
		} else {
			ko.Spec.IAMInstanceProfile = nil
		}
		if elem.ImageId != nil {
			ko.Spec.ImageID = elem.ImageId
		} else {
			ko.Spec.ImageID = nil
		}
		if elem.InstanceId != nil {
			ko.Status.InstanceID = elem.InstanceId
		} else {
			ko.Status.InstanceID = nil
		}
		if elem.InstanceLifecycle != nil {
			ko.Status.InstanceLifecycle = elem.InstanceLifecycle
		} else {
			ko.Status.InstanceLifecycle = nil
		}
		if elem.InstanceType != nil {
			ko.Spec.InstanceType = elem.InstanceType
		} else {
			ko.Spec.InstanceType = nil
		}
		if elem.Ipv6Address != nil {
			ko.Status.IPv6Address = elem.Ipv6Address
		} else {
			ko.Status.IPv6Address = nil
		}
		if elem.KernelId != nil {
			ko.Spec.KernelID = elem.KernelId
		} else {
			ko.Spec.KernelID = nil
		}
		if elem.KeyName != nil {
			ko.Spec.KeyName = elem.KeyName
		} else {
			ko.Spec.KeyName = nil
		}
		if elem.LaunchTime != nil {
			ko.Status.LaunchTime = &metav1.Time{*elem.LaunchTime}
		} else {
			ko.Status.LaunchTime = nil
		}
		if elem.Licenses != nil {
			f23 := []*svcapitypes.LicenseConfiguration{}
			for _, f23iter := range elem.Licenses {
				f23elem := &svcapitypes.LicenseConfiguration{}
				if f23iter.LicenseConfigurationArn != nil {
					f23elem.LicenseConfigurationARN = f23iter.LicenseConfigurationArn
				}
				f23 = append(f23, f23elem)
			}
			ko.Status.Licenses = f23
		} else {
			ko.Status.Licenses = nil
		}
		if elem.MaintenanceOptions != nil {
			f24 := &svcapitypes.InstanceMaintenanceOptionsRequest{}
			if elem.MaintenanceOptions.AutoRecovery != nil {
				f24.AutoRecovery = elem.MaintenanceOptions.AutoRecovery
			}
			ko.Spec.MaintenanceOptions = f24
		} else {
			ko.Spec.MaintenanceOptions = nil
		}
		if elem.MetadataOptions != nil {
			f25 := &svcapitypes.InstanceMetadataOptionsRequest{}
			if elem.MetadataOptions.HttpEndpoint != nil {
				f25.HTTPEndpoint = elem.MetadataOptions.HttpEndpoint
			}
			if elem.MetadataOptions.HttpProtocolIpv6 != nil {
				f25.HTTPProtocolIPv6 = elem.MetadataOptions.HttpProtocolIpv6
			}
			if elem.MetadataOptions.HttpPutResponseHopLimit != nil {
				f25.HTTPPutResponseHopLimit = elem.MetadataOptions.HttpPutResponseHopLimit
			}
			if elem.MetadataOptions.HttpTokens != nil {
				f25.HTTPTokens = elem.MetadataOptions.HttpTokens
			}
			if elem.MetadataOptions.InstanceMetadataTags != nil {
				f25.InstanceMetadataTags = elem.MetadataOptions.InstanceMetadataTags
			}
			ko.Spec.MetadataOptions = f25
		} else {
			ko.Spec.MetadataOptions = nil
		}
		if elem.Monitoring != nil {
			f26 := &svcapitypes.RunInstancesMonitoringEnabled{}
			ko.Spec.Monitoring = f26
		} else {
			ko.Spec.Monitoring = nil
		}
		if elem.NetworkInterfaces != nil {
			f27 := []*svcapitypes.InstanceNetworkInterfaceSpecification{}
			for _, f27iter := range elem.NetworkInterfaces {
				f27elem := &svcapitypes.InstanceNetworkInterfaceSpecification{}
				if f27iter.Description != nil {
					f27elem.Description = f27iter.Description
				}
				if f27iter.InterfaceType != nil {
					f27elem.InterfaceType = f27iter.InterfaceType
				}
				if f27iter.Ipv4Prefixes != nil {
					f27elemf5 := []*svcapitypes.IPv4PrefixSpecificationRequest{}
					for _, f27elemf5iter := range f27iter.Ipv4Prefixes {
						f27elemf5elem := &svcapitypes.IPv4PrefixSpecificationRequest{}
						if f27elemf5iter.Ipv4Prefix != nil {
							f27elemf5elem.IPv4Prefix = f27elemf5iter.Ipv4Prefix
						}
						f27elemf5 = append(f27elemf5, f27elemf5elem)
					}
					f27elem.IPv4Prefixes = f27elemf5
				}
				if f27iter.Ipv6Addresses != nil {
					f27elemf6 := []*svcapitypes.InstanceIPv6Address{}
					for _, f27elemf6iter := range f27iter.Ipv6Addresses {
						f27elemf6elem := &svcapitypes.InstanceIPv6Address{}
						if f27elemf6iter.Ipv6Address != nil {
							f27elemf6elem.IPv6Address = f27elemf6iter.Ipv6Address
						}
						f27elemf6 = append(f27elemf6, f27elemf6elem)
					}
					f27elem.IPv6Addresses = f27elemf6
				}
				if f27iter.Ipv6Prefixes != nil {
					f27elemf7 := []*svcapitypes.IPv6PrefixSpecificationRequest{}
					for _, f27elemf7iter := range f27iter.Ipv6Prefixes {
						f27elemf7elem := &svcapitypes.IPv6PrefixSpecificationRequest{}
						if f27elemf7iter.Ipv6Prefix != nil {
							f27elemf7elem.IPv6Prefix = f27elemf7iter.Ipv6Prefix
						}
						f27elemf7 = append(f27elemf7, f27elemf7elem)
					}
					f27elem.IPv6Prefixes = f27elemf7
				}
				if f27iter.NetworkInterfaceId != nil {
					f27elem.NetworkInterfaceID = f27iter.NetworkInterfaceId
				}
				if f27iter.PrivateIpAddress != nil {
					f27elem.PrivateIPAddress = f27iter.PrivateIpAddress
				}
				if f27iter.PrivateIpAddresses != nil {
					f27elemf13 := []*svcapitypes.PrivateIPAddressSpecification{}
					for _, f27elemf13iter := range f27iter.PrivateIpAddresses {
						f27elemf13elem := &svcapitypes.PrivateIPAddressSpecification{}
						if f27elemf13iter.Primary != nil {
							f27elemf13elem.Primary = f27elemf13iter.Primary
						}
						if f27elemf13iter.PrivateIpAddress != nil {
							f27elemf13elem.PrivateIPAddress = f27elemf13iter.PrivateIpAddress
						}
						f27elemf13 = append(f27elemf13, f27elemf13elem)
					}
					f27elem.PrivateIPAddresses = f27elemf13
				}
				if f27iter.SubnetId != nil {
					f27elem.SubnetID = f27iter.SubnetId
				}
				f27 = append(f27, f27elem)
			}
			ko.Spec.NetworkInterfaces = f27
		} else {
			ko.Spec.NetworkInterfaces = nil
		}
		if elem.OutpostArn != nil {
			ko.Status.OutpostARN = elem.OutpostArn
		} else {
			ko.Status.OutpostARN = nil
		}
		if elem.Placement != nil {
			f29 := &svcapitypes.Placement{}
			if elem.Placement.Affinity != nil {
				f29.Affinity = elem.Placement.Affinity
			}
			if elem.Placement.AvailabilityZone != nil {
				f29.AvailabilityZone = elem.Placement.AvailabilityZone
			}
			if elem.Placement.GroupName != nil {
				f29.GroupName = elem.Placement.GroupName
			}
			if elem.Placement.HostId != nil {
				f29.HostID = elem.Placement.HostId
			}
			if elem.Placement.HostResourceGroupArn != nil {
				f29.HostResourceGroupARN = elem.Placement.HostResourceGroupArn
			}
			if elem.Placement.PartitionNumber != nil {
				f29.PartitionNumber = elem.Placement.PartitionNumber
			}
			if elem.Placement.SpreadDomain != nil {
				f29.SpreadDomain = elem.Placement.SpreadDomain
			}
			if elem.Placement.Tenancy != nil {
				f29.Tenancy = elem.Placement.Tenancy
			}
			ko.Spec.Placement = f29
		} else {
			ko.Spec.Placement = nil
		}
		if elem.Platform != nil {
			ko.Status.Platform = elem.Platform
		} else {
			ko.Status.Platform = nil
		}
		if elem.PlatformDetails != nil {
			ko.Status.PlatformDetails = elem.PlatformDetails
		} else {
			ko.Status.PlatformDetails = nil
		}
		if elem.PrivateDnsName != nil {
			ko.Status.PrivateDNSName = elem.PrivateDnsName
		} else {
			ko.Status.PrivateDNSName = nil
		}
		if elem.PrivateDnsNameOptions != nil {
			f33 := &svcapitypes.PrivateDNSNameOptionsRequest{}
			if elem.PrivateDnsNameOptions.EnableResourceNameDnsAAAARecord != nil {
				f33.EnableResourceNameDNSAAAARecord = elem.PrivateDnsNameOptions.EnableResourceNameDnsAAAARecord
			}
			if elem.PrivateDnsNameOptions.EnableResourceNameDnsARecord != nil {
				f33.EnableResourceNameDNSARecord = elem.PrivateDnsNameOptions.EnableResourceNameDnsARecord
			}
			if elem.PrivateDnsNameOptions.HostnameType != nil {
				f33.HostnameType = elem.PrivateDnsNameOptions.HostnameType
			}
			ko.Spec.PrivateDNSNameOptions = f33
		} else {
			ko.Spec.PrivateDNSNameOptions = nil
		}
		if elem.PrivateIpAddress != nil {
			ko.Spec.PrivateIPAddress = elem.PrivateIpAddress
		} else {
			ko.Spec.PrivateIPAddress = nil
		}
		if elem.ProductCodes != nil {
			f35 := []*svcapitypes.ProductCode{}
			for _, f35iter := range elem.ProductCodes {
				f35elem := &svcapitypes.ProductCode{}
				if f35iter.ProductCodeId != nil {
					f35elem.ProductCodeID = f35iter.ProductCodeId
				}
				if f35iter.ProductCodeType != nil {
					f35elem.ProductCodeType = f35iter.ProductCodeType
				}
				f35 = append(f35, f35elem)
			}
			ko.Status.ProductCodes = f35
		} else {
			ko.Status.ProductCodes = nil
		}
		if elem.PublicDnsName != nil {
			ko.Status.PublicDNSName = elem.PublicDnsName
		} else {
			ko.Status.PublicDNSName = nil
		}
		if elem.PublicIpAddress != nil {
			ko.Status.PublicIPAddress = elem.PublicIpAddress
		} else {
			ko.Status.PublicIPAddress = nil
		}
		if elem.RamdiskId != nil {
			ko.Spec.RAMDiskID = elem.RamdiskId
		} else {
			ko.Spec.RAMDiskID = nil
		}
		if elem.RootDeviceName != nil {
			ko.Status.RootDeviceName = elem.RootDeviceName
		} else {
			ko.Status.RootDeviceName = nil
		}
		if elem.RootDeviceType != nil {
			ko.Status.RootDeviceType = elem.RootDeviceType
		} else {
			ko.Status.RootDeviceType = nil
		}
		if elem.SecurityGroups != nil {
			f41 := []*string{}
			for _, f41iter := range elem.SecurityGroups {
				var f41elem string
				f41elem = *f41iter.GroupName
				f41 = append(f41, &f41elem)
			}
			ko.Spec.SecurityGroups = f41
		} else {
			ko.Spec.SecurityGroups = nil
		}
		if elem.SourceDestCheck != nil {
			ko.Status.SourceDestCheck = elem.SourceDestCheck
		} else {
			ko.Status.SourceDestCheck = nil
		}
		if elem.SpotInstanceRequestId != nil {
			ko.Status.SpotInstanceRequestID = elem.SpotInstanceRequestId
		} else {
			ko.Status.SpotInstanceRequestID = nil
		}
		if elem.SriovNetSupport != nil {
			ko.Status.SRIOVNetSupport = elem.SriovNetSupport
		} else {
			ko.Status.SRIOVNetSupport = nil
		}
		if elem.State != nil {
			f45 := &svcapitypes.InstanceState{}
			if elem.State.Code != nil {
				f45.Code = elem.State.Code
			}
			if elem.State.Name != nil {
				f45.Name = elem.State.Name
			}
			ko.Status.State = f45
		} else {
			ko.Status.State = nil
		}
		if elem.StateReason != nil {
			f46 := &svcapitypes.StateReason{}
			if elem.StateReason.Code != nil {
				f46.Code = elem.StateReason.Code
			}
			if elem.StateReason.Message != nil {
				f46.Message = elem.StateReason.Message
			}
			ko.Status.StateReason = f46
		} else {
			ko.Status.StateReason = nil
		}
		if elem.StateTransitionReason != nil {
			ko.Status.StateTransitionReason = elem.StateTransitionReason
		} else {
			ko.Status.StateTransitionReason = nil
		}
		if elem.SubnetId != nil {
			ko.Spec.SubnetID = elem.SubnetId
		} else {
			ko.Spec.SubnetID = nil
		}
		if elem.Tags != nil {
			f49 := []*svcapitypes.Tag{}
			for _, f49iter := range elem.Tags {
				f49elem := &svcapitypes.Tag{}
				if f49iter.Key != nil {
					f49elem.Key = f49iter.Key
				}
				if f49iter.Value != nil {
					f49elem.Value = f49iter.Value
				}
				f49 = append(f49, f49elem)
			}
			ko.Spec.Tags = f49
		} else {
			ko.Spec.Tags = nil
		}
		if elem.TpmSupport != nil {
			ko.Status.TPMSupport = elem.TpmSupport
		} else {
			ko.Status.TPMSupport = nil
		}
		if elem.UsageOperation != nil {
			ko.Status.UsageOperation = elem.UsageOperation
		} else {
			ko.Status.UsageOperation = nil
		}
		if elem.UsageOperationUpdateTime != nil {
			ko.Status.UsageOperationUpdateTime = &metav1.Time{*elem.UsageOperationUpdateTime}
		} else {
			ko.Status.UsageOperationUpdateTime = nil
		}
		if elem.VirtualizationType != nil {
			ko.Status.VirtualizationType = elem.VirtualizationType
		} else {
			ko.Status.VirtualizationType = nil
		}
		if elem.VpcId != nil {
			ko.Status.VPCID = elem.VpcId
		} else {
			ko.Status.VPCID = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	toAdd, toDelete := computeTagsDelta(desired.ko.Spec.Tags, ko.Spec.Tags)
	if len(toAdd) == 0 && len(toDelete) == 0 {
		// if desired tags and response tags are equal,
		// then assign desired tags to maintain tag order
		ko.Spec.Tags = desired.ko.Spec.Tags
	}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.RunInstancesInput, error) {
	res := &svcsdk.RunInstancesInput{}

	if r.ko.Spec.BlockDeviceMappings != nil {
		f0 := []*svcsdk.BlockDeviceMapping{}
		for _, f0iter := range r.ko.Spec.BlockDeviceMappings {
			f0elem := &svcsdk.BlockDeviceMapping{}
			if f0iter.DeviceName != nil {
				f0elem.SetDeviceName(*f0iter.DeviceName)
			}
			if f0iter.EBS != nil {
				f0elemf1 := &svcsdk.EbsBlockDevice{}
				if f0iter.EBS.DeleteOnTermination != nil {
					f0elemf1.SetDeleteOnTermination(*f0iter.EBS.DeleteOnTermination)
				}
				if f0iter.EBS.Encrypted != nil {
					f0elemf1.SetEncrypted(*f0iter.EBS.Encrypted)
				}
				if f0iter.EBS.IOPS != nil {
					f0elemf1.SetIops(*f0iter.EBS.IOPS)
				}
				if f0iter.EBS.KMSKeyID != nil {
					f0elemf1.SetKmsKeyId(*f0iter.EBS.KMSKeyID)
				}
				if f0iter.EBS.OutpostARN != nil {
					f0elemf1.SetOutpostArn(*f0iter.EBS.OutpostARN)
				}
				if f0iter.EBS.SnapshotID != nil {
					f0elemf1.SetSnapshotId(*f0iter.EBS.SnapshotID)
				}
				if f0iter.EBS.Throughput != nil {
					f0elemf1.SetThroughput(*f0iter.EBS.Throughput)
				}
				if f0iter.EBS.VolumeSize != nil {
					f0elemf1.SetVolumeSize(*f0iter.EBS.VolumeSize)
				}
				if f0iter.EBS.VolumeType != nil {
					f0elemf1.SetVolumeType(*f0iter.EBS.VolumeType)
				}
				f0elem.SetEbs(f0elemf1)
			}
			if f0iter.NoDevice != nil {
				f0elem.SetNoDevice(*f0iter.NoDevice)
			}
			if f0iter.VirtualName != nil {
				f0elem.SetVirtualName(*f0iter.VirtualName)
			}
			f0 = append(f0, f0elem)
		}
		res.SetBlockDeviceMappings(f0)
	}
	if r.ko.Spec.CapacityReservationSpecification != nil {
		f1 := &svcsdk.CapacityReservationSpecification{}
		if r.ko.Spec.CapacityReservationSpecification.CapacityReservationPreference != nil {
			f1.SetCapacityReservationPreference(*r.ko.Spec.CapacityReservationSpecification.CapacityReservationPreference)
		}
		if r.ko.Spec.CapacityReservationSpecification.CapacityReservationTarget != nil {
			f1f1 := &svcsdk.CapacityReservationTarget{}
			if r.ko.Spec.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID != nil {
				f1f1.SetCapacityReservationId(*r.ko.Spec.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID)
			}
			if r.ko.Spec.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN != nil {
				f1f1.SetCapacityReservationResourceGroupArn(*r.ko.Spec.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN)
			}
			f1.SetCapacityReservationTarget(f1f1)
		}
		res.SetCapacityReservationSpecification(f1)
	}
	if r.ko.Spec.CPUOptions != nil {
		f2 := &svcsdk.CpuOptionsRequest{}
		if r.ko.Spec.CPUOptions.CoreCount != nil {
			f2.SetCoreCount(*r.ko.Spec.CPUOptions.CoreCount)
		}
		if r.ko.Spec.CPUOptions.ThreadsPerCore != nil {
			f2.SetThreadsPerCore(*r.ko.Spec.CPUOptions.ThreadsPerCore)
		}
		res.SetCpuOptions(f2)
	}
	if r.ko.Spec.CreditSpecification != nil {
		f3 := &svcsdk.CreditSpecificationRequest{}
		if r.ko.Spec.CreditSpecification.CPUCredits != nil {
			f3.SetCpuCredits(*r.ko.Spec.CreditSpecification.CPUCredits)
		}
		res.SetCreditSpecification(f3)
	}
	if r.ko.Spec.DisableAPIStop != nil {
		res.SetDisableApiStop(*r.ko.Spec.DisableAPIStop)
	}
	if r.ko.Spec.DisableAPITermination != nil {
		res.SetDisableApiTermination(*r.ko.Spec.DisableAPITermination)
	}
	if r.ko.Spec.EBSOptimized != nil {
		res.SetEbsOptimized(*r.ko.Spec.EBSOptimized)
	}
	if r.ko.Spec.ElasticGPUSpecification != nil {
		f7 := []*svcsdk.ElasticGpuSpecification{}
		for _, f7iter := range r.ko.Spec.ElasticGPUSpecification {
			f7elem := &svcsdk.ElasticGpuSpecification{}
			if f7iter.Type != nil {
				f7elem.SetType(*f7iter.Type)
			}
			f7 = append(f7, f7elem)
		}
		res.SetElasticGpuSpecification(f7)
	}
	if r.ko.Spec.ElasticInferenceAccelerators != nil {
		f8 := []*svcsdk.ElasticInferenceAccelerator{}
		for _, f8iter := range r.ko.Spec.ElasticInferenceAccelerators {
			f8elem := &svcsdk.ElasticInferenceAccelerator{}
			if f8iter.Count != nil {
				f8elem.SetCount(*f8iter.Count)
			}
			if f8iter.Type != nil {
				f8elem.SetType(*f8iter.Type)
			}
			f8 = append(f8, f8elem)
		}
		res.SetElasticInferenceAccelerators(f8)
	}
	if r.ko.Spec.EnclaveOptions != nil {
		f9 := &svcsdk.EnclaveOptionsRequest{}
		if r.ko.Spec.EnclaveOptions.Enabled != nil {
			f9.SetEnabled(*r.ko.Spec.EnclaveOptions.Enabled)
		}
		res.SetEnclaveOptions(f9)
	}
	if r.ko.Spec.HibernationOptions != nil {
		f10 := &svcsdk.HibernationOptionsRequest{}
		if r.ko.Spec.HibernationOptions.Configured != nil {
			f10.SetConfigured(*r.ko.Spec.HibernationOptions.Configured)
		}
		res.SetHibernationOptions(f10)
	}
	if r.ko.Spec.IAMInstanceProfile != nil {
		f11 := &svcsdk.IamInstanceProfileSpecification{}
		if r.ko.Spec.IAMInstanceProfile.ARN != nil {
			f11.SetArn(*r.ko.Spec.IAMInstanceProfile.ARN)
		}
		if r.ko.Spec.IAMInstanceProfile.Name != nil {
			f11.SetName(*r.ko.Spec.IAMInstanceProfile.Name)
		}
		res.SetIamInstanceProfile(f11)
	}
	if r.ko.Spec.ImageID != nil {
		res.SetImageId(*r.ko.Spec.ImageID)
	}
	if r.ko.Spec.InstanceInitiatedShutdownBehavior != nil {
		res.SetInstanceInitiatedShutdownBehavior(*r.ko.Spec.InstanceInitiatedShutdownBehavior)
	}
	if r.ko.Spec.InstanceMarketOptions != nil {
		f14 := &svcsdk.InstanceMarketOptionsRequest{}
		if r.ko.Spec.InstanceMarketOptions.MarketType != nil {
			f14.SetMarketType(*r.ko.Spec.InstanceMarketOptions.MarketType)
		}
		if r.ko.Spec.InstanceMarketOptions.SpotOptions != nil {
			f14f1 := &svcsdk.SpotMarketOptions{}
			if r.ko.Spec.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
				f14f1.SetBlockDurationMinutes(*r.ko.Spec.InstanceMarketOptions.SpotOptions.BlockDurationMinutes)
			}
			if r.ko.Spec.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != nil {
				f14f1.SetInstanceInterruptionBehavior(*r.ko.Spec.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior)
			}
			if r.ko.Spec.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
				f14f1.SetMaxPrice(*r.ko.Spec.InstanceMarketOptions.SpotOptions.MaxPrice)
			}
			if r.ko.Spec.InstanceMarketOptions.SpotOptions.SpotInstanceType != nil {
				f14f1.SetSpotInstanceType(*r.ko.Spec.InstanceMarketOptions.SpotOptions.SpotInstanceType)
			}
			if r.ko.Spec.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
				f14f1.SetValidUntil(r.ko.Spec.InstanceMarketOptions.SpotOptions.ValidUntil.Time)
			}
			f14.SetSpotOptions(f14f1)
		}
		res.SetInstanceMarketOptions(f14)
	}
	if r.ko.Spec.InstanceType != nil {
		res.SetInstanceType(*r.ko.Spec.InstanceType)
	}
	if r.ko.Spec.IPv6AddressCount != nil {
		res.SetIpv6AddressCount(*r.ko.Spec.IPv6AddressCount)
	}
	if r.ko.Spec.IPv6Addresses != nil {
		f17 := []*svcsdk.InstanceIpv6Address{}
		for _, f17iter := range r.ko.Spec.IPv6Addresses {
			f17elem := &svcsdk.InstanceIpv6Address{}
			if f17iter.IPv6Address != nil {
				f17elem.SetIpv6Address(*f17iter.IPv6Address)
			}
			f17 = append(f17, f17elem)
		}
		res.SetIpv6Addresses(f17)
	}
	if r.ko.Spec.KernelID != nil {
		res.SetKernelId(*r.ko.Spec.KernelID)
	}
	if r.ko.Spec.KeyName != nil {
		res.SetKeyName(*r.ko.Spec.KeyName)
	}
	if r.ko.Spec.LaunchTemplate != nil {
		f20 := &svcsdk.LaunchTemplateSpecification{}
		if r.ko.Spec.LaunchTemplate.LaunchTemplateID != nil {
			f20.SetLaunchTemplateId(*r.ko.Spec.LaunchTemplate.LaunchTemplateID)
		}
		if r.ko.Spec.LaunchTemplate.LaunchTemplateName != nil {
			f20.SetLaunchTemplateName(*r.ko.Spec.LaunchTemplate.LaunchTemplateName)
		}
		if r.ko.Spec.LaunchTemplate.Version != nil {
			f20.SetVersion(*r.ko.Spec.LaunchTemplate.Version)
		}
		res.SetLaunchTemplate(f20)
	}
	if r.ko.Spec.LicenseSpecifications != nil {
		f21 := []*svcsdk.LicenseConfigurationRequest{}
		for _, f21iter := range r.ko.Spec.LicenseSpecifications {
			f21elem := &svcsdk.LicenseConfigurationRequest{}
			if f21iter.LicenseConfigurationARN != nil {
				f21elem.SetLicenseConfigurationArn(*f21iter.LicenseConfigurationARN)
			}
			f21 = append(f21, f21elem)
		}
		res.SetLicenseSpecifications(f21)
	}
	if r.ko.Spec.MaintenanceOptions != nil {
		f22 := &svcsdk.InstanceMaintenanceOptionsRequest{}
		if r.ko.Spec.MaintenanceOptions.AutoRecovery != nil {
			f22.SetAutoRecovery(*r.ko.Spec.MaintenanceOptions.AutoRecovery)
		}
		res.SetMaintenanceOptions(f22)
	}
	res.SetMaxCount(1)
	if r.ko.Spec.MetadataOptions != nil {
		f24 := &svcsdk.InstanceMetadataOptionsRequest{}
		if r.ko.Spec.MetadataOptions.HTTPEndpoint != nil {
			f24.SetHttpEndpoint(*r.ko.Spec.MetadataOptions.HTTPEndpoint)
		}
		if r.ko.Spec.MetadataOptions.HTTPProtocolIPv6 != nil {
			f24.SetHttpProtocolIpv6(*r.ko.Spec.MetadataOptions.HTTPProtocolIPv6)
		}
		if r.ko.Spec.MetadataOptions.HTTPPutResponseHopLimit != nil {
			f24.SetHttpPutResponseHopLimit(*r.ko.Spec.MetadataOptions.HTTPPutResponseHopLimit)
		}
		if r.ko.Spec.MetadataOptions.HTTPTokens != nil {
			f24.SetHttpTokens(*r.ko.Spec.MetadataOptions.HTTPTokens)
		}
		if r.ko.Spec.MetadataOptions.InstanceMetadataTags != nil {
			f24.SetInstanceMetadataTags(*r.ko.Spec.MetadataOptions.InstanceMetadataTags)
		}
		res.SetMetadataOptions(f24)
	}
	res.SetMinCount(1)
	if r.ko.Spec.Monitoring != nil {
		f26 := &svcsdk.RunInstancesMonitoringEnabled{}
		if r.ko.Spec.Monitoring.Enabled != nil {
			f26.SetEnabled(*r.ko.Spec.Monitoring.Enabled)
		}
		res.SetMonitoring(f26)
	}
	if r.ko.Spec.NetworkInterfaces != nil {
		f27 := []*svcsdk.InstanceNetworkInterfaceSpecification{}
		for _, f27iter := range r.ko.Spec.NetworkInterfaces {
			f27elem := &svcsdk.InstanceNetworkInterfaceSpecification{}
			if f27iter.AssociateCarrierIPAddress != nil {
				f27elem.SetAssociateCarrierIpAddress(*f27iter.AssociateCarrierIPAddress)
			}
			if f27iter.AssociatePublicIPAddress != nil {
				f27elem.SetAssociatePublicIpAddress(*f27iter.AssociatePublicIPAddress)
			}
			if f27iter.DeleteOnTermination != nil {
				f27elem.SetDeleteOnTermination(*f27iter.DeleteOnTermination)
			}
			if f27iter.Description != nil {
				f27elem.SetDescription(*f27iter.Description)
			}
			if f27iter.DeviceIndex != nil {
				f27elem.SetDeviceIndex(*f27iter.DeviceIndex)
			}
			if f27iter.InterfaceType != nil {
				f27elem.SetInterfaceType(*f27iter.InterfaceType)
			}
			if f27iter.IPv4PrefixCount != nil {
				f27elem.SetIpv4PrefixCount(*f27iter.IPv4PrefixCount)
			}
			if f27iter.IPv4Prefixes != nil {
				f27elemf7 := []*svcsdk.Ipv4PrefixSpecificationRequest{}
				for _, f27elemf7iter := range f27iter.IPv4Prefixes {
					f27elemf7elem := &svcsdk.Ipv4PrefixSpecificationRequest{}
					if f27elemf7iter.IPv4Prefix != nil {
						f27elemf7elem.SetIpv4Prefix(*f27elemf7iter.IPv4Prefix)
					}
					f27elemf7 = append(f27elemf7, f27elemf7elem)
				}
				f27elem.SetIpv4Prefixes(f27elemf7)
			}
			if f27iter.IPv6AddressCount != nil {
				f27elem.SetIpv6AddressCount(*f27iter.IPv6AddressCount)
			}
			if f27iter.IPv6Addresses != nil {
				f27elemf9 := []*svcsdk.InstanceIpv6Address{}
				for _, f27elemf9iter := range f27iter.IPv6Addresses {
					f27elemf9elem := &svcsdk.InstanceIpv6Address{}
					if f27elemf9iter.IPv6Address != nil {
						f27elemf9elem.SetIpv6Address(*f27elemf9iter.IPv6Address)
					}
					f27elemf9 = append(f27elemf9, f27elemf9elem)
				}
				f27elem.SetIpv6Addresses(f27elemf9)
			}
			if f27iter.IPv6PrefixCount != nil {
				f27elem.SetIpv6PrefixCount(*f27iter.IPv6PrefixCount)
			}
			if f27iter.IPv6Prefixes != nil {
				f27elemf11 := []*svcsdk.Ipv6PrefixSpecificationRequest{}
				for _, f27elemf11iter := range f27iter.IPv6Prefixes {
					f27elemf11elem := &svcsdk.Ipv6PrefixSpecificationRequest{}
					if f27elemf11iter.IPv6Prefix != nil {
						f27elemf11elem.SetIpv6Prefix(*f27elemf11iter.IPv6Prefix)
					}
					f27elemf11 = append(f27elemf11, f27elemf11elem)
				}
				f27elem.SetIpv6Prefixes(f27elemf11)
			}
			if f27iter.NetworkCardIndex != nil {
				f27elem.SetNetworkCardIndex(*f27iter.NetworkCardIndex)
			}
			if f27iter.NetworkInterfaceID != nil {
				f27elem.SetNetworkInterfaceId(*f27iter.NetworkInterfaceID)
			}
			if f27iter.PrivateIPAddress != nil {
				f27elem.SetPrivateIpAddress(*f27iter.PrivateIPAddress)
			}
			if f27iter.PrivateIPAddresses != nil {
				f27elemf15 := []*svcsdk.PrivateIpAddressSpecification{}
				for _, f27elemf15iter := range f27iter.PrivateIPAddresses {
					f27elemf15elem := &svcsdk.PrivateIpAddressSpecification{}
					if f27elemf15iter.Primary != nil {
						f27elemf15elem.SetPrimary(*f27elemf15iter.Primary)
					}
					if f27elemf15iter.PrivateIPAddress != nil {
						f27elemf15elem.SetPrivateIpAddress(*f27elemf15iter.PrivateIPAddress)
					}
					f27elemf15 = append(f27elemf15, f27elemf15elem)
				}
				f27elem.SetPrivateIpAddresses(f27elemf15)
			}
			if f27iter.SecondaryPrivateIPAddressCount != nil {
				f27elem.SetSecondaryPrivateIpAddressCount(*f27iter.SecondaryPrivateIPAddressCount)
			}
			if f27iter.SubnetID != nil {
				f27elem.SetSubnetId(*f27iter.SubnetID)
			}
			f27 = append(f27, f27elem)
		}
		res.SetNetworkInterfaces(f27)
	}
	if r.ko.Spec.Placement != nil {
		f28 := &svcsdk.Placement{}
		if r.ko.Spec.Placement.Affinity != nil {
			f28.SetAffinity(*r.ko.Spec.Placement.Affinity)
		}
		if r.ko.Spec.Placement.AvailabilityZone != nil {
			f28.SetAvailabilityZone(*r.ko.Spec.Placement.AvailabilityZone)
		}
		if r.ko.Spec.Placement.GroupName != nil {
			f28.SetGroupName(*r.ko.Spec.Placement.GroupName)
		}
		if r.ko.Spec.Placement.HostID != nil {
			f28.SetHostId(*r.ko.Spec.Placement.HostID)
		}
		if r.ko.Spec.Placement.HostResourceGroupARN != nil {
			f28.SetHostResourceGroupArn(*r.ko.Spec.Placement.HostResourceGroupARN)
		}
		if r.ko.Spec.Placement.PartitionNumber != nil {
			f28.SetPartitionNumber(*r.ko.Spec.Placement.PartitionNumber)
		}
		if r.ko.Spec.Placement.SpreadDomain != nil {
			f28.SetSpreadDomain(*r.ko.Spec.Placement.SpreadDomain)
		}
		if r.ko.Spec.Placement.Tenancy != nil {
			f28.SetTenancy(*r.ko.Spec.Placement.Tenancy)
		}
		res.SetPlacement(f28)
	}
	if r.ko.Spec.PrivateDNSNameOptions != nil {
		f29 := &svcsdk.PrivateDnsNameOptionsRequest{}
		if r.ko.Spec.PrivateDNSNameOptions.EnableResourceNameDNSAAAARecord != nil {
			f29.SetEnableResourceNameDnsAAAARecord(*r.ko.Spec.PrivateDNSNameOptions.EnableResourceNameDNSAAAARecord)
		}
		if r.ko.Spec.PrivateDNSNameOptions.EnableResourceNameDNSARecord != nil {
			f29.SetEnableResourceNameDnsARecord(*r.ko.Spec.PrivateDNSNameOptions.EnableResourceNameDNSARecord)
		}
		if r.ko.Spec.PrivateDNSNameOptions.HostnameType != nil {
			f29.SetHostnameType(*r.ko.Spec.PrivateDNSNameOptions.HostnameType)
		}
		res.SetPrivateDnsNameOptions(f29)
	}
	if r.ko.Spec.PrivateIPAddress != nil {
		res.SetPrivateIpAddress(*r.ko.Spec.PrivateIPAddress)
	}
	if r.ko.Spec.RAMDiskID != nil {
		res.SetRamdiskId(*r.ko.Spec.RAMDiskID)
	}
	if r.ko.Spec.SecurityGroupIDs != nil {
		f32 := []*string{}
		for _, f32iter := range r.ko.Spec.SecurityGroupIDs {
			var f32elem string
			f32elem = *f32iter
			f32 = append(f32, &f32elem)
		}
		res.SetSecurityGroupIds(f32)
	}
	if r.ko.Spec.SecurityGroups != nil {
		f33 := []*string{}
		for _, f33iter := range r.ko.Spec.SecurityGroups {
			var f33elem string
			f33elem = *f33iter
			f33 = append(f33, &f33elem)
		}
		res.SetSecurityGroups(f33)
	}
	if r.ko.Spec.SubnetID != nil {
		res.SetSubnetId(*r.ko.Spec.SubnetID)
	}
	if r.ko.Spec.UserData != nil {
		res.SetUserData(*r.ko.Spec.UserData)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return rm.customUpdateInstance(ctx, desired, latest, delta)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	if err = addInstanceIDsToTerminateRequest(r, input); err != nil {
		return nil, ackerr.NotFound
	}
	var resp *svcsdk.TerminateInstancesOutput
	_ = resp
	resp, err = rm.sdkapi.TerminateInstancesWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "TerminateInstances", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.TerminateInstancesInput, error) {
	res := &svcsdk.TerminateInstancesInput{}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Instance,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}

func (rm *resourceManager) newTag(
	c svcapitypes.Tag,
) *svcsdk.Tag {
	res := &svcsdk.Tag{}
	if c.Key != nil {
		res.SetKey(*c.Key)
	}
	if c.Value != nil {
		res.SetValue(*c.Value)
	}

	return res
}
