// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package flow_log

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.DeliverLogsPermissionARN, b.ko.Spec.DeliverLogsPermissionARN) {
		delta.Add("Spec.DeliverLogsPermissionARN", a.ko.Spec.DeliverLogsPermissionARN, b.ko.Spec.DeliverLogsPermissionARN)
	} else if a.ko.Spec.DeliverLogsPermissionARN != nil && b.ko.Spec.DeliverLogsPermissionARN != nil {
		if *a.ko.Spec.DeliverLogsPermissionARN != *b.ko.Spec.DeliverLogsPermissionARN {
			delta.Add("Spec.DeliverLogsPermissionARN", a.ko.Spec.DeliverLogsPermissionARN, b.ko.Spec.DeliverLogsPermissionARN)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DestinationOptions, b.ko.Spec.DestinationOptions) {
		delta.Add("Spec.DestinationOptions", a.ko.Spec.DestinationOptions, b.ko.Spec.DestinationOptions)
	} else if a.ko.Spec.DestinationOptions != nil && b.ko.Spec.DestinationOptions != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.DestinationOptions.FileFormat, b.ko.Spec.DestinationOptions.FileFormat) {
			delta.Add("Spec.DestinationOptions.FileFormat", a.ko.Spec.DestinationOptions.FileFormat, b.ko.Spec.DestinationOptions.FileFormat)
		} else if a.ko.Spec.DestinationOptions.FileFormat != nil && b.ko.Spec.DestinationOptions.FileFormat != nil {
			if *a.ko.Spec.DestinationOptions.FileFormat != *b.ko.Spec.DestinationOptions.FileFormat {
				delta.Add("Spec.DestinationOptions.FileFormat", a.ko.Spec.DestinationOptions.FileFormat, b.ko.Spec.DestinationOptions.FileFormat)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DestinationOptions.HiveCompatiblePartitions, b.ko.Spec.DestinationOptions.HiveCompatiblePartitions) {
			delta.Add("Spec.DestinationOptions.HiveCompatiblePartitions", a.ko.Spec.DestinationOptions.HiveCompatiblePartitions, b.ko.Spec.DestinationOptions.HiveCompatiblePartitions)
		} else if a.ko.Spec.DestinationOptions.HiveCompatiblePartitions != nil && b.ko.Spec.DestinationOptions.HiveCompatiblePartitions != nil {
			if *a.ko.Spec.DestinationOptions.HiveCompatiblePartitions != *b.ko.Spec.DestinationOptions.HiveCompatiblePartitions {
				delta.Add("Spec.DestinationOptions.HiveCompatiblePartitions", a.ko.Spec.DestinationOptions.HiveCompatiblePartitions, b.ko.Spec.DestinationOptions.HiveCompatiblePartitions)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DestinationOptions.PerHourPartition, b.ko.Spec.DestinationOptions.PerHourPartition) {
			delta.Add("Spec.DestinationOptions.PerHourPartition", a.ko.Spec.DestinationOptions.PerHourPartition, b.ko.Spec.DestinationOptions.PerHourPartition)
		} else if a.ko.Spec.DestinationOptions.PerHourPartition != nil && b.ko.Spec.DestinationOptions.PerHourPartition != nil {
			if *a.ko.Spec.DestinationOptions.PerHourPartition != *b.ko.Spec.DestinationOptions.PerHourPartition {
				delta.Add("Spec.DestinationOptions.PerHourPartition", a.ko.Spec.DestinationOptions.PerHourPartition, b.ko.Spec.DestinationOptions.PerHourPartition)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.LogDestination, b.ko.Spec.LogDestination) {
		delta.Add("Spec.LogDestination", a.ko.Spec.LogDestination, b.ko.Spec.LogDestination)
	} else if a.ko.Spec.LogDestination != nil && b.ko.Spec.LogDestination != nil {
		if *a.ko.Spec.LogDestination != *b.ko.Spec.LogDestination {
			delta.Add("Spec.LogDestination", a.ko.Spec.LogDestination, b.ko.Spec.LogDestination)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.LogDestinationType, b.ko.Spec.LogDestinationType) {
		delta.Add("Spec.LogDestinationType", a.ko.Spec.LogDestinationType, b.ko.Spec.LogDestinationType)
	} else if a.ko.Spec.LogDestinationType != nil && b.ko.Spec.LogDestinationType != nil {
		if *a.ko.Spec.LogDestinationType != *b.ko.Spec.LogDestinationType {
			delta.Add("Spec.LogDestinationType", a.ko.Spec.LogDestinationType, b.ko.Spec.LogDestinationType)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.LogFormat, b.ko.Spec.LogFormat) {
		delta.Add("Spec.LogFormat", a.ko.Spec.LogFormat, b.ko.Spec.LogFormat)
	} else if a.ko.Spec.LogFormat != nil && b.ko.Spec.LogFormat != nil {
		if *a.ko.Spec.LogFormat != *b.ko.Spec.LogFormat {
			delta.Add("Spec.LogFormat", a.ko.Spec.LogFormat, b.ko.Spec.LogFormat)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.LogGroupName, b.ko.Spec.LogGroupName) {
		delta.Add("Spec.LogGroupName", a.ko.Spec.LogGroupName, b.ko.Spec.LogGroupName)
	} else if a.ko.Spec.LogGroupName != nil && b.ko.Spec.LogGroupName != nil {
		if *a.ko.Spec.LogGroupName != *b.ko.Spec.LogGroupName {
			delta.Add("Spec.LogGroupName", a.ko.Spec.LogGroupName, b.ko.Spec.LogGroupName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MaxAggregationInterval, b.ko.Spec.MaxAggregationInterval) {
		delta.Add("Spec.MaxAggregationInterval", a.ko.Spec.MaxAggregationInterval, b.ko.Spec.MaxAggregationInterval)
	} else if a.ko.Spec.MaxAggregationInterval != nil && b.ko.Spec.MaxAggregationInterval != nil {
		if *a.ko.Spec.MaxAggregationInterval != *b.ko.Spec.MaxAggregationInterval {
			delta.Add("Spec.MaxAggregationInterval", a.ko.Spec.MaxAggregationInterval, b.ko.Spec.MaxAggregationInterval)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ResourceID, b.ko.Spec.ResourceID) {
		delta.Add("Spec.ResourceID", a.ko.Spec.ResourceID, b.ko.Spec.ResourceID)
	} else if a.ko.Spec.ResourceID != nil && b.ko.Spec.ResourceID != nil {
		if *a.ko.Spec.ResourceID != *b.ko.Spec.ResourceID {
			delta.Add("Spec.ResourceID", a.ko.Spec.ResourceID, b.ko.Spec.ResourceID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ResourceType, b.ko.Spec.ResourceType) {
		delta.Add("Spec.ResourceType", a.ko.Spec.ResourceType, b.ko.Spec.ResourceType)
	} else if a.ko.Spec.ResourceType != nil && b.ko.Spec.ResourceType != nil {
		if *a.ko.Spec.ResourceType != *b.ko.Spec.ResourceType {
			delta.Add("Spec.ResourceType", a.ko.Spec.ResourceType, b.ko.Spec.ResourceType)
		}
	}
	if !ackcompare.MapStringStringEqual(ToACKTags(a.ko.Spec.Tags), ToACKTags(b.ko.Spec.Tags)) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TrafficType, b.ko.Spec.TrafficType) {
		delta.Add("Spec.TrafficType", a.ko.Spec.TrafficType, b.ko.Spec.TrafficType)
	} else if a.ko.Spec.TrafficType != nil && b.ko.Spec.TrafficType != nil {
		if *a.ko.Spec.TrafficType != *b.ko.Spec.TrafficType {
			delta.Add("Spec.TrafficType", a.ko.Spec.TrafficType, b.ko.Spec.TrafficType)
		}
	}

	return delta
}
