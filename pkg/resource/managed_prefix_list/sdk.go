// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package managed_prefix_list

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/ec2"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ec2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.ManagedPrefixList{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// If we have a PrefixListID, use it to filter the describe call
	if r.ko.Status.PrefixListID != nil {
		input.PrefixListIds = []string{*r.ko.Status.PrefixListID}
	} else if r.ko.Spec.PrefixListName != nil {
		// If we don't have an ID yet, filter by both owner ID and prefix list name
		// This prevents matching against AWS-managed prefix lists
		// and other user-owned prefix lists with different names
		filters := []svcsdktypes.Filter{
			{
				Name:   aws.String("owner-id"),
				Values: []string{string(rm.awsAccountID)},
			},
			{
				Name:   aws.String("prefix-list-name"),
				Values: []string{*r.ko.Spec.PrefixListName},
			},
		}
		input.Filters = filters
	}

	var resp *svcsdk.DescribeManagedPrefixListsOutput
	resp, err = rm.sdkapi.DescribeManagedPrefixLists(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeManagedPrefixLists", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.PrefixLists {
		if elem.AddressFamily != nil {
			ko.Spec.AddressFamily = elem.AddressFamily
		} else {
			ko.Spec.AddressFamily = nil
		}
		if elem.MaxEntries != nil {
			maxEntriesCopy := int64(*elem.MaxEntries)
			ko.Spec.MaxEntries = &maxEntriesCopy
		} else {
			ko.Spec.MaxEntries = nil
		}
		if elem.OwnerId != nil {
			ko.Status.OwnerID = elem.OwnerId
		} else {
			ko.Status.OwnerID = nil
		}
		if elem.PrefixListArn != nil {
			ko.Status.PrefixListARN = elem.PrefixListArn
		} else {
			ko.Status.PrefixListARN = nil
		}
		if elem.PrefixListId != nil {
			ko.Status.PrefixListID = elem.PrefixListId
		} else {
			ko.Status.PrefixListID = nil
		}
		if elem.PrefixListName != nil {
			ko.Spec.PrefixListName = elem.PrefixListName
		} else {
			ko.Spec.PrefixListName = nil
		}
		if elem.State != "" {
			ko.Status.State = aws.String(string(elem.State))
		} else {
			ko.Status.State = nil
		}
		if elem.StateMessage != nil {
			ko.Status.StateMessage = elem.StateMessage
		} else {
			ko.Status.StateMessage = nil
		}
		if elem.Tags != nil {
			f8 := []*svcapitypes.Tag{}
			for _, f8iter := range elem.Tags {
				f8elem := &svcapitypes.Tag{}
				if f8iter.Key != nil {
					f8elem.Key = f8iter.Key
				}
				if f8iter.Value != nil {
					f8elem.Value = f8iter.Value
				}
				f8 = append(f8, f8elem)
			}
			ko.Spec.Tags = f8
		} else {
			ko.Spec.Tags = nil
		}
		if elem.Version != nil {
			ko.Status.Version = elem.Version
		} else {
			ko.Status.Version = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	// Get the entries separately
	if ko.Status.PrefixListID != nil {
		entriesResp, err := rm.sdkapi.GetManagedPrefixListEntries(
			ctx,
			&svcsdk.GetManagedPrefixListEntriesInput{
				PrefixListId: ko.Status.PrefixListID,
			},
		)
		rm.metrics.RecordAPICall("GET", "GetManagedPrefixListEntries", err)
		if err != nil {
			return nil, err
		}
		if entriesResp.Entries != nil {
			f0 := []*svcapitypes.AddPrefixListEntry{}
			for _, f0iter := range entriesResp.Entries {
				f0elem := &svcapitypes.AddPrefixListEntry{}
				if f0iter.Cidr != nil {
					f0elem.CIDR = f0iter.Cidr
				}
				if f0iter.Description != nil {
					f0elem.Description = f0iter.Description
				}
				f0 = append(f0, f0elem)
			}
			ko.Spec.Entries = f0
		} else {
			ko.Spec.Entries = nil
		}
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return false
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeManagedPrefixListsInput, error) {
	res := &svcsdk.DescribeManagedPrefixListsInput{}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}
	updateTagSpecificationsInCreateRequest(desired, input)

	var resp *svcsdk.CreateManagedPrefixListOutput
	_ = resp
	resp, err = rm.sdkapi.CreateManagedPrefixList(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateManagedPrefixList", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.PrefixList.AddressFamily != nil {
		ko.Spec.AddressFamily = resp.PrefixList.AddressFamily
	} else {
		ko.Spec.AddressFamily = nil
	}
	if resp.PrefixList.MaxEntries != nil {
		maxEntriesCopy := int64(*resp.PrefixList.MaxEntries)
		ko.Spec.MaxEntries = &maxEntriesCopy
	} else {
		ko.Spec.MaxEntries = nil
	}
	if resp.PrefixList.OwnerId != nil {
		ko.Status.OwnerID = resp.PrefixList.OwnerId
	} else {
		ko.Status.OwnerID = nil
	}
	if resp.PrefixList.PrefixListArn != nil {
		ko.Status.PrefixListARN = resp.PrefixList.PrefixListArn
	} else {
		ko.Status.PrefixListARN = nil
	}
	if resp.PrefixList.PrefixListId != nil {
		ko.Status.PrefixListID = resp.PrefixList.PrefixListId
	} else {
		ko.Status.PrefixListID = nil
	}
	if resp.PrefixList.PrefixListName != nil {
		ko.Spec.PrefixListName = resp.PrefixList.PrefixListName
	} else {
		ko.Spec.PrefixListName = nil
	}
	if resp.PrefixList.State != "" {
		ko.Status.State = aws.String(string(resp.PrefixList.State))
	} else {
		ko.Status.State = nil
	}
	if resp.PrefixList.StateMessage != nil {
		ko.Status.StateMessage = resp.PrefixList.StateMessage
	} else {
		ko.Status.StateMessage = nil
	}
	if resp.PrefixList.Tags != nil {
		f8 := []*svcapitypes.Tag{}
		for _, f8iter := range resp.PrefixList.Tags {
			f8elem := &svcapitypes.Tag{}
			if f8iter.Key != nil {
				f8elem.Key = f8iter.Key
			}
			if f8iter.Value != nil {
				f8elem.Value = f8iter.Value
			}
			f8 = append(f8, f8elem)
		}
		ko.Spec.Tags = f8
	} else {
		ko.Spec.Tags = nil
	}
	if resp.PrefixList.Version != nil {
		ko.Status.Version = resp.PrefixList.Version
	} else {
		ko.Status.Version = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateManagedPrefixListInput, error) {
	res := &svcsdk.CreateManagedPrefixListInput{}

	if r.ko.Spec.AddressFamily != nil {
		res.AddressFamily = r.ko.Spec.AddressFamily
	}
	if r.ko.Spec.Entries != nil {
		f1 := []svcsdktypes.AddPrefixListEntry{}
		for _, f1iter := range r.ko.Spec.Entries {
			f1elem := &svcsdktypes.AddPrefixListEntry{}
			if f1iter.CIDR != nil {
				f1elem.Cidr = f1iter.CIDR
			}
			if f1iter.Description != nil {
				f1elem.Description = f1iter.Description
			}
			f1 = append(f1, *f1elem)
		}
		res.Entries = f1
	}
	if r.ko.Spec.MaxEntries != nil {
		maxEntriesCopy0 := *r.ko.Spec.MaxEntries
		if maxEntriesCopy0 > math.MaxInt32 || maxEntriesCopy0 < math.MinInt32 {
			return nil, fmt.Errorf("error: field MaxEntries is of type int32")
		}
		maxEntriesCopy := int32(maxEntriesCopy0)
		res.MaxEntries = &maxEntriesCopy
	}
	if r.ko.Spec.PrefixListName != nil {
		res.PrefixListName = r.ko.Spec.PrefixListName
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return rm.customUpdateManagedPrefixList(ctx, desired, latest, delta)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteManagedPrefixListOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteManagedPrefixList(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteManagedPrefixList", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteManagedPrefixListInput, error) {
	res := &svcsdk.DeleteManagedPrefixListInput{}

	if r.ko.Status.PrefixListID != nil {
		res.PrefixListId = r.ko.Status.PrefixListID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.ManagedPrefixList,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "InvalidParameterValue",
		"PrefixListMaxEntriesExceeded":
		return true
	default:
		return false
	}
}
