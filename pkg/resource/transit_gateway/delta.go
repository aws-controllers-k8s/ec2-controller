// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package transit_gateway

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}
	compareTags(delta, a, b)

	if ackcompare.HasNilDifference(a.ko.Spec.Description, b.ko.Spec.Description) {
		delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
	} else if a.ko.Spec.Description != nil && b.ko.Spec.Description != nil {
		if *a.ko.Spec.Description != *b.ko.Spec.Description {
			delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Options, b.ko.Spec.Options) {
		delta.Add("Spec.Options", a.ko.Spec.Options, b.ko.Spec.Options)
	} else if a.ko.Spec.Options != nil && b.ko.Spec.Options != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.Options.AmazonSideASN, b.ko.Spec.Options.AmazonSideASN) {
			delta.Add("Spec.Options.AmazonSideASN", a.ko.Spec.Options.AmazonSideASN, b.ko.Spec.Options.AmazonSideASN)
		} else if a.ko.Spec.Options.AmazonSideASN != nil && b.ko.Spec.Options.AmazonSideASN != nil {
			if *a.ko.Spec.Options.AmazonSideASN != *b.ko.Spec.Options.AmazonSideASN {
				delta.Add("Spec.Options.AmazonSideASN", a.ko.Spec.Options.AmazonSideASN, b.ko.Spec.Options.AmazonSideASN)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Options.AutoAcceptSharedAttachments, b.ko.Spec.Options.AutoAcceptSharedAttachments) {
			delta.Add("Spec.Options.AutoAcceptSharedAttachments", a.ko.Spec.Options.AutoAcceptSharedAttachments, b.ko.Spec.Options.AutoAcceptSharedAttachments)
		} else if a.ko.Spec.Options.AutoAcceptSharedAttachments != nil && b.ko.Spec.Options.AutoAcceptSharedAttachments != nil {
			if *a.ko.Spec.Options.AutoAcceptSharedAttachments != *b.ko.Spec.Options.AutoAcceptSharedAttachments {
				delta.Add("Spec.Options.AutoAcceptSharedAttachments", a.ko.Spec.Options.AutoAcceptSharedAttachments, b.ko.Spec.Options.AutoAcceptSharedAttachments)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Options.DefaultRouteTableAssociation, b.ko.Spec.Options.DefaultRouteTableAssociation) {
			delta.Add("Spec.Options.DefaultRouteTableAssociation", a.ko.Spec.Options.DefaultRouteTableAssociation, b.ko.Spec.Options.DefaultRouteTableAssociation)
		} else if a.ko.Spec.Options.DefaultRouteTableAssociation != nil && b.ko.Spec.Options.DefaultRouteTableAssociation != nil {
			if *a.ko.Spec.Options.DefaultRouteTableAssociation != *b.ko.Spec.Options.DefaultRouteTableAssociation {
				delta.Add("Spec.Options.DefaultRouteTableAssociation", a.ko.Spec.Options.DefaultRouteTableAssociation, b.ko.Spec.Options.DefaultRouteTableAssociation)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Options.DefaultRouteTablePropagation, b.ko.Spec.Options.DefaultRouteTablePropagation) {
			delta.Add("Spec.Options.DefaultRouteTablePropagation", a.ko.Spec.Options.DefaultRouteTablePropagation, b.ko.Spec.Options.DefaultRouteTablePropagation)
		} else if a.ko.Spec.Options.DefaultRouteTablePropagation != nil && b.ko.Spec.Options.DefaultRouteTablePropagation != nil {
			if *a.ko.Spec.Options.DefaultRouteTablePropagation != *b.ko.Spec.Options.DefaultRouteTablePropagation {
				delta.Add("Spec.Options.DefaultRouteTablePropagation", a.ko.Spec.Options.DefaultRouteTablePropagation, b.ko.Spec.Options.DefaultRouteTablePropagation)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Options.DNSSupport, b.ko.Spec.Options.DNSSupport) {
			delta.Add("Spec.Options.DNSSupport", a.ko.Spec.Options.DNSSupport, b.ko.Spec.Options.DNSSupport)
		} else if a.ko.Spec.Options.DNSSupport != nil && b.ko.Spec.Options.DNSSupport != nil {
			if *a.ko.Spec.Options.DNSSupport != *b.ko.Spec.Options.DNSSupport {
				delta.Add("Spec.Options.DNSSupport", a.ko.Spec.Options.DNSSupport, b.ko.Spec.Options.DNSSupport)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Options.MulticastSupport, b.ko.Spec.Options.MulticastSupport) {
			delta.Add("Spec.Options.MulticastSupport", a.ko.Spec.Options.MulticastSupport, b.ko.Spec.Options.MulticastSupport)
		} else if a.ko.Spec.Options.MulticastSupport != nil && b.ko.Spec.Options.MulticastSupport != nil {
			if *a.ko.Spec.Options.MulticastSupport != *b.ko.Spec.Options.MulticastSupport {
				delta.Add("Spec.Options.MulticastSupport", a.ko.Spec.Options.MulticastSupport, b.ko.Spec.Options.MulticastSupport)
			}
		}
		if len(a.ko.Spec.Options.TransitGatewayCIDRBlocks) != len(b.ko.Spec.Options.TransitGatewayCIDRBlocks) {
			delta.Add("Spec.Options.TransitGatewayCIDRBlocks", a.ko.Spec.Options.TransitGatewayCIDRBlocks, b.ko.Spec.Options.TransitGatewayCIDRBlocks)
		} else if len(a.ko.Spec.Options.TransitGatewayCIDRBlocks) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.Options.TransitGatewayCIDRBlocks, b.ko.Spec.Options.TransitGatewayCIDRBlocks) {
				delta.Add("Spec.Options.TransitGatewayCIDRBlocks", a.ko.Spec.Options.TransitGatewayCIDRBlocks, b.ko.Spec.Options.TransitGatewayCIDRBlocks)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.Options.VPNECMPSupport, b.ko.Spec.Options.VPNECMPSupport) {
			delta.Add("Spec.Options.VPNECMPSupport", a.ko.Spec.Options.VPNECMPSupport, b.ko.Spec.Options.VPNECMPSupport)
		} else if a.ko.Spec.Options.VPNECMPSupport != nil && b.ko.Spec.Options.VPNECMPSupport != nil {
			if *a.ko.Spec.Options.VPNECMPSupport != *b.ko.Spec.Options.VPNECMPSupport {
				delta.Add("Spec.Options.VPNECMPSupport", a.ko.Spec.Options.VPNECMPSupport, b.ko.Spec.Options.VPNECMPSupport)
			}
		}
	}

	return delta
}
